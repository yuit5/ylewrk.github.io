WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.340
Well, the debugger is a tool not only for

00:00:02.340 --> 00:00:04.980
setting breakpoints and inspecting values of variables.

00:00:04.980 --> 00:00:06.570
Depending on your development environment,

00:00:06.570 --> 00:00:10.485
you will most probably have a debug of some kind on your system already.

00:00:10.485 --> 00:00:14.655
In this course, we will be using the GNU Debugger or GDB for short.

00:00:14.655 --> 00:00:16.560
It is a command line-based tool,

00:00:16.560 --> 00:00:19.440
so we don't have a nice fancy GUI to display

00:00:19.440 --> 00:00:22.530
information but there are lots of details we can get from GDB.

00:00:22.530 --> 00:00:27.270
In this example, we will be using it to look directly into the computer memory,

00:00:27.270 --> 00:00:29.460
into memory blocks to which the character pointer

00:00:29.460 --> 00:00:31.710
in the code example you already saw refers.

00:00:31.710 --> 00:00:34.365
We will try to locate the string UDACITY there

00:00:34.365 --> 00:00:38.220
directly from the hex and binary values using an ASCII table.

00:00:38.220 --> 00:00:40.485
So let's go and see how it works.

00:00:40.485 --> 00:00:43.450
So now let's take a look at how the debugger works here.

00:00:43.450 --> 00:00:46.400
In this case, we're going to use the GDB debugger.

00:00:46.400 --> 00:00:48.080
In order to start GDB,

00:00:48.080 --> 00:00:51.860
we simply type GDB on the console and then we have to

00:00:51.860 --> 00:00:55.790
provide the location of the executable we want to debug.

00:00:55.790 --> 00:01:01.100
In my case, this lives in the directory bin and the program is called example.

00:01:01.100 --> 00:01:03.410
This is how we start up the debugger.

00:01:03.410 --> 00:01:04.880
For the example code,

00:01:04.880 --> 00:01:07.355
we can see in the upper left corner here.

00:01:07.355 --> 00:01:09.440
We have a main function. Inside the main function,

00:01:09.440 --> 00:01:12.350
we have a string which gets assigned UDACITY.

00:01:12.350 --> 00:01:16.060
So we can locate this string in memory shortly.

00:01:16.060 --> 00:01:19.785
Then after the string has been written into memory,

00:01:19.785 --> 00:01:23.150
we are printing it to the console and then finally the function returns.

00:01:23.150 --> 00:01:27.350
So let's fire up this program or fire up GDB using this program.

00:01:27.350 --> 00:01:30.125
This is the info you get when you start GDB.

00:01:30.125 --> 00:01:33.425
It has been configured to run on my machine which is an Apple,

00:01:33.425 --> 00:01:36.500
iMac 64-bit which you can find here.

00:01:36.500 --> 00:01:37.850
On the bottom, in green,

00:01:37.850 --> 00:01:42.335
you can see that the GNU debugger has been reading some symbols.

00:01:42.335 --> 00:01:47.090
The symbols it has been reading is the source code which comes along with the program.

00:01:47.090 --> 00:01:50.840
So we have the binary and we have the source code available to the debugger now.

00:01:50.840 --> 00:01:56.675
We can simply print these source codes to the debugging console by typing list.

00:01:56.675 --> 00:02:01.145
As you can see here we have the same program on the bottom than we have on the top.

00:02:01.145 --> 00:02:04.550
In order to halt the execution at a certain point,

00:02:04.550 --> 00:02:06.305
we can add a breakpoint.

00:02:06.305 --> 00:02:08.570
In case you might have been wondering what

00:02:08.570 --> 00:02:10.850
the PDF document on the right-hand side here is,

00:02:10.850 --> 00:02:13.100
it's actually my GDB cheat sheet,

00:02:13.100 --> 00:02:15.110
which is quite useful because it contains

00:02:15.110 --> 00:02:20.605
the most common commands which you might want to use when running GDB.

00:02:20.605 --> 00:02:23.790
Now when you want to set a break point,

00:02:23.790 --> 00:02:25.430
we can also look this up here.

00:02:25.430 --> 00:02:28.640
So if you look in the breakpoints section here on the left-hand side,

00:02:28.640 --> 00:02:31.700
break is the command to set a breakpoint and where is

00:02:31.700 --> 00:02:35.340
the location of the line in which we want to set the breakpoint.

00:02:35.340 --> 00:02:37.580
We can also delete all the breakpoints we have set,

00:02:37.580 --> 00:02:40.129
we can enable and disable a certain breakpoint,

00:02:40.129 --> 00:02:43.260
and we can also remove one break point.

00:02:43.260 --> 00:02:45.510
Now let's set our break point in line number

00:02:45.510 --> 00:02:49.385
5 which is before the string here is written into memory.

00:02:49.385 --> 00:02:52.700
Okay. So that's enter break 5. Here we go.

00:02:52.700 --> 00:02:54.965
Now we have a break point at this memory address.

00:02:54.965 --> 00:02:57.470
If we think of the C plus plus process model,

00:02:57.470 --> 00:03:00.650
we know that the commands which are shipped with

00:03:00.650 --> 00:03:03.830
a program binary are also located inside memory.

00:03:03.830 --> 00:03:07.010
This is the address at which this certain breakpoint lives which

00:03:07.010 --> 00:03:11.635
corresponds to line number 5 where the string UDACITY is written to memory.

00:03:11.635 --> 00:03:14.960
Now in order to halt the execution at this point,

00:03:14.960 --> 00:03:18.480
we have to actually run the program which can be simply done by typing run.

00:03:18.480 --> 00:03:21.695
Now we have some warnings here which we're going to ignore for now.

00:03:21.695 --> 00:03:25.430
But what we want to look at is this particular code at the bottom.

00:03:25.430 --> 00:03:29.755
So we have hit Breakpoint 1 in main at line number 5.

00:03:29.755 --> 00:03:32.900
This is the line which is about to be executed.

00:03:32.900 --> 00:03:37.320
Now, what do we want to do in the next part of this short tutorial here,

00:03:37.320 --> 00:03:40.460
we want to find the location of this string and memory.

00:03:40.460 --> 00:03:42.200
In order for this to work,

00:03:42.200 --> 00:03:45.020
we of course need to execute this line first.

00:03:45.020 --> 00:03:49.890
This can be done very simply by calling the step command and by calling step,

00:03:49.890 --> 00:03:51.695
we are simply moving on to the next line.

00:03:51.695 --> 00:03:56.810
Now line 5 has been executed and the string lives inside memory.

00:03:56.810 --> 00:04:00.820
We can simply print the variable by typing p,

00:04:00.820 --> 00:04:03.785
and then the variable name which is str1.

00:04:03.785 --> 00:04:10.070
By doing so, we get to the content of this character array which contains UDACITY.

00:04:10.070 --> 00:04:15.900
We can also print the address of the array by typing p and present str1.

00:04:15.900 --> 00:04:20.345
Now we get the location in memory where the first character is located.

00:04:20.345 --> 00:04:22.175
Moving on what from here,

00:04:22.175 --> 00:04:24.140
the other characters, the U, the D,

00:04:24.140 --> 00:04:29.040
the A, and so on and so forth are located in memory.

