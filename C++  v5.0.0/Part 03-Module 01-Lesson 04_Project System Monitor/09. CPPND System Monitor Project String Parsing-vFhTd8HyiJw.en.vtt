WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.540
A lot of the actual implementation of this project,

00:00:03.540 --> 00:00:06.915
comes down to parsing the Linux file system.

00:00:06.915 --> 00:00:13.650
In order to get data about the system to display in the system monitor.

00:00:13.650 --> 00:00:15.780
So we've provided a few examples,

00:00:15.779 --> 00:00:20.399
of how to parse the file system in order to get data that you're looking for.

00:00:20.399 --> 00:00:22.513
Then there are lots of different functions,

00:00:22.513 --> 00:00:24.344
within the Linux parser namespace,

00:00:24.344 --> 00:00:30.824
that have dummy implementations that you'll have to replace with your own logic.

00:00:30.824 --> 00:00:36.795
But we have a couple of basic implementations here.

00:00:36.795 --> 00:00:40.939
Maybe we'll start by looking at the implementation of kernel.

00:00:40.939 --> 00:00:43.954
How do we get the name of the kernel?

00:00:43.954 --> 00:00:47.179
So this is pretty straightforward.

00:00:47.179 --> 00:00:54.769
We declare a few different strings and then we create an input file stream,

00:00:54.770 --> 00:00:57.830
from the path for

00:00:57.829 --> 00:01:05.759
the operating system kernel version and that's proc directory plus version file name.

00:01:05.760 --> 00:01:07.050
Actually if we open up,

00:01:07.049 --> 00:01:10.939
Linux parser.h, we can see exactly where that's pointing to.

00:01:10.939 --> 00:01:13.310
Proc directory is slash proc,

00:01:13.310 --> 00:01:17.615
that's where a lot of the system data lives and then version file name is slash version.

00:01:17.614 --> 00:01:19.429
So before we even write any code,

00:01:19.430 --> 00:01:23.850
if we just come here and we look at slash proc, slash version.

00:01:23.849 --> 00:01:27.679
We can see the file consists of just one line and the line is

00:01:27.680 --> 00:01:30.470
this long string and it looks like the

00:01:30.469 --> 00:01:34.069
first token in the string is a Linux and the second token is version.

00:01:34.069 --> 00:01:38.869
Then this third token is the actual name of the version.

00:01:38.870 --> 00:01:44.185
This is probably what we actually wanted to display or output in our system monitor.

00:01:44.185 --> 00:01:47.945
So we create this input file stream.

00:01:47.944 --> 00:01:49.909
We check to make sure we were able to open the stream.

00:01:49.909 --> 00:01:53.869
Essentially were we able to open slash proc, slash version.

00:01:53.870 --> 00:01:55.969
Then if we were able to open the stream,

00:01:55.969 --> 00:01:58.400
let's get aligned from the stream and let's store it in

00:01:58.400 --> 00:02:02.550
this line string that we declared earlier.

00:02:02.780 --> 00:02:05.030
Once we have that line,

00:02:05.030 --> 00:02:07.840
we're actually going to create a string stream from the line.

00:02:07.840 --> 00:02:09.935
So we've created a file stream.

00:02:09.935 --> 00:02:12.685
We've used that file stream to get a string.

00:02:12.685 --> 00:02:15.800
Now we're going to create a string stream from the string.

00:02:15.800 --> 00:02:19.355
So I realize that's a little bit of a tongue twister and it's a little hard to follow.

00:02:19.354 --> 00:02:21.619
But what creating the string stream does,

00:02:21.620 --> 00:02:24.370
is it allows us to pull tokens off of the stream.

00:02:24.370 --> 00:02:27.599
Otherwise, parsing up this line,

00:02:27.598 --> 00:02:30.375
which is just this line down here,

00:02:30.375 --> 00:02:32.939
on spaces, is going to be a lot of work.

00:02:32.939 --> 00:02:35.145
But if we create a string stream,

00:02:35.145 --> 00:02:38.870
then, the standard library does a lot of this work for us.

00:02:38.870 --> 00:02:40.580
So when we create this string stream,

00:02:40.580 --> 00:02:43.969
we can pop off the first token,

00:02:43.969 --> 00:02:49.925
which is the operating system name that's Linux and the second token which is version.

00:02:49.925 --> 00:02:51.860
Then what we want is the third token.

00:02:51.860 --> 00:02:54.965
In fact actually, it looks here like we need to fix something.

00:02:54.965 --> 00:02:57.979
We're pulling off the first token and then the second token,

00:02:57.979 --> 00:02:59.569
but what we want is the third token.

00:02:59.569 --> 00:03:04.264
So let's just call the second token version.

00:03:04.264 --> 00:03:08.289
Then we're going to have to come up here and declare it.

00:03:08.289 --> 00:03:11.719
So now, we're pulling off three tokens

00:03:11.719 --> 00:03:14.585
and that third token is what we want and we're going to return it.

00:03:14.585 --> 00:03:15.995
If for some reason,

00:03:15.995 --> 00:03:18.289
opening the string or something else fails here,

00:03:18.289 --> 00:03:24.590
we'll just return kernel which is instantiated as a blank string by default.

00:03:24.590 --> 00:03:31.729
So that's how we parse this one line file in order to get the version name.

00:03:31.729 --> 00:03:34.840
Let's look at how we would do something a little more complex,

00:03:34.840 --> 00:03:37.205
which is how we get the operating system name.

00:03:37.205 --> 00:03:41.430
The operating system name is stored in OS path,

00:03:41.430 --> 00:03:43.694
and if we look at Linux parser.h,

00:03:43.694 --> 00:03:45.824
OS path or KOS path,

00:03:45.824 --> 00:03:47.689
is slash etc slash OS release.

00:03:47.689 --> 00:03:51.335
So that's a rare file that's actually not in the proc directory.

00:03:51.335 --> 00:03:55.955
So let's look at cat etc slash OS-release.

00:03:55.955 --> 00:03:58.300
This file has a bunch of different lines.

00:03:58.300 --> 00:04:01.689
So it's a little more complex than the previous file we were looking at.

00:04:01.689 --> 00:04:04.300
Each line has this key value pair.

00:04:04.300 --> 00:04:06.160
Key equals value.

00:04:06.159 --> 00:04:09.895
But it gets a little hairy because the keys can have spaces in them.

00:04:09.895 --> 00:04:12.189
The values have these quotes around them.

00:04:12.189 --> 00:04:13.870
We'll probably have to deal with that,

00:04:13.870 --> 00:04:15.159
as we parse up this file.

00:04:15.159 --> 00:04:18.865
But let's look at how we handle this file.

00:04:18.865 --> 00:04:21.400
The first thing we do is like before,

00:04:21.399 --> 00:04:25.989
we create a file stream from the path and we check if we're able to open the file stream.

00:04:25.990 --> 00:04:28.980
If we were, we read in a line.

00:04:28.980 --> 00:04:31.660
In fact, we have a while loop this time.

00:04:31.660 --> 00:04:33.700
Because there are multiple lines.

00:04:33.699 --> 00:04:35.110
We create a while loop and we say,

00:04:35.110 --> 00:04:39.259
as long as we're able to read in another line from the file stream, keep going.

00:04:39.259 --> 00:04:41.284
Then, with each line,

00:04:41.285 --> 00:04:43.189
we do some character replacement.

00:04:43.189 --> 00:04:46.490
Essentially to deal with the fact that the keys have spaces in them.

00:04:46.490 --> 00:04:49.370
There are these quotation marks,

00:04:49.370 --> 00:04:52.340
the delimiter here that we seem interested in is equal.

00:04:52.339 --> 00:04:54.739
So we do a little bit of substitution,

00:04:54.740 --> 00:04:58.100
to essentially make each line a little easier to parse.

00:04:58.100 --> 00:05:00.049
We basically split up the line,

00:05:00.048 --> 00:05:03.864
into a key and a value two tokens.

00:05:03.865 --> 00:05:10.420
We create a line stream or an input string stream,

00:05:10.420 --> 00:05:15.170
from our string and this is similar to what we did with the kernel function before.

00:05:15.170 --> 00:05:18.050
Then we start popping tokens off of the string stream,

00:05:18.050 --> 00:05:20.240
and we've organize things.

00:05:20.240 --> 00:05:22.264
So there's a key and a value.

00:05:22.264 --> 00:05:24.019
We look at the key and we say,

00:05:24.019 --> 00:05:27.634
if the key is equal to pretty underscore name,

00:05:27.634 --> 00:05:30.740
then return the corresponding value.

00:05:30.740 --> 00:05:33.365
If we look down here pretty underscore name,

00:05:33.365 --> 00:05:38.069
maps onto Ubuntu 16.04.5 LTS,

00:05:38.069 --> 00:05:41.329
which is the value we want.

00:05:41.329 --> 00:05:46.759
The reason there's an underscore in the comparison string up here,

00:05:46.759 --> 00:05:50.509
is because we've done some of that character substitution I was alluding to earlier.

00:05:50.509 --> 00:05:54.409
Where we initially swap out spaces for underscores,

00:05:54.410 --> 00:05:57.005
in order to just make everything a little easier to parse.

00:05:57.004 --> 00:05:58.339
So pretty space named,

00:05:58.339 --> 00:06:00.094
becomes pretty underscore name.

00:06:00.095 --> 00:06:02.750
That makes it easy to pop off as a single token.

00:06:02.750 --> 00:06:05.569
We look and see if our token is equal to pretty underscore name.

00:06:05.569 --> 00:06:08.344
If it is, then we want to return the value.

00:06:08.345 --> 00:06:09.680
Before we return the value,

00:06:09.680 --> 00:06:11.569
we want to swap things around again.

00:06:11.569 --> 00:06:16.790
We want to replace all the underscores that we just put in the value with spaces.

00:06:16.790 --> 00:06:20.210
To make things back like they were and then we return the value.

00:06:20.209 --> 00:06:22.939
So this is another example of how to parse

00:06:22.939 --> 00:06:25.740
up a file this time a file with multiple lines.

00:06:25.740 --> 00:06:29.425
We run this while loop and we get lines from the file.

00:06:29.425 --> 00:06:35.189
Most of the functions in the Linux parser namespace,

00:06:35.189 --> 00:06:37.160
use some version of this,

00:06:37.160 --> 00:06:41.300
where we're opening up a file and we are checking if the file is open.

00:06:41.300 --> 00:06:43.790
Then pulling lines off of the file and figuring

00:06:43.790 --> 00:06:47.225
out what part of the line we want to return.

00:06:47.225 --> 00:06:49.860
There is a odd function,

00:06:49.860 --> 00:06:52.250
that we've implemented for you in

00:06:52.250 --> 00:06:56.689
the Linux parser namespace and that's the function to get all the process ID's.

00:06:56.689 --> 00:06:58.925
Essentially what we're trying to do here,

00:06:58.925 --> 00:07:02.270
is we're looking at the proc directory and all of

00:07:02.269 --> 00:07:05.759
these directories within proc that have integral values,

00:07:05.759 --> 00:07:09.149
integer values, those correspond to process IDs.

00:07:09.149 --> 00:07:11.189
Those mapped to processes.

00:07:11.189 --> 00:07:13.754
We'd like to return a list of process Id's that's

00:07:13.754 --> 00:07:16.909
essentially every directory name, that's an integer.

00:07:16.910 --> 00:07:19.550
That is a little bit tricky to do.

00:07:19.550 --> 00:07:21.199
So we've written the code for you.

00:07:21.199 --> 00:07:25.879
It uses this dir,

00:07:25.879 --> 00:07:28.730
directory pointer that actually comes,

00:07:28.730 --> 00:07:30.730
if we look way up here.

00:07:30.730 --> 00:07:34.189
In the Includes, there's this dirent file

00:07:34.189 --> 00:07:37.399
that we can pull in as part of the C standard library,

00:07:37.399 --> 00:07:39.079
that we're using here.

00:07:39.079 --> 00:07:42.079
I've mentioned there's a bonus for this function.

00:07:42.079 --> 00:07:43.370
If you really want to go crazy,

00:07:43.370 --> 00:07:48.250
you can update this function to use the C++ standard file system.

00:07:48.250 --> 00:07:50.129
Part of the standard library,

00:07:50.129 --> 00:07:53.829
which came in with C++ 17, unfortunately,

00:07:53.829 --> 00:07:58.188
the version of GCC that installs natively on Ubuntu,

00:07:58.189 --> 00:07:59.600
through the package manager,

00:07:59.600 --> 00:08:01.550
does not yet support standard file system.

00:08:01.550 --> 00:08:04.850
So you'd have to install your own version of GCC that's newer,

00:08:04.850 --> 00:08:07.115
and then figure out how to use standard file system.

00:08:07.115 --> 00:08:12.394
It's actually much cleaner than using these kind of directory pointers.

00:08:12.394 --> 00:08:13.789
But it's a little harder because

00:08:13.790 --> 00:08:18.860
the compiler or GCC doesn't support it out of the box on Ubuntu yet.

00:08:18.860 --> 00:08:22.189
So we've given that to you and essentially all what all this code does,

00:08:22.189 --> 00:08:23.850
is return a vector of process ID's.

00:08:23.850 --> 00:08:26.735
It's a vector of integers that maps to the process ID's.

00:08:26.735 --> 00:08:30.050
Then there are lots of other functions for you to implement in here.

00:08:30.050 --> 00:08:35.629
That mainly involve going into different files and pulling out the relevant data.

00:08:35.629 --> 00:08:38.840
In some of the related texts,

00:08:38.840 --> 00:08:42.840
we'll talk with you about how to get that data.

