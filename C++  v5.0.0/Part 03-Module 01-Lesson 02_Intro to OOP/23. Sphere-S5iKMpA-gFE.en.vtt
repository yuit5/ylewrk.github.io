WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.080
In this exercise, we're going to practice working with

00:00:04.080 --> 00:00:08.655
abstraction by creating this class sphere,

00:00:08.654 --> 00:00:12.794
actually this is the class sphere, and also up here.

00:00:12.794 --> 00:00:15.870
Then creating some accessor functions,

00:00:15.869 --> 00:00:18.789
one for radius and one for volume.

00:00:19.160 --> 00:00:22.454
You can see with volume,

00:00:22.454 --> 00:00:24.719
there might be a few different ways to handle volume.

00:00:24.719 --> 00:00:28.604
You might compute volume once when the radius gets set,

00:00:28.605 --> 00:00:30.240
and then not touch it again,

00:00:30.239 --> 00:00:34.364
or you might compute volume every single time you call the function.

00:00:34.365 --> 00:00:41.115
The formula for the volume of a sphere is pi times 4 divided by 3 times the radius cubed.

00:00:41.115 --> 00:00:45.620
You might notice there's a little bit of funkiness with the way this assert is working.

00:00:45.619 --> 00:00:50.445
It's hard to assert the value of a floating point variable,

00:00:50.445 --> 00:00:53.755
because floating point variable extent forever.

00:00:53.755 --> 00:00:56.210
So in order to check that

00:00:56.210 --> 00:00:59.630
the floating point variable is approximately what we want it to be,

00:00:59.630 --> 00:01:02.960
we simply subtract out the value we're looking for

00:01:02.960 --> 00:01:09.155
523.6 from the value that's returned by the volume function.

00:01:09.155 --> 00:01:11.359
We take the absolute value of that difference.

00:01:11.359 --> 00:01:12.379
So we know it's positive,

00:01:12.379 --> 00:01:15.890
and then we just check that that positive absolute value is small,

00:01:15.890 --> 00:01:16.909
that it's less than one.

00:01:16.909 --> 00:01:20.379
If that's true, then we say that the assert passes.

00:01:20.379 --> 00:01:22.319
So the class is pretty simple,

00:01:22.319 --> 00:01:23.564
you create a constructor,

00:01:23.564 --> 00:01:24.769
and then some accessors,

00:01:24.769 --> 00:01:27.379
and potentially some private members.

00:01:27.379 --> 00:01:28.759
But the interesting thing is,

00:01:28.760 --> 00:01:30.469
from the perspective of the user,

00:01:30.469 --> 00:01:31.819
there are a whole bunch of ways,

00:01:31.819 --> 00:01:34.279
different ways to think about handling the volume function,

00:01:34.280 --> 00:01:35.614
and the user doesn't care.

00:01:35.614 --> 00:01:37.884
From the user's perspective,

00:01:37.885 --> 00:01:43.205
you just call volume on an object of class sphere and you get the volume back,

00:01:43.204 --> 00:01:48.620
whether that function is

00:01:48.620 --> 00:01:53.420
calculated by running multiplication every single time,

00:01:53.420 --> 00:01:55.969
or whether the volume value is cached

00:01:55.969 --> 00:01:58.804
and returned immediately from the user's perspective.

00:01:58.805 --> 00:02:02.910
That's not really something the user has to concern themselves with.

