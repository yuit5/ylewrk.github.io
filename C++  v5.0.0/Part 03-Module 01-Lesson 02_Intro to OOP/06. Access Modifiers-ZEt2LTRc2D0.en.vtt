WEBVTT
Kind: captions
Language: en

00:00:00.290 --> 00:00:05.940
Access modifiers are keywords that allow us to specify

00:00:05.940 --> 00:00:11.984
whether the members of a struct are public or private.

00:00:11.984 --> 00:00:15.644
By default, members of a struct are public,

00:00:15.644 --> 00:00:18.899
so if we don't have any access modifiers as in this case,

00:00:18.899 --> 00:00:27.899
then the members are public and we can do things like set date.day equal to 5,

00:00:27.899 --> 00:00:31.059
and then we can check that

00:00:31.280 --> 00:00:37.325
the member updated appropriately so if we compile and run this code,

00:00:37.325 --> 00:00:40.929
we'll see that we got 5, 1, 0.

00:00:40.929 --> 00:00:46.250
Now the problem sometimes with public members is that there's

00:00:46.250 --> 00:00:51.230
no restriction on what value a user can assign to those members.

00:00:51.229 --> 00:00:59.284
So I could assign the value negative seven and check that that value flows through,

00:00:59.284 --> 00:01:05.840
and in fact it will because there's no restriction on what I can set as the day,

00:01:05.840 --> 00:01:09.424
even though negative seven is a day of the month makes no sense.

00:01:09.424 --> 00:01:14.239
So one of the things that we can do is to

00:01:14.239 --> 00:01:18.634
make members private so they're not directly accessible.

00:01:18.635 --> 00:01:22.100
So we could say that these members

00:01:22.099 --> 00:01:26.104
of the structure private will use the private access modifier,

00:01:26.105 --> 00:01:33.594
and what that means is if we try to compile this code,

00:01:33.594 --> 00:01:34.849
it will give us an error.

00:01:34.849 --> 00:01:37.134
It's saying that, date,

00:01:37.135 --> 00:01:41.359
day or day within the date struct is private within this context,

00:01:41.359 --> 00:01:43.760
and we're not allowed to set it directly.

00:01:43.760 --> 00:01:46.160
So once we make a member private,

00:01:46.159 --> 00:01:52.909
what we might do or what we would often do is to create accessors and mutators.

00:01:52.909 --> 00:01:57.094
So an accessor would be a function.

00:01:57.094 --> 00:02:00.230
We might call it Day or GetDay.

00:02:00.230 --> 00:02:02.885
I like day because it's a little cleaner.

00:02:02.885 --> 00:02:08.110
That returns the value of the day.

00:02:08.110 --> 00:02:11.700
Excuse me, return day,

00:02:11.699 --> 00:02:18.060
and if we compile this code now,

00:02:18.060 --> 00:02:20.150
we'll still get some errors related to month and year.

00:02:20.150 --> 00:02:22.625
So in order to avoid those errors actually,

00:02:22.625 --> 00:02:24.500
let's make month and year public,

00:02:24.500 --> 00:02:27.379
and let's also create a mutator for day.

00:02:27.379 --> 00:02:29.840
So a mutator is going to be a function.

00:02:29.840 --> 00:02:34.134
It could be day or could be set day that

00:02:34.134 --> 00:02:40.099
takes the value that we want to assign to the private member and it says,

00:02:40.099 --> 00:02:42.914
excuse me, we don't want to set day equal to the year,

00:02:42.914 --> 00:02:50.444
we'll say that day equals d. With that,

00:02:50.444 --> 00:02:54.139
we now have to use that accessor and mutator.

00:02:54.139 --> 00:02:57.064
So instead of setting date.day equal to 7,

00:02:57.064 --> 00:03:03.120
we'll set date.day with the argument negative 7.

00:03:03.439 --> 00:03:07.919
Here instead of calling date.day lowercase to get the member,

00:03:07.919 --> 00:03:11.530
we'll call date.Day uppercase as a function,

00:03:11.530 --> 00:03:15.650
and the same down here when we print what the day is.

00:03:15.650 --> 00:03:19.260
So now, if we compile and run this,

00:03:21.650 --> 00:03:24.025
we get the same output,

00:03:24.025 --> 00:03:26.615
but you can see now we have the potential

00:03:26.615 --> 00:03:31.085
to limit or protect what values they get set to.

00:03:31.085 --> 00:03:34.265
So we might say something like if

00:03:34.264 --> 00:03:41.384
d greater than one,

00:03:41.384 --> 00:03:42.530
then you can set the day,

00:03:42.530 --> 00:03:43.909
otherwise don't set the day.

00:03:43.909 --> 00:03:47.789
So now when we compile and run this code,

00:03:47.860 --> 00:03:55.590
we'll see that the test fails because day never got set to negative seven,

00:03:55.590 --> 00:03:57.969
because that's a nonsense value.

00:03:58.099 --> 00:04:02.569
This limitation right here is sometimes called an invariant.

00:04:02.569 --> 00:04:05.254
We'll learn more about that as we learned about classes.

00:04:05.254 --> 00:04:07.219
But for the purposes of this exercise,

00:04:07.219 --> 00:04:10.400
the main thing to keep track of is we have these access modifiers

00:04:10.400 --> 00:04:13.909
public and private that allow us to

00:04:13.909 --> 00:04:17.495
specify whether we can access member variables

00:04:17.495 --> 00:04:22.009
and also functions directly or only indirectly through.

00:04:22.009 --> 00:04:26.360
So we might have a private member day that we can only access indirectly

00:04:26.360 --> 00:04:31.139
through its public accessors and mutators or other functions.

