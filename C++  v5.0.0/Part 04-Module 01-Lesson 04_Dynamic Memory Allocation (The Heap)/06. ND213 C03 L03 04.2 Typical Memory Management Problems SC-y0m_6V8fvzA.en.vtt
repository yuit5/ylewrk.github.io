WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.240
Memory leaks are sometimes really hard to detect,

00:00:03.240 --> 00:00:05.820
and depending on your memory management strategy

00:00:05.820 --> 00:00:08.745
you could limit your calls to new and delete to a narrow local scope.

00:00:08.744 --> 00:00:10.139
This would be the smart way,

00:00:10.140 --> 00:00:13.394
or you could distribute new and delete over your entire code base.

00:00:13.394 --> 00:00:16.829
In this case, it might happen that delete would never be called.

00:00:16.829 --> 00:00:19.289
If exceptional occurs somewhere, for example,

00:00:19.289 --> 00:00:24.089
in the path of execution would never lead to delete you would have a memory leak,

00:00:24.089 --> 00:00:26.759
and even experienced programmers often have difficulties

00:00:26.759 --> 00:00:29.730
finding all the possible memory leaks in a project.

00:00:29.730 --> 00:00:31.050
It takes time as well,

00:00:31.050 --> 00:00:35.370
and next to memory this is the most precious resource which we haven't programming.

00:00:35.369 --> 00:00:38.729
Special tools to detect memory problems such as leaks can therefore

00:00:38.729 --> 00:00:42.134
be a smart addition to your personal programming toolbox.

00:00:42.134 --> 00:00:43.799
Depending on the development environment,

00:00:43.799 --> 00:00:46.089
you might already have such to install.

00:00:46.090 --> 00:00:50.180
Xcode on Mac has one as well as Visual Studio and C on Windows.

00:00:50.179 --> 00:00:52.070
For those who don't use these tools,

00:00:52.070 --> 00:00:54.228
there is an alternative called Valgrind,

00:00:54.228 --> 00:00:55.880
and with this free tool you can perform

00:00:55.880 --> 00:00:59.510
an automated memory check and scan for leaks automatically.

00:00:59.509 --> 00:01:02.089
At the end, you will get a nice and very convenient summary

00:01:02.090 --> 00:01:04.609
of all potential memory leaks in your code.

00:01:04.609 --> 00:01:06.515
Let's see how this works.

00:01:06.515 --> 00:01:09.890
Now this example if we wanted to look at a way to detect

00:01:09.890 --> 00:01:13.099
memory leaks and if we take a look at our main function,

00:01:13.099 --> 00:01:14.819
we see that not much is happening there,

00:01:14.819 --> 00:01:19.069
the only thing which we find is the location of a block of memory on the heap.

00:01:19.069 --> 00:01:22.699
We are allocating memory for 10 integers and

00:01:22.700 --> 00:01:26.689
the points out pInt is pointing to the first integer in this series of 10.

00:01:26.689 --> 00:01:28.009
Actually this is a memory leak,

00:01:28.010 --> 00:01:31.760
because we are calling new to allocate memory but there is

00:01:31.760 --> 00:01:36.215
no call to delete here which means the memory is not deallocated.

00:01:36.215 --> 00:01:40.820
If we would do such a thing here deallocate memory using delete pInt,

00:01:40.819 --> 00:01:42.079
everything would be fine.

00:01:42.079 --> 00:01:43.980
But as we are not doing this,

00:01:43.980 --> 00:01:45.240
there is a memory leak.

00:01:45.239 --> 00:01:49.509
The question is, can we detect this leak automatically using some kind of tool?

00:01:49.510 --> 00:01:52.490
There's actually a whole bunch of tools out there to

00:01:52.489 --> 00:01:55.504
detect such problems in memory and it really

00:01:55.504 --> 00:01:58.399
comes down to the operating system which you are using as well

00:01:58.400 --> 00:02:01.730
as to the integrated development environment,

00:02:01.730 --> 00:02:02.945
you're using the IDE.

00:02:02.944 --> 00:02:05.389
If you're using Visual Studio, for example,

00:02:05.390 --> 00:02:08.284
there should be an onboard tool with which you can do this.

00:02:08.284 --> 00:02:11.734
In our case, we are using Visual Studio Code,

00:02:11.735 --> 00:02:13.370
there is no onboards tool,

00:02:13.370 --> 00:02:15.950
and on my system I am running macOS.

00:02:15.949 --> 00:02:17.829
I could use Xcode to do this,

00:02:17.830 --> 00:02:19.980
so if you're developing on on Mac using Xcode,

00:02:19.979 --> 00:02:24.619
you can also use appropriate tools therefore for memory check and

00:02:24.620 --> 00:02:29.509
for performance optimization of all kinds but you could also use a free software.

00:02:29.509 --> 00:02:33.084
Let's take a look at the website of the tool called Valgrind.

00:02:33.085 --> 00:02:35.900
On this website, you will find a short overview of

00:02:35.900 --> 00:02:40.205
this very powerful set of tools for detecting all kinds of memory problems.

00:02:40.205 --> 00:02:43.850
If you look at the tool suite information for example here,

00:02:43.849 --> 00:02:46.594
you'll actually see that there's a whole bunch of

00:02:46.594 --> 00:02:51.469
different subtour which can be used for all kinds of detection purposes.

00:02:51.469 --> 00:02:54.680
The only thing which we will be using is called Memcheck,

00:02:54.680 --> 00:02:58.150
and Memcheck detects memory management problems

00:02:58.150 --> 00:03:01.400
and it's aimed primarily at C and C++ program.

00:03:01.400 --> 00:03:04.610
So it nicely fits the development environment as

00:03:04.610 --> 00:03:08.190
well as the operating system and the language which we are using here.

00:03:08.189 --> 00:03:10.189
Let's get back to our Visual Studio Code.

00:03:10.189 --> 00:03:12.439
Now in order to use Valgrind,

00:03:12.439 --> 00:03:13.909
you have to of course install it,

00:03:13.909 --> 00:03:16.729
you can use the Homebrew package management

00:03:16.729 --> 00:03:18.979
to software on if you're running Windows Mac OS,

00:03:18.979 --> 00:03:21.310
but you can also compile it for yourselves,

00:03:21.310 --> 00:03:22.849
you can download it from the website.

00:03:22.849 --> 00:03:26.314
There's a whole variety of ways of installing Valgrind on your system.

00:03:26.314 --> 00:03:30.030
I have a pre-installed on my Mac using Homebrew.

00:03:30.030 --> 00:03:32.409
Valgrind can be fired up from the terminal,

00:03:32.409 --> 00:03:35.299
it's done by simply typing valgrind here,

00:03:35.300 --> 00:03:39.425
and now we have to take care to use the correct parameters.

00:03:39.425 --> 00:03:44.210
I don't want to do a deep dive into the myriad ways in which Valgrind can be used.

00:03:44.210 --> 00:03:46.760
We would like to find memory leaks and we would

00:03:46.759 --> 00:03:49.639
like to find the tool just scan for all kinds of leaks.

00:03:49.639 --> 00:03:53.929
So we're going to perform a leak check which is full.

00:03:53.930 --> 00:03:56.254
That means you're going to look for everything.

00:03:56.254 --> 00:04:00.500
We also want to look at all kinds of leaks which there might be,

00:04:00.500 --> 00:04:06.525
so "show-leak-kinds=all" all kinds of leaks which there are,

00:04:06.525 --> 00:04:11.400
we will see what this actually means when we look at the output but for now bear with me.

00:04:11.400 --> 00:04:14.569
The next thing we want to do is we want to track the origins of the link.

00:04:14.569 --> 00:04:17.659
So we can see in the code where they are located.

00:04:17.660 --> 00:04:21.945
So track origin and we are saying,

00:04:21.944 --> 00:04:24.308
"Yes please track the origins."

00:04:24.309 --> 00:04:26.780
Then we have this parameter here on which

00:04:26.779 --> 00:04:29.359
I'm not going into any detail at this point in time.

00:04:29.360 --> 00:04:32.150
Then we want to take a look at the log file,

00:04:32.149 --> 00:04:36.784
and the log file is a text file in which the result is going to be output.

00:04:36.785 --> 00:04:40.040
In this case, I'm going to output it into the same directory where the

00:04:40.040 --> 00:04:44.340
binary lives and I'm calling it Valgrind-out.txt.

00:04:44.540 --> 00:04:47.730
The last thing missing here is, of course,

00:04:47.730 --> 00:04:50.819
we need to tell the Valgrind which binary it should analyze,

00:04:50.819 --> 00:04:54.139
and this can be done at the end and the file which I am

00:04:54.139 --> 00:04:57.909
using here is called memory leaks debugging.cpp.

00:04:57.910 --> 00:05:02.750
So the respective binary is also called memory leaks debugging.

00:05:02.750 --> 00:05:07.915
Now let's execute this code and see what happens and then take a look at the output file.

00:05:07.915 --> 00:05:10.790
There is a small error here show leaks kinds all,

00:05:10.790 --> 00:05:12.875
it seems I have a small typo here.

00:05:12.875 --> 00:05:19.264
Let's quickly fix that should of course be show leak kinds all not leaks kinds on.

00:05:19.264 --> 00:05:21.259
Here we go. Let's try it one more time.

00:05:21.259 --> 00:05:22.925
This null seem to have worked.

00:05:22.925 --> 00:05:27.770
Let's take a look at the output of the Valgrind memory check now.

