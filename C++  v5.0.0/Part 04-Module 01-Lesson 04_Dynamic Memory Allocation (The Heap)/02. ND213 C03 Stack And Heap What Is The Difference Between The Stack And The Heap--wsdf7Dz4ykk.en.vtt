WEBVTT
Kind: captions
Language: en

00:00:06.259 --> 00:00:09.570
When you call a function,

00:00:09.570 --> 00:00:14.129
it increases a stack with a stack frame that represent the function,

00:00:14.130 --> 00:00:16.140
column of the function, you go up.

00:00:16.140 --> 00:00:18.585
When you return, you go back down again.

00:00:18.585 --> 00:00:21.675
So it's a linear growth shrink thing.

00:00:21.675 --> 00:00:26.850
If you want data that lives from one function to another,

00:00:26.850 --> 00:00:29.740
you have to have it somewhere else.

00:00:31.699 --> 00:00:33.839
You can, in principle,

00:00:33.840 --> 00:00:37.095
refer back down the stack but you can't refer up.

00:00:37.094 --> 00:00:40.424
So what people say, there's a memory over here on the side.

00:00:40.424 --> 00:00:42.750
Give me some of that and I'll keep it,

00:00:42.750 --> 00:00:43.890
and when I'm finished,

00:00:43.890 --> 00:00:45.435
I will give it back.

00:00:45.435 --> 00:00:49.085
That's known as a heap or the dynamic memory or the free store.

00:00:49.085 --> 00:00:52.954
In C plus plus, you get it with an operation called New,

00:00:52.954 --> 00:00:59.210
and you give me a new circle or give me a new vector of integers,

00:00:59.210 --> 00:01:01.609
something like that, and then eventually,

00:01:01.609 --> 00:01:03.289
you have a delete that releases it.

00:01:03.289 --> 00:01:07.340
So this memory gets recycled but explicitly.

00:01:07.340 --> 00:01:11.569
This is where constructors and destructors, and scopes,

00:01:11.569 --> 00:01:18.170
and RAII comes in again because I don't trust you to do the delete consistently,

00:01:18.170 --> 00:01:21.810
so you use the new from the constructors,

00:01:21.810 --> 00:01:23.394
put them into handles,

00:01:23.394 --> 00:01:25.879
and the destructor deletes them again.

00:01:25.879 --> 00:01:27.619
So in modern C plus plus,

00:01:27.620 --> 00:01:29.675
you tend not to see the heap.

00:01:29.674 --> 00:01:35.274
There's a lot of code these days written with a lot of new this and new that in.

00:01:35.275 --> 00:01:38.035
Modern C plus plus tend not to do that,

00:01:38.034 --> 00:01:43.984
because they are inside the handles and that gets automatically dealt with.

00:01:43.984 --> 00:01:45.709
As a stack goes up and down,

00:01:45.709 --> 00:01:49.219
the constructors accrue to grab some heap stuff.

00:01:49.219 --> 00:01:53.920
When we return, we ultimately return it back where came from.

00:01:53.920 --> 00:01:58.230
So it's basically been abstracted away.

