WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.509
Now, welcome to the final project of the memory management course.

00:00:03.509 --> 00:00:07.049
In the recent weeks, you have learned so much about memory in C++,

00:00:07.049 --> 00:00:10.289
and I'm sure that your insights into what memory is, how it works,

00:00:10.289 --> 00:00:11.669
and how you can efficiently use,

00:00:11.669 --> 00:00:14.969
is much greater than at the beginning of this course.

00:00:14.970 --> 00:00:16.679
Now, in most lessons, you have completed

00:00:16.679 --> 00:00:19.980
several smaller examples to directly apply your knowledge.

00:00:19.980 --> 00:00:25.375
So you already have some hands-on experience with a major concepts taught in this course.

00:00:25.375 --> 00:00:27.329
On the upcoming final project,

00:00:27.329 --> 00:00:30.195
you will not be developing a project from scratch, but instead,

00:00:30.195 --> 00:00:34.994
I will introduce you to the implementation of an already existing chatbots project.

00:00:34.994 --> 00:00:38.659
With this, you are able to discuss some memory management topics based on

00:00:38.659 --> 00:00:42.649
the content of a knowledge base stored in a text file as you will soon see.

00:00:42.649 --> 00:00:44.420
The program can be executed and works.

00:00:44.420 --> 00:00:46.219
However, I have not been using any of

00:00:46.219 --> 00:00:49.204
the advanced concepts of memory management you have learned about.

00:00:49.204 --> 00:00:51.960
There are no smart pointers, no move semantics,

00:00:51.960 --> 00:00:55.685
and not much thought has been given on ownership of certain variables,

00:00:55.685 --> 00:00:57.560
and on where to allocate memory.

00:00:57.560 --> 00:01:01.984
So your task will be to optimize the project with memory management in mind,

00:01:01.984 --> 00:01:05.165
and we have five tasks in total which you have to complete.

00:01:05.165 --> 00:01:07.190
But before we get into the first task,

00:01:07.189 --> 00:01:10.579
let us have a look at the student version of the code first.

00:01:10.579 --> 00:01:12.289
So before we dive into the code,

00:01:12.290 --> 00:01:16.925
let's look at an overview of the structure of the final project. Let's go.

00:01:16.924 --> 00:01:21.560
What you can see here is an overview of the general task you are about to fulfill.

00:01:21.560 --> 00:01:25.594
The purpose of the task is to analyze an existing chatbot program,

00:01:25.594 --> 00:01:26.929
which is able to discuss

00:01:26.930 --> 00:01:30.920
some memory management topics based on the content of a so-called knowledge base,

00:01:30.920 --> 00:01:32.329
which we will shortly look at.

00:01:32.329 --> 00:01:36.170
The program can be executed and works as intended, however,

00:01:36.170 --> 00:01:41.284
there are no advanced concepts as discussed in this course inside the program code.

00:01:41.284 --> 00:01:43.509
There are no smart pointers, no move semantics,

00:01:43.510 --> 00:01:45.710
and not much thought has been given on

00:01:45.709 --> 00:01:48.349
ownership bound on memory allocation and de-allocation.

00:01:48.349 --> 00:01:51.709
Your task as previously stated is to use

00:01:51.709 --> 00:01:53.569
the course knowledge to optimize

00:01:53.569 --> 00:01:56.804
the chatbot program from a memory management perspective.

00:01:56.805 --> 00:02:00.620
In total, we have a number of five tasks which you have to complete.

00:02:00.620 --> 00:02:02.840
Before we go into those task details,

00:02:02.840 --> 00:02:04.835
let's have a look at the program first.

00:02:04.834 --> 00:02:07.839
What you can see here is the general outline,

00:02:07.840 --> 00:02:11.979
the general structure of how the program is supposed to work.

00:02:11.979 --> 00:02:14.750
On the right-hand side before we start the small demo,

00:02:14.750 --> 00:02:18.875
let's take a look at a screenshot of the chatbots as it currently is.

00:02:18.875 --> 00:02:20.525
You can see the chat window.

00:02:20.525 --> 00:02:21.950
You have a nice background here,

00:02:21.949 --> 00:02:26.959
you have a window or a text box at the bottom where you can enter your queries,

00:02:26.960 --> 00:02:28.564
your questions to the chatbot,

00:02:28.564 --> 00:02:31.775
and the chatbot will answer here on the right.

00:02:31.775 --> 00:02:33.230
Currently, it says, welcome,

00:02:33.229 --> 00:02:35.449
my name is MemBot and so on and so forth.

00:02:35.449 --> 00:02:38.030
He tells you what topics are,

00:02:38.030 --> 00:02:40.159
possible topics you can ask him about.

00:02:40.159 --> 00:02:42.990
For example, possible topics at this point in time,

00:02:42.990 --> 00:02:47.719
pointers and the C++ memory model and he asks you what you would like to talk about.

00:02:47.719 --> 00:02:50.389
So you just can ask him how he's feeling but

00:02:50.389 --> 00:02:53.269
he won't answer based on the content of a current knowledge base.

00:02:53.270 --> 00:02:55.360
Of course, you can always add to the knowledge base.

00:02:55.360 --> 00:02:57.000
But as it's set up now,

00:02:57.000 --> 00:03:01.935
you can only ask him at this stage about pointers and the C++ memory model.

00:03:01.935 --> 00:03:03.270
On the left-hand side,

00:03:03.270 --> 00:03:05.700
you can see an answer graph,

00:03:05.699 --> 00:03:10.129
which is basically structured according to the layout of the knowledge base.

00:03:10.129 --> 00:03:13.384
So we are starting here at the initial root nodes,

00:03:13.384 --> 00:03:16.399
which is called n0 and the red circle here with

00:03:16.400 --> 00:03:21.094
a scene side means this is the current position of the chatbot.

00:03:21.094 --> 00:03:24.020
Based on the location at the root node,

00:03:24.020 --> 00:03:26.284
we only have two options as shown in the graph.

00:03:26.284 --> 00:03:29.419
We can traverse over the edge zero to node n1,

00:03:29.419 --> 00:03:33.269
or we can traverse over edge one to node number 2.

00:03:33.270 --> 00:03:38.939
E0 corresponds to pointers and e1 corresponds to memory model.

00:03:38.939 --> 00:03:43.564
When the chatbot finds that you want to know more about pointers,

00:03:43.564 --> 00:03:46.879
he will move along the edge to the next node and one,

00:03:46.879 --> 00:03:49.909
and then give you new options which you could ask him about,

00:03:49.909 --> 00:03:54.694
for example, smart pointers or something else related to pointers.

00:03:54.694 --> 00:03:57.875
Let's start the demo and see how the dialogue

00:03:57.875 --> 00:04:01.504
expands here and how the chatbots moves accordingly.

00:04:01.504 --> 00:04:03.019
Let's have a look.

00:04:03.020 --> 00:04:06.395
Now, I'm typing in some text here, hi chatbot?

00:04:06.395 --> 00:04:08.320
My name is Andreas.

00:04:08.319 --> 00:04:10.875
So let's talk about pointers.

00:04:10.875 --> 00:04:13.530
All the chatbot is moving to node n1,

00:04:13.530 --> 00:04:15.870
and we get a rather lengthy answer,

00:04:15.870 --> 00:04:17.730
and let's talk about pointers.

00:04:17.730 --> 00:04:19.230
He tells you what a pointer is,

00:04:19.230 --> 00:04:20.685
some details blah blah blah,

00:04:20.685 --> 00:04:22.050
and then he says, okay,

00:04:22.050 --> 00:04:26.360
more topics around pointers you can ask about are smart pointers or a null pointer,

00:04:26.360 --> 00:04:29.240
and I want to know more about smart pointers, please.

00:04:29.240 --> 00:04:33.259
Then the chatbots moves along edge number 3,

00:04:33.259 --> 00:04:38.199
which in this case corresponds to the answer related to smart pointers.

00:04:38.199 --> 00:04:41.139
As soon as the chatbot reaches node number 0,

00:04:41.139 --> 00:04:43.685
the answer related to, in this case,

00:04:43.685 --> 00:04:47.009
smart pointers as outputs to this window here.

00:04:47.009 --> 00:04:50.284
So a smart pointer is an object that behaves like a pointer and so on and so forth.

00:04:50.285 --> 00:04:53.720
So that's the basic idea of how the chatbot works.

00:04:53.720 --> 00:04:55.790
We have this structure here which is rather generic,

00:04:55.790 --> 00:04:59.030
and you can design how the checkbook moves through this network by

00:04:59.029 --> 00:05:03.459
simply changing the structure of the answergraph.txt file,

00:05:03.459 --> 00:05:06.759
which we will look at shortly to see how it basically looks.

00:05:06.759 --> 00:05:11.849
But before we do this, let's have a look at the structure of the code.

