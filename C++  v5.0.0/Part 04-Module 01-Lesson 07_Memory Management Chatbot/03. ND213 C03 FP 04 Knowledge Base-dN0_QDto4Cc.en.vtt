WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.984
Let's have a look now at the knowledge base.

00:00:02.984 --> 00:00:06.299
The knowledge base, I don't want to go into too many details here,

00:00:06.299 --> 00:00:09.585
basically shows the program how to properly set up the graph.

00:00:09.585 --> 00:00:11.130
We have this structure here.

00:00:11.130 --> 00:00:13.429
So we start by those pointy brackets here.

00:00:13.429 --> 00:00:15.509
Then we mentioned the certain keyword, for example,

00:00:15.509 --> 00:00:19.065
what kind of object is it that it's defined in this one line here.

00:00:19.065 --> 00:00:20.339
Okay. In this case, it's a node.

00:00:20.339 --> 00:00:25.379
A node has the ID 0, and associated with this particular node is this answer here.

00:00:25.379 --> 00:00:27.599
Welcome, my name is MemBot and so on and so forth.

00:00:27.600 --> 00:00:29.070
What would you like to talk about?

00:00:29.070 --> 00:00:30.765
So that's the first node,

00:00:30.765 --> 00:00:34.424
the root node of the graph which we saw a couple of slides ago.

00:00:34.424 --> 00:00:37.369
Then comes the second node which gets the ID 1.

00:00:37.369 --> 00:00:39.169
Also there's an answer here,

00:00:39.170 --> 00:00:42.890
and this answer assumes that the user wants to know more

00:00:42.890 --> 00:00:46.909
about pointers and then it tells some facts about pointers.

00:00:46.909 --> 00:00:49.894
Also gives you the options for the next step here.

00:00:49.895 --> 00:00:52.565
You might want to talk about smart pointers or the null pointer.

00:00:52.564 --> 00:00:54.649
Actually, and this slide here,

00:00:54.649 --> 00:00:56.059
we don't have all the nodes.

00:00:56.060 --> 00:00:58.955
So these three dots here mean there's something missing.

00:00:58.954 --> 00:01:01.909
If you want to know what's in the file, just open it up.

00:01:01.909 --> 00:01:03.949
It's contained in the project,

00:01:03.950 --> 00:01:05.120
but for brevity here,

00:01:05.120 --> 00:01:06.910
we will only focus on three nodes.

00:01:06.909 --> 00:01:11.840
The second mode which way you can go to starting from the root node has the ID number 2.

00:01:11.840 --> 00:01:16.189
Basically, it's the node which is associated with the C++ memory model.

00:01:16.189 --> 00:01:19.759
So here the chatbot tells you that when instantiating variables,

00:01:19.759 --> 00:01:21.680
programmers can choose whether to do this on the heap,

00:01:21.680 --> 00:01:23.460
on the stack, and so on.

00:01:23.459 --> 00:01:28.119
From here onwards, you can ask the chatbot to tell you more about the heap,

00:01:28.120 --> 00:01:31.390
about the stack, or about the keyword static for example.

00:01:31.390 --> 00:01:34.430
At the bottom, we have the second type which is possible

00:01:34.430 --> 00:01:37.430
to choose from in this chatbot project.

00:01:37.430 --> 00:01:38.705
It's the type edge.

00:01:38.704 --> 00:01:41.090
The edges also have an ID zero and one,

00:01:41.090 --> 00:01:42.890
and apart from the ID,

00:01:42.890 --> 00:01:46.114
we also have the property parent and the property child.

00:01:46.114 --> 00:01:51.079
So this edge here is associated with node number 0 which is the parent-child.

00:01:51.079 --> 00:01:52.504
Which is this one here,

00:01:52.504 --> 00:01:55.670
the root node, and the child has the ID number 1.

00:01:55.670 --> 00:01:57.320
So this is that one here.

00:01:57.319 --> 00:02:02.459
So this edge here connects nodes number 0 and node number 1.

00:02:02.459 --> 00:02:06.229
It has the keywords pointer and smart pointers associated with it.

00:02:06.230 --> 00:02:10.099
So whenever I pose a question to the chatbot which contains either all those keywords,

00:02:10.099 --> 00:02:12.155
we will move along this edge here.

00:02:12.155 --> 00:02:15.169
The second edge here connects the root node 0

00:02:15.169 --> 00:02:18.769
to node number 2 which is about the C++ memory model.

00:02:18.770 --> 00:02:21.920
Here I have a couple of keywords associated with this edge which

00:02:21.919 --> 00:02:25.899
are memory model and heap as well as stacks.

00:02:25.900 --> 00:02:27.230
So that's the basic structure.

00:02:27.229 --> 00:02:30.060
It's very easy to add new knowledge to the knowledge base.

00:02:30.060 --> 00:02:33.400
Maybe you try it out for yourself once you play around with the source code.

00:02:33.400 --> 00:02:36.349
The knowledge base simply add some more edges,

00:02:36.349 --> 00:02:37.889
put some more content into it.

00:02:37.889 --> 00:02:41.269
Maybe when you come to a point where you have significantly

00:02:41.270 --> 00:02:45.350
expanded the knowledge base when you feel that this is a very versatile chatbot,

00:02:45.349 --> 00:02:47.449
why not send us a text file so we can

00:02:47.449 --> 00:02:50.304
upload it to GitHub to make the repository even better.

00:02:50.305 --> 00:02:52.224
Okay. Enough on the structure for now,

00:02:52.224 --> 00:02:55.139
let's take a look at your tasks here.

