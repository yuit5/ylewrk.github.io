WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.745
Let's take a look at the source code for the Final Project Student Version code.

00:00:04.745 --> 00:00:07.209
What we have here on the left-hand side is

00:00:07.209 --> 00:00:09.984
an overview of all the files which are in the project.

00:00:09.984 --> 00:00:13.359
We have the chatgui which has.h and.cpp.

00:00:13.359 --> 00:00:16.300
We have the chatbot.h and.cpp.

00:00:16.300 --> 00:00:19.615
You can also find the graph edge is here, the graphnodes,

00:00:19.614 --> 00:00:23.859
and the chatlogic and all the naming of the classes corresponds

00:00:23.859 --> 00:00:25.539
to the structure which you saw in

00:00:25.539 --> 00:00:28.655
the slide deck which you have hopefully looked at previously.

00:00:28.655 --> 00:00:31.350
Let's start with a chatgui itself.

00:00:31.350 --> 00:00:34.929
This is the.h file and it has all the classes inside here.

00:00:34.929 --> 00:00:37.195
We have the chatbot panel dialogue,

00:00:37.195 --> 00:00:39.520
which basically holds the elements which we

00:00:39.520 --> 00:00:42.370
need for displaying the dialogue between user and chatbot.

00:00:42.369 --> 00:00:46.609
This is why we also have a pointer to the chat logic itself here.

00:00:46.609 --> 00:00:48.155
Please note those comments here.

00:00:48.155 --> 00:00:52.820
There's an enclosing Student Code tag around each place in

00:00:52.820 --> 00:00:55.219
the code where you have to add something in the course

00:00:55.219 --> 00:00:58.295
of you fulfilling the tasks which we have.

00:00:58.295 --> 00:01:00.170
We don't say which task,

00:01:00.170 --> 00:01:04.670
but mostly it's mentioned roughly in the description of the tasks at least which

00:01:04.670 --> 00:01:09.859
file to look into but we want you to figure out which change has to be implemented where,

00:01:09.859 --> 00:01:12.510
because also when you have to adjust

00:01:12.510 --> 00:01:16.430
the pointer type moving away from raw pointers towards smart pointers.

00:01:16.430 --> 00:01:20.360
If we told you enter a smart pointer in line 19 and file

00:01:20.359 --> 00:01:24.364
so and so and in line 22 and file so and so, it would be too easy.

00:01:24.364 --> 00:01:26.329
You really have to figure this out by yourself.

00:01:26.329 --> 00:01:30.629
If you should change this pointer here to a smart pointer,

00:01:30.629 --> 00:01:33.589
unique pointer, you obviously have to do it in the header

00:01:33.590 --> 00:01:36.920
here but you also have to do it somewhere else and all these places.

00:01:36.920 --> 00:01:39.469
These are places which you have to find by yourselves,

00:01:39.469 --> 00:01:42.709
but all the changes you have to make have to be

00:01:42.709 --> 00:01:46.609
performed somewhere in-between these enclosing taglines here,

00:01:46.609 --> 00:01:49.129
Student Code and End of Student Code.

00:01:49.129 --> 00:01:52.554
At least this limits the scope of your search somewhat.

00:01:52.555 --> 00:01:54.725
Apart from chatLogic, we also have

00:01:54.724 --> 00:01:56.869
a constructor destructor which has

00:01:56.870 --> 00:01:59.359
some window elements here we have getter and setter functions.

00:01:59.359 --> 00:02:01.609
We have some events which to which we want to react.

00:02:01.609 --> 00:02:03.950
This is basically stuff for drawing

00:02:03.950 --> 00:02:07.450
the background image of the San Francisco Golden Gate Bridge.

00:02:07.450 --> 00:02:10.849
We also have some proprietary functions,

00:02:10.849 --> 00:02:14.180
which in this case are the possibility to add a new dialogue item and

00:02:14.180 --> 00:02:17.689
also to print the chatbot response here.

00:02:17.689 --> 00:02:21.109
Further down, we have the chatbot panel dialogue item which

00:02:21.110 --> 00:02:24.815
is one item which could either be from the user or from the chatbot.

00:02:24.814 --> 00:02:29.060
This one has an image in case the chatbot is answering the image is

00:02:29.060 --> 00:02:33.379
ride along by the chatbot depending on its position in the current graph node network.

00:02:33.379 --> 00:02:36.049
The handler which points to the image which

00:02:36.050 --> 00:02:38.840
has been allocated on the heap has to be retrieved

00:02:38.840 --> 00:02:41.689
from the chatbot and to be displayed here

00:02:41.689 --> 00:02:45.159
in this chatbot panel dialogue item instance in that case.

00:02:45.159 --> 00:02:48.194
If it's an answer which we got from the user,

00:02:48.194 --> 00:02:51.019
the user image has to be loaded from someplace else.

00:02:51.020 --> 00:02:54.335
We will look at this position in the code in just a few minutes.

00:02:54.335 --> 00:02:56.960
Apart from that, you have the chatbot frame which is

00:02:56.960 --> 00:02:59.840
the surrounding frame the entire window you are looking at.

00:02:59.840 --> 00:03:02.000
This one has the dialog inside it,

00:03:02.000 --> 00:03:03.455
the checkbook panel dialogue,

00:03:03.455 --> 00:03:07.760
and also the text control where the user can input inputs and some texts.

00:03:07.759 --> 00:03:11.099
Also, we have overloaded an event here and wx widgets event.

00:03:11.099 --> 00:03:16.310
OnEnter means as soon as you finish typing your query to the chatbot and press enter,

00:03:16.310 --> 00:03:20.555
this press to the enter key is captured by the OnEvent.

00:03:20.555 --> 00:03:24.610
This is where we send the message to the chatbot.

00:03:24.610 --> 00:03:27.420
Apart from that, you have an image panel which

00:03:27.419 --> 00:03:30.559
displays a nice image but it's not very important here.

00:03:30.560 --> 00:03:34.969
At the bottom, we have the chatbot app which basically encapsulates

00:03:34.969 --> 00:03:40.115
the main method and what happens when the wx widgets program is started,

00:03:40.115 --> 00:03:44.200
we have the OnInit event where we start everything else.

00:03:44.199 --> 00:03:47.974
This is basically the starting point of the entire program which

00:03:47.974 --> 00:03:50.750
encapsulates the infinite loop which runs

00:03:50.750 --> 00:03:54.659
in the background which hides the main method from us.

