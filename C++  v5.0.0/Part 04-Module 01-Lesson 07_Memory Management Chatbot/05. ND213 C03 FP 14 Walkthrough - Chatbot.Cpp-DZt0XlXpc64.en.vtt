WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.679
Let's look at chatbot.cpp which is really the last file which we will look at.

00:00:04.679 --> 00:00:06.000
Let's start from the top.

00:00:06.000 --> 00:00:09.134
We have the constructor without memory allocation.

00:00:09.134 --> 00:00:11.835
We are only invalidating some data handles here.

00:00:11.835 --> 00:00:14.775
Then we have a constructor with memory allocation which

00:00:14.775 --> 00:00:18.660
has a string which is a filename as a parameter.

00:00:18.660 --> 00:00:24.210
This actually is responsible for loading the image into heap memory,

00:00:24.210 --> 00:00:27.179
the small avatar image we're just going to be displayed in the void.

00:00:27.179 --> 00:00:30.449
So when we instantiate the cha bot using string here,

00:00:30.449 --> 00:00:32.894
then we have a memory allocation on the heap

00:00:32.895 --> 00:00:35.685
with new where the image is loaded into heap memory.

00:00:35.685 --> 00:00:39.575
The function with which we do this is a proprietary function

00:00:39.575 --> 00:00:44.000
from WX widgets and which is able to load all kinds of images not only bitmaps,

00:00:44.000 --> 00:00:45.439
but also as an our case,

00:00:45.439 --> 00:00:48.274
PNG files or also a JPEG files,

00:00:48.274 --> 00:00:51.109
there's a whole variety of different images you can choose from.

00:00:51.109 --> 00:00:54.439
Then we have the destructor which deallocates the heap memory,

00:00:54.439 --> 00:00:59.449
but only in case the image is not null because double depletion leads to memory bug.

00:00:59.450 --> 00:01:01.310
You could also use null pointer here,

00:01:01.310 --> 00:01:04.490
but WX widgets uses null and not the null pointers.

00:01:04.489 --> 00:01:06.199
It's only a slight difference.

00:01:06.200 --> 00:01:07.400
It's a bit technical,

00:01:07.400 --> 00:01:09.755
but this is the recommended way to go.

00:01:09.754 --> 00:01:13.640
But since WX wages has a lot of legacy code inside,

00:01:13.640 --> 00:01:16.489
it has been started over a decade ago.

00:01:16.489 --> 00:01:20.644
It's not a decade old, but some code is still in the old code base.

00:01:20.644 --> 00:01:23.359
This is why at some cases as for example here,

00:01:23.359 --> 00:01:27.564
they use outdated stuff like using null over null pointer.

00:01:27.564 --> 00:01:29.250
Okay, we delete the image.

00:01:29.250 --> 00:01:30.540
The image is going to be null.

00:01:30.540 --> 00:01:32.200
So the pointer is invalidated here,

00:01:32.200 --> 00:01:34.640
that's what's happening in the discharger.

00:01:34.640 --> 00:01:37.310
Then there's again, something missing where you have to enter

00:01:37.310 --> 00:01:40.340
something over the course of the task implementation.

00:01:40.340 --> 00:01:43.640
Then we have the method receive message from user which is

00:01:43.640 --> 00:01:47.435
the core method of the chat bot where we loop over

00:01:47.435 --> 00:01:50.825
all the edges and all the keywords and compute this Levenshtein distance

00:01:50.825 --> 00:01:54.380
to find the best-fitting edge along which to progress to the next node.

00:01:54.379 --> 00:01:57.004
I won't go into the details of implementation here.

00:01:57.004 --> 00:01:59.119
There's a loop over all the child edges,

00:01:59.120 --> 00:02:02.030
a loop over all the keywords associated with an edge,

00:02:02.030 --> 00:02:04.609
then we compute the Levenshtein distance for each edge.

00:02:04.609 --> 00:02:10.139
Then we find the minimum edge later on and select the best-fitting edge to proceed along.

00:02:10.139 --> 00:02:12.759
Once we reach this point here,

00:02:12.759 --> 00:02:13.939
we have a best fit.

00:02:13.939 --> 00:02:17.090
If we reach a node which does not have any outgoing edges,

00:02:17.090 --> 00:02:19.895
we assign rootNode to the new node handle here.

00:02:19.895 --> 00:02:22.969
So the chat bot is automatically set to the first position of

00:02:22.969 --> 00:02:27.530
the answer graph with a current to move chat bot to new node.

00:02:27.530 --> 00:02:30.560
We are redirecting the internal handles and setting

00:02:30.560 --> 00:02:35.365
the chat bot to be with the new node or in this case, the rootNode again.

00:02:35.365 --> 00:02:37.020
Here, insert current node.

00:02:37.020 --> 00:02:41.630
What we have here is a randomized selection of the most appropriate answer.

00:02:41.629 --> 00:02:42.799
As I told you before,

00:02:42.800 --> 00:02:45.660
the chat bot in the answergraph.est,

00:02:45.659 --> 00:02:47.914
you can basically associate

00:02:47.914 --> 00:02:51.634
several answers with a certain node in the current implementation.

00:02:51.634 --> 00:02:54.919
We only have one answer per node to keep complexity at bay.

00:02:54.919 --> 00:02:56.509
But if you wanted to,

00:02:56.509 --> 00:02:57.889
you could, say for example,

00:02:57.889 --> 00:03:00.889
at five possible answers to one node and then

00:03:00.889 --> 00:03:04.189
simply randomize the answer which is picked.

00:03:04.189 --> 00:03:05.359
So as I told you before,

00:03:05.360 --> 00:03:06.960
if you want to do it, try it out,

00:03:06.960 --> 00:03:08.344
add a second answer,

00:03:08.344 --> 00:03:12.109
a third answer and this randomizer here simply chooses

00:03:12.110 --> 00:03:17.180
one answer and picks it and sends it back as a message to the user.

00:03:17.180 --> 00:03:21.875
Then we have the compute Levenshtein distance below the method here.

00:03:21.875 --> 00:03:25.955
There's nothing else. So this is basically the structure of the program.

00:03:25.955 --> 00:03:29.900
I know this is a lot to digest and this is why we have something for you.

00:03:29.900 --> 00:03:32.900
Let's execute the code here and see what happens.

00:03:32.900 --> 00:03:35.640
Okay,it compiles okay.

00:03:35.639 --> 00:03:37.514
It starts up okay.

00:03:37.514 --> 00:03:39.239
Let's wait for the window.

00:03:39.240 --> 00:03:40.680
Here is the window, we can,

00:03:40.680 --> 00:03:43.754
for example say, Hi chatbot,

00:03:43.754 --> 00:03:47.620
tell me about pointers,

00:03:47.620 --> 00:03:51.995
and then he's going to talk about pointers and you can move through the graph.

00:03:51.995 --> 00:03:54.685
When you close the window like this,

00:03:54.685 --> 00:03:56.055
an exception has occurred.

00:03:56.055 --> 00:03:57.175
As you can see here,

00:03:57.175 --> 00:04:03.480
there's something going wrong about access here and your task is to locate this slack.

00:04:03.479 --> 00:04:05.750
Find out what's happening and by trying to

00:04:05.750 --> 00:04:08.433
look for the source of this bug and why it happens,

00:04:08.433 --> 00:04:11.150
I think you will familiarize yourself with the code a lot

00:04:11.150 --> 00:04:14.194
better and this is so to speak your task number zero.

00:04:14.194 --> 00:04:17.029
Try to find the reason why the program crashes at

00:04:17.029 --> 00:04:20.539
this point and fix the bugs so that when you quit the program,

00:04:20.540 --> 00:04:27.060
the crash doesn't occur and the valid exit code zero is printed to the console.

