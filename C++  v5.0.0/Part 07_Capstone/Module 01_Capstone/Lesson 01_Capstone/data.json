{
  "data": {
    "lesson": {
      "id": 840540,
      "key": "6d669b35-1395-4bc0-b8b5-53456bb4c1e1",
      "title": "Capstone",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "In this lesson, you will build your own C++ application, following the principles you have learned throughout this Nanodegree Program. ",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/6d669b35-1395-4bc0-b8b5-53456bb4c1e1/840540/1581974587708/Capstone+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/6d669b35-1395-4bc0-b8b5-53456bb4c1e1/840540/1581974583120/Capstone+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": {
        "key": "0d5601f5-2828-4c18-93cf-b3171eea26ca",
        "version": "1.0.0",
        "locale": "en-us",
        "duration": 25920,
        "semantic_type": "Project",
        "title": "C++ Capstone Project",
        "description": "\n",
        "is_public": true,
        "summary": null,
        "forum_path": "",
        "rubric_id": "2533",
        "terminal_project_id": null,
        "resources": null,
        "image": null
      },
      "lab": null,
      "concepts": [
        {
          "id": 898258,
          "key": "33f5815f-0aad-44e4-9353-fed00bef96a5",
          "title": "Capstone Intro",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "33f5815f-0aad-44e4-9353-fed00bef96a5",
            "completed_at": "2020-05-13T09:06:37.398Z",
            "last_viewed_at": "2020-05-13T09:13:09.809Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 898264,
              "key": "9fbf23e3-0b2c-4b70-ba6d-e3ca6cf5e4c9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Capstone Intro",
              "instructor_notes": ""
            },
            {
              "id": 899046,
              "key": "e48bd1b8-4890-4fdc-ae29-f6cd247f321a",
              "title": "C   Capstone V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "gzqbch2akjY",
                "china_cdn_id": "gzqbch2akjY.mp4"
              }
            },
            {
              "id": 899044,
              "key": "d94e7e7d-a188-43ee-ad92-b093af99473b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Overview\n\nThe Capstone Project gives you a chance to integrate what you've learned throughout this program. This project will become an important part of your portfolio to share with current and future colleagues and employers.\n\nIn this project, you will build a C++ application, following the principles you have learned throughout this Nanodegree Program. This project will demonstrate that you can independently create applications using a wide range of C++ features.\n\nYou can choose from two possible options for this capstone project:\n\n## Capstone Option 1\n\nThe first option is to build the project of your choice. This is the most flexible option, as this will allow you to focus on the type of application that interests you most. There are a wide variety of applications you can choose from, but here are some suggestions for you to think about:\n- Chatbot\n- Neural network deployment\n- Solitaire\n- Microcontroller for an embedded system\n- ROS Node simulated in Gazebo\n- Networking protocol\n- Mandelbrot or Fractal creator\n- Hot dog detector using OpenCV\n- Video game\n\nThere are a wide variety of existing projects and tutorials online that can help you get started, and we'll provide some links below to help. We'll also provide a code repository with a CMakeLists.txt and a \"Hello World\" application that you can build from. You can use this repo to get started if you wish, but you aren't required to use it.\n\n## Capstone Option 2\n\nThe second option for the capstone is to add features to a video game. We'll provide you with a simple 2D Snake game that was inspired by [this Stack Overflow post](https://codereview.stackexchange.com/questions/212296/snake-game-in-c-with-sdl) on beginning game development with the SDL game programming library. The game code provides a solid foundation for you to extend with additional features, or you are welcome to use the code as a framework to build you own game from scratch. If you decide to build your own game, cloning a classic 2D game is great way to get started. Possible ideas include:\n\n- Asteroids\n- Pacman\n- Space Invaders\n- Pong\n\nThe game you create doesn’t need to be a fully-featured clone of the original, but there should be enough of a game for a user to play.\n\nBoth project options will require a solid effort from you to complete, but I am confident that you will be successful, and we can't wait to see what you create! ",
              "instructor_notes": ""
            },
            {
              "id": 899860,
              "key": "369daa28-6d43-4630-88a2-7e809302add1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Resources\n\n### Code Repo and Rubric\n- The 2D Snake game Github repository is [here](https://github.com/udacity/CppND_Capstone_Snake_Game).\n- The empty starter Github repositry is [here](https://github.com/udacity/CppND-Capstone-Hello-World).\n- The project rubric is [here](https://review.udacity.com/#!/rubrics/2533/view). Note that not every rubric item needs to be satisfied to pass the project. Detailed instructions are provided in the next classroom concept.\n\n### Selected Project Resources\n- [Tensorflow C++ Api](https://www.tensorflow.org/guide/extend/cc)\n- [ROS (Robot Operating System) Tutorials](http://wiki.ros.org/ROS/Tutorials). Some of the tutorials here use C++ and some are in Python.\n- Mandelbrot set tutorials [here](https://solarianprogrammer.com/2013/02/28/mandelbrot-set-cpp-11/) and [here](https://medium.com/farouk-ounanes-home-on-the-internet/mandelbrot-set-in-c-from-scratch-c7ad6a1bf2d9)\n- Game programming resources will be provided in the upcoming concepts.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 898259,
          "key": "c263f08d-e0e1-486a-bf22-b93c515d30e9",
          "title": "Steps to Complete the Capstone",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c263f08d-e0e1-486a-bf22-b93c515d30e9",
            "completed_at": "2020-05-13T09:07:02.522Z",
            "last_viewed_at": "2020-05-13T09:15:59.291Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899103,
              "key": "723ef051-76df-49a7-ab3f-63b4267f7cf3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Steps to Complete the Capstone",
              "instructor_notes": ""
            },
            {
              "id": 899104,
              "key": "f1bc5b4c-ce4f-4b1d-8f9d-b90dc65b70e8",
              "title": "CapstoneDetails",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "juGhxJ1ZKSo",
                "china_cdn_id": "juGhxJ1ZKSo.mp4"
              }
            },
            {
              "id": 899045,
              "key": "8abafccf-8365-42dd-a5ee-39edf91a2b1d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Recap of Steps\n\n### Step 1: Propose a Project\nIdentify the application you want to build. We recommend keeping the functionality as simple as possible to start with. Note that it is fine to reuse code from any of the courses in the Nanodegree as a starting point. You are also welcome to use the [Snake game sample code](https://github.com/udacity/CppND_Capstone_Snake_Game) to extend with additional features or to build an entirely different game. If you prefer to start from scratch, you can find a starter repo [here](https://github.com/udacity/CppND-Capstone-Hello-World).\n\n### Step 2: Scope the Project\nReview [the rubric](https://review.udacity.com/#!/rubrics/2533/view). Ensure that the application you build **will satisfy all criteria for the “README” and “Compiling and Testing” sections**, and that the application **will satisfy at least 5 total criteria from the rest of the rubric.  Not all rubric items need to be satisfied in order to pass the project**.  Scope the features of your project to meet the rubric criteria you want to target.\n\nThis flexibility will allow you to focus on the aspects of your application that interest you most.\n\n### Step 3: Build your application\nBuild your own application, or extend the Snake game with new features.\n\n### Step 4: Document Your Work\nWrite a short README indicating which project option you chose. The README should also include:\n- instructions for running the project\n- an overview of your code structure\n- an explanation of how your submission satisfies the necessary rubric",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 898260,
          "key": "ebc79a19-e659-4871-97fa-be2d6b5be97f",
          "title": "Game Programming",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ebc79a19-e659-4871-97fa-be2d6b5be97f",
            "completed_at": "2020-05-13T09:07:09.584Z",
            "last_viewed_at": "2020-05-13T09:07:09.437Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899054,
              "key": "1cc85334-12b9-4d0a-a09e-02757c468c3f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Game Programming\n\nGame programming is a vast topic, and there are many approaches to writing and organizing game code. Additionally, there an enormous number of libraries, platforms, tools, and languages that you can use to build a professional-quality game. While this might seem overwhelming at first, this _should not_ deter you from getting started with building your own game. The core tenets of game programming are nearly universal, and you will learn about the fundamental structure of game code in this concept. By the time you finish the next few concepts, you will be ready to write basic games in C++.\n\n## The Game Loop: Input, Update, Render",
              "instructor_notes": ""
            },
            {
              "id": 899048,
              "key": "4bc60d6a-3ce9-4458-a4c3-2fbad6870892",
              "title": "GameLoop",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "q4Y3UMkVImc",
                "china_cdn_id": "q4Y3UMkVImc.mp4"
              }
            },
            {
              "id": 899049,
              "key": "abb62ecb-e7f4-4a78-a66c-0accf556a2d6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## The Game Loop Overview\n\nThe game loop is a while loop that runs continuously in your code and has three steps:\n\n",
              "instructor_notes": ""
            },
            {
              "id": 899381,
              "key": "64ee8ed0-078b-412e-9adc-afd2dfe084c3",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/July/5d25488a_the-game-loop/the-game-loop.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/64ee8ed0-078b-412e-9adc-afd2dfe084c3",
              "caption": "The Game Loop: Input, Update, Render",
              "alt": "",
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 899384,
              "key": "2990f8f5-fe94-4383-bb40-f129794b6b71",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "- **Input**: This step handles user input from a keyboard, joystick, game controller, or other input device.\n- **Update**: This step uses the input to update the internal state of the game. The game state might include:\n  -  positions of characters in the game world\n  - the speed, health, or inventory of characters in the game\n  -  how many points have been scored in the game so far\n  - any other attributes or data in the game\n\n  Each part of the game state might be updated independently of the input as well. For example, if a character is moving forward in the game with a given velocity, the update step might change the character's position without any additional input.\n\n- **Render**: This step takes the game state and renders the state to the screen according to fixed rules. For example, a character might be rendered with a particular image or \"[sprite](https://en.wikipedia.org/wiki/Sprite_%28computer_graphics%29)\", or a texture might be applied to the background of the game window.\n\nOne major benefit of using this design pattern in a game is that each part of the game loop can be implemented separately in the code. If you want to change the appearance of your game without making major changes to how the game works, you can just update the Rendering code. Similarly, you are free to modify how the gameplay works without changing the rendering or input portion of the code at all.",
              "instructor_notes": ""
            },
            {
              "id": 899050,
              "key": "8b24c722-f483-4e8d-9952-32640de76a86",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Game Loop Example: Snake Game",
              "instructor_notes": ""
            },
            {
              "id": 899383,
              "key": "6989402c-dd3d-4f61-a64c-c2e74fe2efc0",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/July/5d254dc4_snake-game/snake-game.gif",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/6989402c-dd3d-4f61-a64c-c2e74fe2efc0",
              "caption": "",
              "alt": "",
              "width": 639,
              "height": 665,
              "instructor_notes": null
            },
            {
              "id": 899382,
              "key": "f197ee89-2d6c-44ab-a5db-d31ffb393df8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The project code that we provide is an implementation of the classic \"Snake\" game, which is shown above. This implementation was inspired by code found in [this](https://codereview.stackexchange.com/questions/212296/snake-game-in-c-with-sdl) StackOverflow post. \n\nIn this game, you control a snake using the keyboard, and the snake grows in speed and length each time it eats the food on the screen. Internally, the game state includes:\n- the speed of the snake\n- the current direction the snake is travelling\n- the `float` position of the snake's head\n- a `vector` of int coordinates representing the snake's body\n- the position of the food\n- other state data needed to make the game function\n\nAt each pass through the game loop, the steps \n1. **Input:** the keyboard input is handled and used to set the future direction of the snake.\n2. **Update:** The snake's position, length, and velocity are updated. If the snake has just eaten the food, a new food item is created.\n3. **Render:** The game state is drawn to the screen. The entire game loop happens approximately 60 times per second, so the rendering and motion look fairly smooth, even though every update is a discrete change to the game state.\n\nNote that the positions of the snake head and snake body are not stored in a 2D array in the current implementation, even though would also be a reasonable way to store some of the game state. However, the game is still rendered according to a 2D grid, and not using continuous coordinates. This happens even though the head coordinates are stored and updated with floats. By storing the head coordinates with floats, we can update the head position according to a fixed velocity. By rendering according to a grid, the vintage, grid-based aesthetic of the game can be maintained. \n\nTo make sure that you understand the game loop in the context of the Snake game, give the next few quizzes a try.\n\n## Snake Game Quizzes",
              "instructor_notes": ""
            },
            {
              "id": 899057,
              "key": "422df4f5-d74a-419f-b915-aec2602dbff4",
              "title": "The Render Loop",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "422df4f5-d74a-419f-b915-aec2602dbff4",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following likely falls into the \"Render\" step in the Snake game?",
                "answers": [
                  {
                    "id": "a1562628563664",
                    "text": "Changing the x and y position attributes of the snake object's head",
                    "is_correct": false
                  },
                  {
                    "id": "a1562630613791",
                    "text": "Drawing the snake's body on the screen",
                    "is_correct": true
                  },
                  {
                    "id": "a1562630672438",
                    "text": "Accepting \"up\" and \"down\" commands from the keyboard",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 899078,
              "key": "34e78269-3a78-413f-93d0-1b66bc4ef076",
              "title": "The Update Loop",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "34e78269-3a78-413f-93d0-1b66bc4ef076",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following might be updated in \"Update\" step of the Snake game loop?",
                "answers": [
                  {
                    "id": "a1562632114990",
                    "text": "The x and y position attributes of the snake object's head",
                    "is_correct": true
                  },
                  {
                    "id": "a1562632696062",
                    "text": "The user's score in the game",
                    "is_correct": true
                  },
                  {
                    "id": "a1562632698216",
                    "text": "The location of the food for the snake",
                    "is_correct": true
                  },
                  {
                    "id": "a1562632699617",
                    "text": "The speed of the snake",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 899055,
              "key": "3db6e46d-602e-4b21-b619-25d68852d37c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Improving the Game Loop: Time Control\n\nNow that you have an idea of the basic structure of the game loop, there's one additional step that you will see in the final project code: time control. If we let the while loop run as fast as the computer processor will allow, the game may be unplayable on a very fast machine, and it will play at different speeds depending on where it is run.",
              "instructor_notes": ""
            },
            {
              "id": 899053,
              "key": "f56de6db-f324-4ade-a443-9f6e15c1732e",
              "title": "ImprovedGameLoop",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "nhYzyAdHkCA",
                "china_cdn_id": "nhYzyAdHkCA.mp4"
              }
            },
            {
              "id": 899080,
              "key": "c0bd56af-c57d-4eeb-bca8-901403ce064b",
              "title": "Game Loop Pseudocode",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c0bd56af-c57d-4eeb-bca8-901403ce064b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the pseudocode examples down below represents a correctly implemented game loop with time control?",
                "answers": [
                  {
                    "id": "a1562633470038",
                    "text": "A)",
                    "is_correct": false
                  },
                  {
                    "id": "a1562633602562",
                    "text": "B)",
                    "is_correct": true
                  },
                  {
                    "id": "a1562633605868",
                    "text": "C)",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 899081,
              "key": "bf1f6608-303d-4246-9d39-ef9ecd271372",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "A)\n```cpp\nUint32 frame_end;\nUint23 frame_duration = 0;\nfloat target_frame_duration = 1000/60; // milliseconds per frame at 60 frames per second.\n\nwhile (true) {\n    Input();\n    Update();\n    Render();\n    frame_end = get_current_time_in_ms(); // Current time in milliseconds\n\n    frame_duration += frame_end;\n\n    if (frame_duration < target_frame_duration ) {\n        Sleep(target_frame_duration - frame_ms);\n        frame_ms = 0;\n    }\n}\n```\n\nB)\n```cpp\nUint32 frame_start;\nUint32 frame_end;\nUint32 frame_duration;\nfloat target_frame_duration = 1000/60; // milliseconds per frame at 60 frames per second.\n\nwhile (true) {\n    frame_start = GetCurrentTimeMS(); // Current time in milliseconds\n    Input();\n    Update();\n    Render();\n    frame_end = get_current_time_in_ms();\n\n    frame_duration = frame_end - frame_start;\n\n    if (frame_duration < target_frame_duration ) {\n        Sleep(target_frame_duration - frame_duration);\n    }\n}\n```\n\nC)\n```cpp\nUint32 frame_end = GetCurrentTimeMS();\nfloat target_frame_duration = 1000/60; // milliseconds per frame at 60 frames per second.\n\nwhile (true) {\n    Input();\n    Update();\n    Render();\n    after = get_current_time_in_ms() - frame_end;\n\n    if (frame_end < target_frame_duration ) {\n        Sleep(target_frame_duration - frame_end);\n    }\n}\n```",
              "instructor_notes": ""
            },
            {
              "id": 899101,
              "key": "fcd290c3-99d6-49b5-a9c2-5ff6ccdff094",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Summary\n\nExcellent work on completing this concept! You know have a solid understanding of one of the core concepts of game programming: the game loop. With the addition of a library to handle input and render output from your code, you are now fully prepared to write your own games in C++.\n\nIn the next concept, we will introduce the SDL2 library that you can use to handle input and render, so you will be ready to begin your Capstone project.",
              "instructor_notes": ""
            },
            {
              "id": 899079,
              "key": "4a2379ba-c234-4a0a-88e4-aba98eb6ccf1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Resources\n\n- The [Game Programming Patterns Book](https://gameprogrammingpatterns.com/) is an _excellent_ resource for understanding how games work. In particular, [here](https://gameprogrammingpatterns.com/game-loop.html) is a section of the book which discusses the game loop.\n- [Here](http://www.informit.com/articles/article.aspx?p=2928180&seqNum=4) is another useful article on the game loop. This one uses the SDL library, which is the same library used in the Snake game repository.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 898261,
          "key": "a7e4cbe5-4bbe-42bb-9abd-94d52705a3a1",
          "title": "The SDL Library",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a7e4cbe5-4bbe-42bb-9abd-94d52705a3a1",
            "completed_at": "2020-05-13T09:07:22.336Z",
            "last_viewed_at": "2020-05-13T09:07:21.590Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899105,
              "key": "75ea2a83-7161-4c07-a03f-174581667872",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# The SDL Library",
              "instructor_notes": ""
            },
            {
              "id": 899106,
              "key": "40241812-e79c-4855-9d70-969ab638fa14",
              "title": "SDL",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "OPw05yeS66Q",
                "china_cdn_id": "OPw05yeS66Q.mp4"
              }
            },
            {
              "id": 899539,
              "key": "1feb8993-8ded-4e19-9b8a-1484b00e2bce",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The [SDL library](https://www.libsdl.org/) is widely used for Game development as a tool to abstract the hardware so you don't need to worry about working with the hardware directly. SDL manages video, audio, input devices, and other components, and provides you with a simple library interface. \n\nSDL is not a game engine, so doesn't have the full development environment that you might find in Unity or Unreal, but SDL can be used to develop fully-featured games for Android, iOS, Linux, macOS, and Windows. It been used to build thousands of games, including the popular Angry Birds and games from [Valve](https://www.valvesoftware.com/en/) and [HumbleBundle](https://www.humblebundle.com/). \n\nIf you are choosing to build the game for your Capstone project, then you can install and use the latest SDL v2.0, also referred to as SDL2.",
              "instructor_notes": ""
            },
            {
              "id": 900063,
              "key": "1d6e1be8-1eb7-4b76-97b3-65a3fe2c109e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Installation\n\nTo install SDL 2.0 on your own machine, you can find instructions for each operating system [here](https://wiki.libsdl.org/Installation). Additionally, there are detailed instructions in the LazyFoo SDL tutorial page [here](https://lazyfoo.net/tutorials/SDL/01_hello_SDL/index.php).\n\nNote that for Debian-based Linux users, we recommend using `apt` or `apt-get` to install:\n```\nsudo apt-get install libsdl2-dev\n```",
              "instructor_notes": ""
            },
            {
              "id": 900221,
              "key": "7237bf9a-6482-4356-877c-3a8b470ff3bb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Workspace\n\nIf you prefer not to install SDL on you own machine, we have provided a workspace at the end of this lesson with SDL installed. Additionally, The [Snake game repository](https://github.com/udacity/CppND-Capstone-Snake-Game) provides an example of how how to set up a CMakeLists.txt file to build an SDL project using CMake.",
              "instructor_notes": ""
            },
            {
              "id": 899646,
              "key": "cb5e4878-0be8-404f-9629-6986111e4a8e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Resources\n\n- The SDL Library webpage can be found [here](https://www.libsdl.org/).\n- The [LazyFoo SDL2 tutorial](https://lazyfoo.net/tutorials/SDL/) is an in-depth game programming tutorial using SDL2. There's a lot of content here, but the tutorial will walk you through everything from creating a simple window with SDL2 to using particle engines and tiling the screen with textures.\n- The [Parallel Realities tutorials](https://www.parallelrealities.co.uk/tutorials/) are a collection of tutorials for creating 2D shooter games (like Asteroids) and 2D platformers (like the original Super Mario Brothers) using SDL2. These are much shorter tutorials that are useful for getting your game up and running.\n- The [TwinklebearDev](https://www.willusher.io/pages/sdl2/) SDL2 tutorials include a few simple tutorials for getting SDL2 running and displaying images to the screen.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 898262,
          "key": "18703900-1395-472c-bb93-04542a481d72",
          "title": "Snake Game Code Walkthrough",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "18703900-1395-472c-bb93-04542a481d72",
            "completed_at": "2020-05-13T09:07:26.035Z",
            "last_viewed_at": "2020-05-13T09:07:25.788Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899107,
              "key": "b6e53abd-92d4-4871-a284-8a6a4f84a577",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Snake Game Code Walkthrough",
              "instructor_notes": ""
            },
            {
              "id": 900216,
              "key": "2fb41d47-1bca-4df8-afe6-e6b8f158c074",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/July/5d2a914b_images/images.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/2fb41d47-1bca-4df8-afe6-e6b8f158c074",
              "caption": "",
              "alt": "",
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 900186,
              "key": "85569403-955b-4108-8154-d3e7e20829e8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The Snake game code consists of four main classes: `Game`, `Snake`, `Controller`, and `Renderer`. The image above shows how the code functions:\n1. To begin, `main` creates a `Controller`, a `Game`, and a `Renderer` object. `Game` stores a `Snake` object as part of the state.\n2. `main` calls `Game::Run` to start the game loop.\n\nThe next videos walk through each of the files in the Snake game repository in more detail.",
              "instructor_notes": ""
            },
            {
              "id": 899109,
              "key": "837563ad-1e20-4d3c-a2b4-b10db4830c66",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## `main.cpp`\nThis is the entrypoint for the program. The `main` function in this file sets variables such as the window height and width and the number of frames per second at which the game will be played. The `main` also creates `Renderer`, `Controller`, and `Game` objects, and calls the `Game::Run` method to start the game loop.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 900187,
              "key": "9df59ff1-ec1e-4fda-a76c-af3228f097b3",
              "title": "Main",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "8BkjScSOJR8",
                "china_cdn_id": "8BkjScSOJR8.mp4"
              }
            },
            {
              "id": 900188,
              "key": "ad52eb11-6431-4397-8556-b53c9d615745",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## `snake.h` and `snake.cpp`\nThese files define the `Snake` class which contains attributes to keep track of the `Snake` speed, size, and location. Additionally, there are methods to update the snake state, which are called from the `Game::Update` method. The `Snake` head and body are treated separately; the head is stored using float coordinates, and the body is stored using a vector of int cell coordinates. The `Snake::UpdateHead` method updates the head location using the snake's speed. If the head has passed into a new cell, then the body is updated with the `Snake::UpdateBody`.",
              "instructor_notes": ""
            },
            {
              "id": 900191,
              "key": "b42a3fc1-fdc3-4550-8099-aaf326443783",
              "title": "Snake H And Cpp",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "21kpACl2F_M",
                "china_cdn_id": "21kpACl2F_M.mp4"
              }
            },
            {
              "id": 899110,
              "key": "791cda11-ccce-482c-a83f-f95d5a4c15d9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## `game.h` and `game.cpp` \nThese files define the `Game` class and the game loop: `Game::Run`. The `Game` class stores the state of the game, including an instance of a `Snake` object, the game score, and the location of \"food\" in the game. Aside from the game loop, the `Game` class also contains methods to update the state of the game (Game::Update), get the size of the snake, get the total score in the game, and place new food in the game if the food has been eaten by the snake. ",
              "instructor_notes": ""
            },
            {
              "id": 900192,
              "key": "ff7d74a6-3895-4ec0-8c04-7d9f01ef4155",
              "title": "Game H And Game Cpp",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ixgsdCjcqn8",
                "china_cdn_id": "ixgsdCjcqn8.mp4"
              }
            },
            {
              "id": 900189,
              "key": "1a437d06-1c4d-47f1-bbb2-e38297fc88e6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## `render.h` and `render.cpp`\nThese files define the `Renderer` class which uses the SDL library to render the game to the screen. The `Renderer` class constructor creates the SDL window and an SDL renderer object that can draw in the window. The `Renderer::Render` method draws the food and the snake in the window using the SDL renderer.",
              "instructor_notes": ""
            },
            {
              "id": 900193,
              "key": "16da5893-2940-498e-8576-ea9d6221211d",
              "title": "Render H And Cpp",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "27N1MkVCwXw",
                "china_cdn_id": "27N1MkVCwXw.mp4"
              }
            },
            {
              "id": 900190,
              "key": "914644bf-307d-4b80-81dd-653e8060f363",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "- ### `controller.h` and `controller.cpp`\nThese files define the `Controller` class. This class handles keyboard input using the SDL libary, and it sets the snake's direction based on the input.",
              "instructor_notes": ""
            },
            {
              "id": 900194,
              "key": "e3d7d555-ff3f-4e69-baee-08aa36af0e2e",
              "title": "Controller H And Cpp Take 2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "LtTAwBU654Q",
                "china_cdn_id": "LtTAwBU654Q.mp4"
              }
            },
            {
              "id": 900201,
              "key": "6b92bc00-af7d-4d61-b28d-b56a8ec7e3c6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Resources\n\n- [The SDL API](https://wiki.libsdl.org/APIByCategory), organized by category.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 898263,
          "key": "2e32e79a-d0b0-4980-bc59-f7738f598eff",
          "title": "Capstone Workspace",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2e32e79a-d0b0-4980-bc59-f7738f598eff",
            "completed_at": "2020-05-13T09:07:40.004Z",
            "last_viewed_at": "2020-05-13T09:13:05.124Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 900062,
              "key": "ee227f11-a2bc-4296-800e-ecd960f8a54a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Capstone Workspace\n\nThis workspace can be used to develop the Capstone project. It is currently empty, but you can clone the [Snake game repo](https://github.com/udacity/CppND-Capstone-Snake-Game) or [Hello World repo](https://github.com/udacity/CppND-Capstone-Hello-World) to the workspace.\n\n## Checking the Rubric\n\nIf your project works correctly and passes the tests above, carefully look at the [project rubric](https://review.udacity.com/#!/rubrics/2533/view). If you feel like all the criteria from the rubric are met, you are ready to submit!\n\n## Submitting the Project\n\nThis project can only be submitted through this workspace. This is done to ensure that you are able to test your code in an environment similar to what reviewers will use. \nYou can submit your project using the \"SUBMIT PROJECT\" button in the terminal below. \n\nIf you have developed your project locally, you can upload the project directory to the workspace for submission. Similarly, if you have your code in Github, you can clone your project into the workspace for submission.",
              "instructor_notes": ""
            },
            {
              "id": 900061,
              "key": "6b492a9a-dea8-42b6-8410-4757d9484346",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r845225c898263xREACT29rjki75",
              "pool_id": "autonomouscpu",
              "view_id": "react-xy7kn",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "export CXX=g++-7\nexport CXXFLAGS=-std=c++17",
                    "openFiles": [],
                    "showFiles": true,
                    "allowClose": true,
                    "allowSubmit": true,
                    "terminalTitle": "BASH",
                    "actionButtonText": "Desktop",
                    "openTerminalOnStartup": true
                  },
                  "kind": "react"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    }
  ]
}