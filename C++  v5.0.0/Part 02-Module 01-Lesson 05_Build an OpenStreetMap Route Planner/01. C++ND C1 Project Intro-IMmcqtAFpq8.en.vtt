WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.205
Welcome to the final project.

00:00:02.205 --> 00:00:05.459
In this project, you will use everything that you've learned up to now,

00:00:05.459 --> 00:00:07.560
including writing code in multiple files,

00:00:07.559 --> 00:00:11.355
pointers, references, and a little bit of OOP.

00:00:11.355 --> 00:00:15.750
You will build a route planner that plots a path between two points on a map.

00:00:15.750 --> 00:00:20.085
This may sound similar to the project you completed in the first lessons of this course.

00:00:20.085 --> 00:00:24.810
This time however, instead of using a simple grid to represent the map,

00:00:24.809 --> 00:00:26.969
you'll be working with real map data from

00:00:26.969 --> 00:00:30.509
the OpenStreetMap project to generate a path on a real map.

00:00:30.510 --> 00:00:33.539
This is similar to other mapping applications you have used,

00:00:33.539 --> 00:00:35.704
like Google Maps or Apple Maps.

00:00:35.704 --> 00:00:37.670
To render the map data,

00:00:37.670 --> 00:00:42.500
the project code we'll be using a 2D rendering library called IO2D.

00:00:42.500 --> 00:00:46.219
Much of the code for passing OpenStreetMap data and rendering

00:00:46.219 --> 00:00:50.359
the results comes from the library example and the IO2D code repository.

00:00:50.359 --> 00:00:52.314
To get you started on the project,

00:00:52.314 --> 00:00:55.744
we'll provide you with a slightly modified version of this example code

00:00:55.744 --> 00:00:59.809
that has all of the classes and methods stubs that you'll need to complete the project.

00:00:59.810 --> 00:01:02.270
Your task will be to fill in the methods that are

00:01:02.270 --> 00:01:04.760
required to make the code perform route planning.

00:01:04.760 --> 00:01:08.960
The route planner will use the A* algorithm just as you've seen before.

00:01:08.959 --> 00:01:13.219
So the code structure should seem familiar to you from the first lessons of this course.

00:01:13.219 --> 00:01:18.125
However, because of the complexity of the OpenStreetMap data and the IO2D library,

00:01:18.125 --> 00:01:21.140
the project code will have object-oriented structure.

00:01:21.140 --> 00:01:22.504
In the rest of this lesson,

00:01:22.504 --> 00:01:25.159
we'll carefully review the structure of the project code that we

00:01:25.159 --> 00:01:28.909
provide and we'll clarify what is required to complete the project.

00:01:28.909 --> 00:01:33.909
In particular, we'll have an overview of the OpenStreetMap project,

00:01:33.909 --> 00:01:35.689
including the data format of

00:01:35.689 --> 00:01:39.679
the OpenStreetMap data and the element types that you'll see on that data.

00:01:39.680 --> 00:01:43.955
Then you'll see instructions for building and running the project,

00:01:43.954 --> 00:01:45.939
and testing your code.

00:01:45.939 --> 00:01:51.599
Next, you'll see a project code overview that will include a class diagram,

00:01:51.599 --> 00:01:55.354
so you can have an understanding of the high-level structure of the code.

00:01:55.355 --> 00:01:59.945
Then you look at the project starter repository structure,

00:01:59.944 --> 00:02:03.859
including all of the files and folders in that project repository.

00:02:03.859 --> 00:02:07.625
We'll look at the source directory in that repository in particular.

00:02:07.625 --> 00:02:09.770
We'll have some code workthroughs so that you

00:02:09.770 --> 00:02:12.100
understand all of the code that you're starting with.

00:02:12.099 --> 00:02:16.324
Next, there'll be some steps that you'll need to follow to complete the project.

00:02:16.324 --> 00:02:18.334
Then the last part of this lesson,

00:02:18.335 --> 00:02:21.890
there'll be project submission instructions and workspace.

00:02:21.889 --> 00:02:26.939
This is an extremely exciting project and we can't wait to see your submissions.

