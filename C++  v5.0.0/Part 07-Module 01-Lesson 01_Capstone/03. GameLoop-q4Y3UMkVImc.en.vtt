WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.555
If you decide to build a game for your capstone project,

00:00:03.555 --> 00:00:06.750
having a conceptual understanding of how video games work will be

00:00:06.750 --> 00:00:10.140
important both for your understanding of the code base that we provide,

00:00:10.140 --> 00:00:13.185
and for your ability to build a new game from scratch.

00:00:13.185 --> 00:00:17.399
One of the fundamental programming patterns seen in game development and

00:00:17.399 --> 00:00:22.049
the pattern that forms the core of game functionality is the game loop.

00:00:22.050 --> 00:00:27.410
Nearly all games have a loop that allows the program to do three things.

00:00:27.410 --> 00:00:30.920
The first part of the game loop handles user inputs,

00:00:30.920 --> 00:00:33.605
such as from a keyboard or controller.

00:00:33.604 --> 00:00:37.474
Second part of the game loop updates the game state.

00:00:37.475 --> 00:00:39.814
You can imagine in a 2D game.

00:00:39.814 --> 00:00:42.379
The game state may contain a 2D vector or

00:00:42.380 --> 00:00:45.155
array that keeps track of the location of a player.

00:00:45.155 --> 00:00:47.990
In the image here, you can see a 2D array with

00:00:47.990 --> 00:00:52.400
a single one indicating the location of the player in the game world.

00:00:52.399 --> 00:00:56.539
In the update step, the stored location of the player might change,

00:00:56.539 --> 00:00:59.640
and in that case, the array would be updated.

00:00:59.829 --> 00:01:04.189
The last part of game loop renders the game state to the screen.

00:01:04.189 --> 00:01:07.509
In the image here, you see the 2D array that indicates

00:01:07.510 --> 00:01:12.040
the location of our player rendered as a character in the game window.

00:01:12.040 --> 00:01:15.130
The game loop is usually implemented as

00:01:15.129 --> 00:01:19.030
a while loop that runs continuously while the game is running.

00:01:19.030 --> 00:01:22.435
For example, one pass through the while loop

00:01:22.435 --> 00:01:26.469
might involve the player pressing the right arrow on the controller.

00:01:26.469 --> 00:01:32.120
This input is then used to update the state of the game in the update step.

00:01:32.870 --> 00:01:36.795
In this case, we've moved the number 1 to the right,

00:01:36.795 --> 00:01:39.200
one index in the array.

00:01:39.200 --> 00:01:41.740
Finally, in the render step,

00:01:41.739 --> 00:01:43.509
the new status rendered,

00:01:43.510 --> 00:01:47.120
and our character is moved one step to the right.

00:01:47.430 --> 00:01:51.500
The game loop can then start again from the beginning.

00:01:51.569 --> 00:01:54.219
In another iteration through the loop,

00:01:54.219 --> 00:01:55.750
there might be no input.

00:01:55.750 --> 00:01:57.894
Depending on how the game is implemented,

00:01:57.894 --> 00:02:00.935
the update step might still change the game state,

00:02:00.935 --> 00:02:03.579
and the rendering of the game will happen every pass through

00:02:03.579 --> 00:02:07.284
the while loop regardless of the input or update steps.

00:02:07.284 --> 00:02:10.900
One major benefit of using this design pattern in a game,

00:02:10.900 --> 00:02:14.830
is that each part of the game loop can be implemented separately in code.

00:02:14.830 --> 00:02:16.930
If you want to change the appearance of

00:02:16.930 --> 00:02:20.379
your game without making major changes to how the game works,

00:02:20.379 --> 00:02:22.674
you can just update the rendering code.

00:02:22.675 --> 00:02:26.005
Similarly, you are free to modify the game play

00:02:26.004 --> 00:02:30.710
without changing the rendering or import input portion of the code at all.

