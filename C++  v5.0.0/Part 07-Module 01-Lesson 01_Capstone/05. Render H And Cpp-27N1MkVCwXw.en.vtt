WEBVTT
Kind: captions
Language: en

00:00:00.710 --> 00:00:05.745
Now, let's have a look at renderer.h and renderer.cpp.

00:00:05.745 --> 00:00:07.710
At the top of renderer.h,

00:00:07.710 --> 00:00:09.884
we include the SDL library,

00:00:09.884 --> 00:00:14.279
we also include the snake header since we'll be using the snake object in this class.

00:00:14.279 --> 00:00:18.329
We have methods render and update window title.

00:00:18.329 --> 00:00:23.654
Render will be used to render the snake object and the food to the screen,

00:00:23.655 --> 00:00:27.000
and update window title updates the bar at the top of

00:00:27.000 --> 00:00:30.839
the game window with the score and the frames per second.

00:00:30.839 --> 00:00:33.240
Frames per second is useful if your game is running

00:00:33.240 --> 00:00:36.135
slow and you're trying to debug later on.

00:00:36.134 --> 00:00:40.664
We have private attributes where we keep a pointer to an SDL window object,

00:00:40.664 --> 00:00:42.740
and a pointer to an SDL render object,

00:00:42.740 --> 00:00:44.205
which we'll discuss later.

00:00:44.204 --> 00:00:46.604
We also have some constants, screen width,

00:00:46.604 --> 00:00:47.699
screen height, grid width,

00:00:47.700 --> 00:00:49.780
and grid height that we store.

00:00:51.740 --> 00:00:56.789
Over in render.cpp, we have the render constructor.

00:00:56.789 --> 00:00:59.219
In order to construct an SDL window,

00:00:59.219 --> 00:01:00.704
there are several steps.

00:01:00.704 --> 00:01:03.509
First, we need to initialize SDL,

00:01:03.509 --> 00:01:08.135
and we do this by calling SDL Init with the SDL Init video flag.

00:01:08.135 --> 00:01:11.495
Let's have a look at the documentation to see what's going on here.

00:01:11.495 --> 00:01:15.935
So the documentation tells us that this function is used to initialize the SDL library,

00:01:15.935 --> 00:01:20.189
and this must be called before using most other SDL functions.

00:01:20.239 --> 00:01:23.780
In our case, we have initialized

00:01:23.780 --> 00:01:26.885
this with the SDL Init video since we're only using video.

00:01:26.885 --> 00:01:31.740
However, we could also have initialized with the SDL Init audio flag or

00:01:31.739 --> 00:01:37.679
SDL Init joystick or SDL Init a game controller or any of the other flag shown here.

00:01:38.769 --> 00:01:41.689
After SDL is initialized,

00:01:41.689 --> 00:01:43.924
we want to create the window.

00:01:43.924 --> 00:01:46.670
So we do this by calling SDL create window

00:01:46.670 --> 00:01:50.329
which returns a pointer that we store in SDL window.

00:01:50.329 --> 00:01:55.384
Let's go look at the documentation for SDL create window to see what's going on there.

00:01:55.385 --> 00:02:02.195
So we see that SDL window is created with an x and y position and a width and a height.

00:02:02.194 --> 00:02:05.104
We also see that for x and y,

00:02:05.105 --> 00:02:09.230
we can pass in the flag SDL window position centered, which is what we do.

00:02:09.229 --> 00:02:13.259
This creates a window that is centered in the screen.

00:02:14.379 --> 00:02:19.435
So here, we pass in for SDL window position centered,

00:02:19.435 --> 00:02:22.015
and SDL window position centered for y,

00:02:22.014 --> 00:02:24.509
we pass in the screen width and screen height,

00:02:24.509 --> 00:02:30.209
and also the SDL window shown to make sure that the window is visible.

00:02:30.819 --> 00:02:35.584
The last step in the constructor is to create a renderer.

00:02:35.585 --> 00:02:38.314
We do this by calling SDL create renderer,

00:02:38.314 --> 00:02:39.395
which returns the pointer,

00:02:39.395 --> 00:02:41.405
and we store that in SDL renderer.

00:02:41.405 --> 00:02:44.539
Let's go look at the documentation for that too.

00:02:44.539 --> 00:02:50.620
So SDL create renderer is used to create a 2D rendering context for a window,

00:02:50.620 --> 00:02:53.825
and this allows us to pass in some parameters that will be

00:02:53.824 --> 00:02:58.349
useful for defining how the renderer works.

00:02:58.759 --> 00:03:03.679
In particular, we pass in an index which says the index of the rendering driver used to

00:03:03.680 --> 00:03:08.240
initialize or negative one to initialize the first one supporting the requested flags.

00:03:08.240 --> 00:03:11.064
In our case, we pass in the negative one.

00:03:11.064 --> 00:03:15.569
We also pass in this flag SDL renderer accelerated,

00:03:15.569 --> 00:03:19.978
and if we look down at the definition that flag in the documentation,

00:03:19.979 --> 00:03:22.605
we see SDL renderer accelerated,

00:03:22.604 --> 00:03:27.509
which says that the renderer uses hardware acceleration if it's available.

00:03:28.960 --> 00:03:32.980
Once we've done that, we've created a window that we can render

00:03:32.979 --> 00:03:36.909
to and a rendering object that we can call to render to that window.

00:03:36.909 --> 00:03:45.604
Next, we have the destructor for this class which destroys the SDL window and quits SDL,

00:03:45.604 --> 00:03:49.289
and then last, we have the render method.

00:03:49.479 --> 00:03:54.625
So in render, we pass in a snake and some food,

00:03:54.625 --> 00:03:56.719
and we want to render those to the screen.

00:03:56.719 --> 00:04:01.895
We start by defining an SDL rectangle called block.

00:04:01.895 --> 00:04:05.259
If we look at the documentation for SDL rectangle,

00:04:05.258 --> 00:04:10.114
we see that SDL rectangles are objects that have an x and a y position.

00:04:10.115 --> 00:04:12.695
The x location of the rectangle is up the left corner,

00:04:12.694 --> 00:04:15.875
and the y location of the rectangle is up the left corner,

00:04:15.875 --> 00:04:18.720
and a width and a height.

00:04:19.490 --> 00:04:24.139
In our case, we're going to set the width and

00:04:24.139 --> 00:04:27.919
the height of this block to be the screen width divided by the grid width.

00:04:27.920 --> 00:04:30.694
So we've divided the screen width up into a grid,

00:04:30.694 --> 00:04:36.844
and basically, the width is the width of one cell in the grid.

00:04:36.845 --> 00:04:42.950
So we've divided the screen width by the number of cells in the width of the grid.

00:04:42.949 --> 00:04:47.104
We've divided the screen height by the number of cells in the height of the grid.

00:04:47.105 --> 00:04:51.004
The next step is to clear the screen.

00:04:51.004 --> 00:04:54.800
So we call SDL set render draw color.

00:04:54.800 --> 00:04:57.020
We pass in our renderer object,

00:04:57.019 --> 00:04:59.240
and we define a color here,

00:04:59.240 --> 00:05:03.245
which will be basically black on the screen.

00:05:03.245 --> 00:05:06.865
We can quickly look at the documentation for that as well.

00:05:06.865 --> 00:05:09.750
SDL set renderer draw color is

00:05:09.750 --> 00:05:14.000
a function that we use to set the color for drawing operations.

00:05:14.000 --> 00:05:19.089
The arguments for this are RGB for the red, green,

00:05:19.089 --> 00:05:22.219
and blue values, and then A for the Alpha,

00:05:22.220 --> 00:05:24.720
which is basically opacity.

00:05:27.449 --> 00:05:30.925
So in our case, we've set the renderer draw color,

00:05:30.925 --> 00:05:34.835
then we call SDL render clear with our renderer,

00:05:34.834 --> 00:05:42.699
and what render clear does is to basically draw that color over the entire screen.

00:05:42.699 --> 00:05:46.579
So SDL render clear,

00:05:46.579 --> 00:05:48.699
we use this function to clear

00:05:48.699 --> 00:05:53.050
the current rendering target with the drawing color that we specified previously.

00:05:53.050 --> 00:05:55.824
So once the screen is clear,

00:05:55.824 --> 00:05:57.384
we can render the food.

00:05:57.384 --> 00:05:58.899
So we set the color again,

00:05:58.899 --> 00:06:01.914
and this is set to a yellow color in this case,

00:06:01.915 --> 00:06:06.129
and we use the block object that's defined above,

00:06:06.129 --> 00:06:10.310
and we are going to set the block x and the block y.

00:06:10.310 --> 00:06:14.720
Now, food is passed in with x and y here

00:06:14.720 --> 00:06:18.920
representing the cell in the grid, and so basically,

00:06:18.920 --> 00:06:21.430
to set the block exposition,

00:06:21.430 --> 00:06:25.069
we take the cell number and we multiply it by the block width,

00:06:25.069 --> 00:06:28.280
and we take the y cell number and we multiply by the black height,

00:06:28.279 --> 00:06:30.859
and we got block x and y.

00:06:30.860 --> 00:06:37.290
Finally, we call SDL render fill rectangle with our renderer and that block,

00:06:37.290 --> 00:06:42.090
and then we'll fill that block in with a specified color.

00:06:42.189 --> 00:06:44.990
We won't look at the documentation for this,

00:06:44.990 --> 00:06:49.660
but you're welcome to go look at the documentation on the SDL the week in.

00:06:49.660 --> 00:06:52.700
Next, we do something similar for the snake,

00:06:52.699 --> 00:06:55.625
so we set the draw color here.

00:06:55.625 --> 00:06:59.795
So for the snake's body we're setting the color to white,

00:06:59.795 --> 00:07:03.765
and for each point in snake.body,

00:07:03.764 --> 00:07:07.740
here snake.body is a vector of SD points.

00:07:07.740 --> 00:07:13.850
SDL points or an SDL point is basically a struct with an x and a y coordinate.

00:07:13.850 --> 00:07:17.129
So we have the snake body here,

00:07:17.129 --> 00:07:18.689
it's a vector of SDL points.

00:07:18.689 --> 00:07:20.579
For each point in the body,

00:07:20.579 --> 00:07:25.544
we set the block x and block y just as we did above,

00:07:25.545 --> 00:07:33.740
and then we fill that block with this color and render it to the screen.

00:07:33.740 --> 00:07:37.310
Again, we do the same for the snake's head.

00:07:37.310 --> 00:07:40.129
In this case, we'll discuss this later,

00:07:40.129 --> 00:07:44.420
but the snake's head have float x and y coordinates,

00:07:44.420 --> 00:07:46.384
and so we cast them to integers.

00:07:46.384 --> 00:07:53.045
So now we have the x and y cell for the snake's head,

00:07:53.045 --> 00:07:56.660
and we do basically the same processes as above.

00:07:56.660 --> 00:07:58.710
We render the snake's head,

00:07:58.709 --> 00:08:00.449
if the snake is alive,

00:08:00.449 --> 00:08:02.449
we're rendering the head one color.

00:08:02.449 --> 00:08:04.250
If the snake is dead,

00:08:04.250 --> 00:08:06.514
basically the game has stopped,

00:08:06.514 --> 00:08:09.110
we're rendering the snake had a different color.

00:08:09.110 --> 00:08:15.780
We call SDL render fill rectangle with our render objects and that block,

00:08:15.779 --> 00:08:19.750
and then we update the screen.

00:08:21.259 --> 00:08:26.089
Down here, we have the update window title defined.

00:08:26.089 --> 00:08:28.609
So we create a string called title,

00:08:28.610 --> 00:08:31.685
and title is snake score.

00:08:31.685 --> 00:08:35.509
We put the score in here, frames per second.

00:08:35.509 --> 00:08:38.450
We convert the frames per second to screen,

00:08:38.450 --> 00:08:46.310
and then we set the window title using our SDL window object and the title string.

