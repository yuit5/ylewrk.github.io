WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.730
This access specifier mandates how users of

00:00:05.730 --> 00:00:11.804
class Human can access data and methods from class Animal,

00:00:11.804 --> 00:00:15.029
because class Human inherits from public animal,

00:00:15.029 --> 00:00:17.219
then users of class Human can

00:00:17.219 --> 00:00:20.789
call the member of of functions and member data of class Animal,

00:00:20.789 --> 00:00:21.989
which in this case is Talk.

00:00:21.989 --> 00:00:25.289
That's why, calling human.Talk works even

00:00:25.289 --> 00:00:30.390
though the derived class doesn't have its own version of the Talk function.

00:00:30.390 --> 00:00:33.344
So we'll just double check that everything works.

00:00:33.344 --> 00:00:35.519
Yeah, everything looks good.

00:00:35.520 --> 00:00:40.265
Now, let's say we add our own version of Talk here.

00:00:40.265 --> 00:00:44.579
This is a version where we pass in a string and then we output the string.

00:00:44.579 --> 00:00:47.354
So now, if we say human.Talk,

00:00:47.354 --> 00:00:56.159
"Hello World!", we can compile this,

00:00:56.159 --> 00:01:01.549
and run it, and we get the human version of the Talk method.

00:01:01.549 --> 00:01:06.049
What we can do with access modifiers is inherit or

00:01:06.049 --> 00:01:10.489
create a derived class that inherits from its base class,

00:01:10.489 --> 00:01:13.819
but doesn't expose the member functions of the base class.

00:01:13.819 --> 00:01:16.429
So let's inherit from private humans,

00:01:16.430 --> 00:01:17.720
we have this class Baby,

00:01:17.719 --> 00:01:20.030
it inherits from private Human,

00:01:20.030 --> 00:01:22.250
and in class Baby,

00:01:22.250 --> 00:01:23.905
we'll have a function.

00:01:23.905 --> 00:01:29.075
This function will be the Cry function because that's what babies do.

00:01:29.075 --> 00:01:30.829
It won't take an argument,

00:01:30.829 --> 00:01:35.950
and it will call class Talk from the Human class,

00:01:35.950 --> 00:01:38.125
but it will simply cry,

00:01:38.125 --> 00:01:41.090
because that's all babies can do is cry,

00:01:41.090 --> 00:01:42.439
they can't really talk.

00:01:42.439 --> 00:01:47.075
So if we create an object baby of type baby,

00:01:47.075 --> 00:01:50.844
and we'll call baby. Cry, this is what we'll get.

00:01:50.844 --> 00:01:52.260
So far so good.

00:01:52.260 --> 00:01:58.600
Oops, I forgot to add a semi colon after my classes, done.

00:02:00.980 --> 00:02:04.910
The human talks and the baby cries, that makes sense.

00:02:04.909 --> 00:02:08.449
If we try to have the baby talk, let's say,

00:02:08.449 --> 00:02:09.589
we want the baby to say,

00:02:09.590 --> 00:02:13.295
"The square root of nine is three."

00:02:13.294 --> 00:02:16.399
That would be a pretty silly thing for a baby to say.

00:02:16.400 --> 00:02:20.400
When we compile this function, one,

00:02:20.400 --> 00:02:22.129
we get an error about the semi colon,

00:02:22.129 --> 00:02:24.319
but we get a bunch of other errors do.

00:02:24.319 --> 00:02:26.435
When we compile this function,

00:02:26.435 --> 00:02:32.465
we get this error that Talk is inaccessible from within Baby,

00:02:32.465 --> 00:02:36.164
because Baby has inherited from class Human,

00:02:36.163 --> 00:02:38.314
but it's inherited from private human.

00:02:38.314 --> 00:02:43.034
So the user class Baby can't reach up and call talk itself.

00:02:43.034 --> 00:02:45.770
However, Baby itself is able to call Talk,

00:02:45.770 --> 00:02:49.040
because baby inherits from Human,

00:02:49.039 --> 00:02:52.829
it's able to call those member functions of human.

00:02:52.830 --> 00:02:56.060
It's just the user of baby is not able to call those member functions.

00:02:56.060 --> 00:03:00.979
So to little bit of a subtle distinction and how access modifiers work for inheritance,

00:03:00.979 --> 00:03:04.579
but it allows us to create derived classes

00:03:04.580 --> 00:03:09.780
that don't expose the member functions of the base classes to the user.

