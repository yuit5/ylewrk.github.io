WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.469
Now, the first way to make use of concurrency is to divide your program into

00:00:04.469 --> 00:00:09.164
multiple separate single-threaded processes that are run at the same time.

00:00:09.164 --> 00:00:12.209
These separate processes can then pass messages to each

00:00:12.210 --> 00:00:15.479
other through inter-process communication channels such as signals,

00:00:15.478 --> 00:00:18.089
sockets, files, and several others.

00:00:18.089 --> 00:00:22.109
One disadvantage of such a system is that the communication processes can be

00:00:22.109 --> 00:00:24.509
slow and it can be complicated because

00:00:24.510 --> 00:00:27.195
everything has to be managed through the operating system.

00:00:27.195 --> 00:00:31.289
The operating system has to provide a lot of protection as well between processes

00:00:31.289 --> 00:00:35.339
to avoid one process accidentally modifying the data which belongs to another process.

00:00:35.340 --> 00:00:40.165
Also, it takes a lot of time and resources to start a process in the first place.

00:00:40.164 --> 00:00:43.039
The advantage of inter-process communication is that

00:00:43.039 --> 00:00:45.589
the operating system provides a significant amount of

00:00:45.590 --> 00:00:48.410
protection and also high-level communication mechanisms

00:00:48.409 --> 00:00:51.109
that are comparatively easy to use by the user,

00:00:51.109 --> 00:00:52.884
by the program, that means you.

00:00:52.884 --> 00:00:54.469
This makes it easier to write

00:00:54.469 --> 00:00:58.295
safe concurrent programs using processes instead of threads.

00:00:58.295 --> 00:01:00.454
One final advantage of processes,

00:01:00.454 --> 00:01:02.869
separate processes can be easily run on

00:01:02.869 --> 00:01:06.594
a distributed architecture such as in a computer network over the Internet for example.

00:01:06.594 --> 00:01:12.140
The second way to make use of concurrency is to run multiple threads in a single process.

00:01:12.140 --> 00:01:15.155
Threads are often referred to as lightweight processes which run

00:01:15.155 --> 00:01:19.340
independently of each other and each with its own set of instructions.

00:01:19.340 --> 00:01:23.120
Now, the big difference to processes is that threads in a process share

00:01:23.120 --> 00:01:25.910
the same address space and most of the data can be

00:01:25.909 --> 00:01:28.789
accessed directly from all the threads,

00:01:28.790 --> 00:01:30.859
and the shared address space also reduces

00:01:30.859 --> 00:01:33.650
the overhead which is associated with using multiple processes.

00:01:33.650 --> 00:01:37.085
It's much smaller than that from using multiple processes.

00:01:37.084 --> 00:01:41.159
The problem is that this flexibility comes with a price as always.

00:01:41.159 --> 00:01:43.384
If data is accessed by multiple threads,

00:01:43.385 --> 00:01:44.704
you as a programmer,

00:01:44.704 --> 00:01:49.105
you must ensure that the view of data which can be seen by each thread is consistent.

00:01:49.105 --> 00:01:53.909
Let's take a deeper look at the differences between threads and processes.

