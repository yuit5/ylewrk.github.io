WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.504
Okay. So let's take a look at the codes.

00:00:02.504 --> 00:00:06.389
On the left side, you can see the structure of the product code,

00:00:06.389 --> 00:00:07.710
on the right side, you can see

00:00:07.710 --> 00:00:11.835
Visual Studio Code with all the files that make up this project here.

00:00:11.835 --> 00:00:14.190
Let's start with a main function first.

00:00:14.189 --> 00:00:19.019
So the first block is to create and connect intersections and streets.

00:00:19.019 --> 00:00:20.219
As I said before,

00:00:20.219 --> 00:00:22.515
we have several objects which are intersections,

00:00:22.515 --> 00:00:24.359
streets and vehicles and,

00:00:24.359 --> 00:00:29.369
they are all derived from a common class called traffic objects.

00:00:29.370 --> 00:00:31.350
Before we look into traffic objects,

00:00:31.350 --> 00:00:33.390
let's take a look at the main function first.

00:00:33.390 --> 00:00:36.899
So part one, consists of setting up

00:00:36.899 --> 00:00:41.000
the different traffic objects and as you can see here,

00:00:41.000 --> 00:00:44.899
we are not using row pointers in this project here.

00:00:44.899 --> 00:00:50.884
It's not bad style but it's a little bit outdated nowadays since the introduction of

00:00:50.884 --> 00:00:54.484
share pointers with C++ 11 and this is why

00:00:54.484 --> 00:00:58.320
we are defining all the objects as share pointers here.

00:00:58.320 --> 00:00:59.420
So what we are doing,

00:00:59.420 --> 00:01:04.370
we're defining a vector of shared pointers to street objects,

00:01:04.370 --> 00:01:06.439
intersection objects, and vehicle objects,

00:01:06.439 --> 00:01:08.750
and we are also defining a string to

00:01:08.750 --> 00:01:13.640
a background image because the simulation as you have seen in the video until now,

00:01:13.640 --> 00:01:16.579
has a nice city blog image in the background and

00:01:16.579 --> 00:01:19.579
the visualization of the vehicles moving

00:01:19.579 --> 00:01:23.200
along the streets is performed on top of the background image.

00:01:23.200 --> 00:01:25.305
That's happening here.

00:01:25.305 --> 00:01:27.865
Here comes the first task by the way,

00:01:27.864 --> 00:01:30.949
to vary the number of vehicles assimilate,

00:01:30.950 --> 00:01:33.230
but this is going to be task number 1.3,

00:01:33.230 --> 00:01:36.064
so let's wait for this a little bit,

00:01:36.064 --> 00:01:38.569
but currently the number of vehicles

00:01:38.569 --> 00:01:41.579
which is going to be assimilated as going to be four.

00:01:41.579 --> 00:01:46.799
Here, we call a function called Create traffic objects and we pass to its streets,

00:01:46.799 --> 00:01:48.825
intersections, vehicles, the background image,

00:01:48.825 --> 00:01:50.659
and the number of vehicles.

00:01:50.659 --> 00:01:53.854
The basic idea is to connect everything in a way that

00:01:53.855 --> 00:01:58.240
the simulation can run properly with everything connected to each other.

00:01:58.239 --> 00:02:00.344
Please, note that up to this point,

00:02:00.344 --> 00:02:04.084
we do not have any concurrency heads all,

00:02:04.084 --> 00:02:08.239
old-fashioned linear programming one step after the next.

00:02:08.240 --> 00:02:10.985
Concurrency is coming up very soon, but for now,

00:02:10.985 --> 00:02:15.625
it's all linear programming creating traffic options.

00:02:15.625 --> 00:02:18.414
Let's open up this function here, Create traffic objects.

00:02:18.414 --> 00:02:22.254
I'm not going through this in too much detail,

00:02:22.254 --> 00:02:25.299
we have a look at it in a quiet moment so to speak.

00:02:25.300 --> 00:02:26.680
It's a lot of code here,

00:02:26.680 --> 00:02:30.250
but it's basically meant to setup everything to be run properly.

00:02:30.250 --> 00:02:34.930
So what we have here we are simulating a traffic scene in New York City,

00:02:34.930 --> 00:02:38.004
that's why we're loading this traffic image here,

00:02:38.004 --> 00:02:39.400
we have six intersections,

00:02:39.400 --> 00:02:43.360
we are pushing those intersections into a vector.

00:02:43.360 --> 00:02:46.210
It's the vector of shared pointers which you can see here,

00:02:46.210 --> 00:02:51.945
so we're instantiating an instance of intersection here, making it shared,

00:02:51.944 --> 00:02:54.534
and then pushing it into the vector here,

00:02:54.534 --> 00:02:57.319
then we are setting the positions of

00:02:57.319 --> 00:03:01.069
the intersections in pixel coordinates on the background image.

00:03:01.069 --> 00:03:05.044
I did this by using Photoshop and my mouse to find out the proper location

00:03:05.044 --> 00:03:09.634
of the intersections on the map and then we are creating the streets.

00:03:09.634 --> 00:03:15.724
The streets are also pushed into the vector by making them shared, share pointers.

00:03:15.724 --> 00:03:18.949
Then here, in this lengthy block of code,

00:03:18.949 --> 00:03:22.909
every street gets an in intersection and an out intersection.

00:03:22.909 --> 00:03:26.120
So every street has an intersection,

00:03:26.120 --> 00:03:30.780
at each end, there's no street which simply ends in the middle of no where.

00:03:30.780 --> 00:03:36.905
When a street ends in an intersection where no other streets are incoming,

00:03:36.905 --> 00:03:40.699
this is considered a turnaround location.

00:03:40.699 --> 00:03:43.699
So when an intersection is reached where the only way

00:03:43.699 --> 00:03:47.000
out is the same street from which the vehicle came from,

00:03:47.000 --> 00:03:49.254
it's simply going to drive back.

00:03:49.254 --> 00:03:52.909
That's happening here connecting all the intersections by streets.

00:03:52.909 --> 00:03:55.729
Okay. Then we are adding the vehicles to the streets,

00:03:55.729 --> 00:03:59.599
we are assigning some members here.

00:03:59.599 --> 00:04:04.389
So a vehicle gets the current street and the current destination,

00:04:04.389 --> 00:04:08.794
it has to be on a particular street and it has to drive towards a particular destination.

00:04:08.794 --> 00:04:10.444
That's our setup here.

00:04:10.444 --> 00:04:13.250
That's the end of this setup function

00:04:13.250 --> 00:04:16.610
here which creates the traffic objects. Now back to main.

00:04:16.610 --> 00:04:20.540
In main, the next thing we do is we enter up part two which is

00:04:20.540 --> 00:04:25.345
to simulate the traffic objects and if you take a look on the left side,

00:04:25.345 --> 00:04:27.980
to left side again, there's a setting up

00:04:27.980 --> 00:04:30.560
of the traffic objects is basically meant by this block here,

00:04:30.560 --> 00:04:32.389
add streets and target intersections to

00:04:32.389 --> 00:04:35.569
vehicles which we have seen in the previous minutes.

00:04:35.569 --> 00:04:40.534
Now, we get to this part here which is about simulating the vehicles.

00:04:40.535 --> 00:04:43.490
Before we take a look at this part here,

00:04:43.490 --> 00:04:45.199
you see a loop here which loops over

00:04:45.199 --> 00:04:49.159
all the shared pointers in our vector and calls a function called simulate.

00:04:49.160 --> 00:04:52.310
Before we look into the vehicle class,

00:04:52.310 --> 00:04:54.439
let's take a look at this shared class here,

00:04:54.439 --> 00:04:56.920
it's called traffic object.

00:04:56.920 --> 00:04:59.805
Let's open up the header file here.

00:04:59.805 --> 00:05:02.920
What you can see is we have different types of objects,

00:05:02.920 --> 00:05:05.960
we have vehicles, intersections, and streets,

00:05:05.959 --> 00:05:10.849
which is important later on when we visualize everything,

00:05:10.850 --> 00:05:12.905
but for now, it's not that important.

00:05:12.904 --> 00:05:15.089
But here comes the class definition.

00:05:15.089 --> 00:05:16.919
We have a constructor destructor,

00:05:16.920 --> 00:05:20.030
some getter and setter functions for adjusting member,

00:05:20.029 --> 00:05:25.114
member variables, then we have this section here called typical behavior methods.

00:05:25.115 --> 00:05:28.129
This section is always there with all classes and it

00:05:28.129 --> 00:05:32.170
basically describes the specialties of this particular class.

00:05:32.170 --> 00:05:37.424
In this case, it's a simulate function which is defined as virtual,

00:05:37.423 --> 00:05:41.179
that means it can be overwritten by classes which

00:05:41.180 --> 00:05:45.379
are derived from traffic object and basically,

00:05:45.379 --> 00:05:50.750
they can implement their own flavor of this simulation function in

00:05:50.750 --> 00:05:52.759
the base implementation as you can see here by

00:05:52.759 --> 00:05:57.079
the empty code records traffic objects do nothing in terms of simulating,

00:05:57.079 --> 00:06:02.149
but in a vehicle that gets a vehicles for example as we'll see in a few seconds,

00:06:02.149 --> 00:06:04.489
they are doing quite a lot here in this function.

00:06:04.490 --> 00:06:06.560
Okay. In the protected area,

00:06:06.560 --> 00:06:09.199
we have some variables, we have an ID,

00:06:09.199 --> 00:06:13.240
we have a position on the background image in X and Y,

00:06:13.240 --> 00:06:17.150
and we also have a vector of threads which

00:06:17.149 --> 00:06:21.935
is one of the tasks you will have to complete in this lesson project here.

00:06:21.935 --> 00:06:27.850
It basically holds all the threads that have been launched within this object.

00:06:27.850 --> 00:06:31.640
At the bottom here, we have a private function which is only valid for

00:06:31.639 --> 00:06:36.409
traffic object and not even valid for derive functions, its an ID counter.

00:06:36.410 --> 00:06:40.895
So the basic idea is every time we instantiate

00:06:40.894 --> 00:06:42.784
an object which is

00:06:42.785 --> 00:06:47.120
either directly a traffic object or has been derived from a traffic object,

00:06:47.120 --> 00:06:49.504
the ID counter gets incremented by one.

00:06:49.504 --> 00:06:55.430
So we don't have to worry about counting IDs and we ensure that every object has

00:06:55.430 --> 00:06:59.329
its own unique number that identifies only this object which is

00:06:59.329 --> 00:07:03.379
never going to be given away a second time.

00:07:03.379 --> 00:07:07.759
Every object has its own unique counting variable and that by making them static,

00:07:07.759 --> 00:07:15.139
we ensure that this variable here is independent of instances of traffic object.

00:07:15.139 --> 00:07:19.204
If you look into the student file of traffic object there's not much happening here.

00:07:19.204 --> 00:07:22.039
The only thing of interest which is coming up as task

00:07:22.040 --> 00:07:25.370
L1.1 is that it's your job here to set

00:07:25.370 --> 00:07:27.920
up a thread barrier that ensures that all the thread

00:07:27.920 --> 00:07:31.640
objects in the member vector _threads which we just saw,

00:07:31.639 --> 00:07:35.024
are joined before the traffic object is destroyed.

00:07:35.024 --> 00:07:37.379
Okay. Let's move back to main.

00:07:37.379 --> 00:07:41.225
In main, we are now calling up the simulate function

00:07:41.225 --> 00:07:45.140
of vehicles and in order to see what's happening there,

00:07:45.139 --> 00:07:50.360
let's open up the "Vehicle.h" header and again as you can see here,

00:07:50.360 --> 00:07:52.490
we have some getters and setters.

00:07:52.490 --> 00:07:55.949
As before, set current streets, set current destination,

00:07:55.949 --> 00:07:57.979
and also we are overwriting now

00:07:57.980 --> 00:08:03.395
the simulate function which is defined as virtual in the base class traffic object.

00:08:03.394 --> 00:08:07.764
Also this miscellaneous thing here.

00:08:07.764 --> 00:08:14.120
The problem we have is we are only using shared pointers here and with shared pointers,

00:08:14.120 --> 00:08:19.449
if you want to pass pointer to an object of a class itself,

00:08:19.449 --> 00:08:21.334
usually with conventional C++,

00:08:21.334 --> 00:08:24.629
you would use this keyword for this.

00:08:24.629 --> 00:08:26.790
But you cannot do this with shared pointers,

00:08:26.790 --> 00:08:31.395
and this is why we have to add a few things here which is this line

00:08:31.394 --> 00:08:36.470
which basically returns a pointer, gets shared.

00:08:36.470 --> 00:08:40.480
This and in order to enable

00:08:40.480 --> 00:08:45.539
the class to actually return a pointer to an instance of an object of itself,

00:08:45.539 --> 00:08:49.594
we have to add this one here which is an able shared from

00:08:49.595 --> 00:08:54.889
this template instantiated with or adapted to a vehicle object.

00:08:54.889 --> 00:08:56.399
It's a bit cumbersome to do this,

00:08:56.399 --> 00:09:04.204
a bit of boilerplate code but it's a way to enable us to pass this as pointer.

00:09:04.205 --> 00:09:07.840
As we will see later on, we have to pass a pointers to instances of

00:09:07.840 --> 00:09:12.185
traffic or vehicle from within the class and this is the way to do it.

00:09:12.184 --> 00:09:14.974
It's a bit lengthy but maybe

00:09:14.975 --> 00:09:18.404
you should read up on this concept as well to get a bit more used to it.

00:09:18.404 --> 00:09:20.429
But it's important for us later on.

00:09:20.429 --> 00:09:22.794
So the private method,

00:09:22.794 --> 00:09:27.745
it's also a typical behavior method but it cannot be called from externally,.

00:09:27.745 --> 00:09:30.595
Is drive, the vehicle drives along a street.

00:09:30.595 --> 00:09:34.410
So we have a quite lengthy implementation here which is an infinite loop which

00:09:34.409 --> 00:09:38.319
we will see shortly which manages all the driving behavior of the vehicle.

00:09:38.320 --> 00:09:39.940
Then we have some private member functions,

00:09:39.940 --> 00:09:42.450
a shared pointer to the current street.

00:09:42.450 --> 00:09:45.815
The vehicle is on, the current destination the vehicle drives towards to

00:09:45.815 --> 00:09:50.355
and also the position and the current speed of the vehicle.

00:09:50.355 --> 00:09:54.000
Now let's take a look at the implementation of vehicle. Let's start from the top.

00:09:54.000 --> 00:09:57.220
We have a constructor which initializes for example the speed.

00:09:57.220 --> 00:10:00.710
To be honest, the vehicles are quite fast here.

00:10:00.710 --> 00:10:02.894
I mean 400 meters per second,

00:10:02.894 --> 00:10:04.345
I know, it's a lot.

00:10:04.345 --> 00:10:09.300
But nonetheless, when you are driving towards let's say the Arc de Triomphe in

00:10:09.299 --> 00:10:15.284
Paris and you don't want to wait 10 minutes to get down this street or one minute maybe,

00:10:15.284 --> 00:10:18.009
we have to speed up things a little bit and this is why

00:10:18.009 --> 00:10:22.000
our cars are driving along and this insane speed.

00:10:22.000 --> 00:10:24.299
Luckily we don't have any air resistance,

00:10:24.299 --> 00:10:26.429
so there's not going to be much friction here.

00:10:26.429 --> 00:10:31.084
So I don't know if it's physically feasible but nonetheless it's pretty fast.

00:10:31.085 --> 00:10:34.050
Make it smaller if you want to.

00:10:34.049 --> 00:10:35.909
For my demos here,

00:10:35.909 --> 00:10:38.324
it's going to remain at 400 meters per second.

00:10:38.325 --> 00:10:41.200
So set current destination and then

00:10:41.200 --> 00:10:44.565
comes the simulate function which is actually your second task.

00:10:44.565 --> 00:10:47.570
The idea here is for you to start up a thread

00:10:47.570 --> 00:10:50.410
with a member function drive and the object of this we

00:10:50.409 --> 00:10:56.584
just talked about it which comes in this neat package of the shared pointer.

00:10:56.585 --> 00:11:03.840
Wrap-around and you should pass the object as the launch parameters to the threat.

00:11:03.840 --> 00:11:07.490
Once this is done, please add the creative thread

00:11:07.490 --> 00:11:10.850
into the underscore thread vector of the parent class which is traffic object.

00:11:10.850 --> 00:11:12.879
That's your second job here.

00:11:12.879 --> 00:11:16.039
This is the actual drive function.

00:11:16.039 --> 00:11:18.844
Now let's take a look at the left-hand side again,

00:11:18.845 --> 00:11:20.195
this is vehicle drive.

00:11:20.195 --> 00:11:23.815
The first thing we do is after printing out the current thread ID,

00:11:23.815 --> 00:11:29.380
actually it makes sense to observe the console output because what this line here does,

00:11:29.379 --> 00:11:36.539
it gives you a unique system thread ID of each thread which is running as a vehicle,

00:11:36.539 --> 00:11:40.000
and by looking at threat ideas and comparing them you can see whether they

00:11:40.000 --> 00:11:43.965
are really implemented in parallel and concurrent manner.

00:11:43.965 --> 00:11:48.245
Because actually the threat IDs should all be different here.

00:11:48.245 --> 00:11:53.039
So take a look especially as we will later change the way

00:11:53.039 --> 00:11:58.144
how threads are called using async which is task-based instead,

00:11:58.144 --> 00:12:04.439
and this thread ID is an indicator of how the system has chosen to execute a thread.

00:12:04.440 --> 00:12:08.880
Then we are initializing some variables and we're also initializing the stopwatch here

00:12:08.879 --> 00:12:13.600
which corresponds to this box here and then we enter on the infinite while loop,

00:12:13.600 --> 00:12:17.149
which is this long loop here on the left-hand side.

00:12:17.149 --> 00:12:21.110
This line here, putting this thread to sleep for one millisecond.

00:12:21.110 --> 00:12:22.460
This is really important.

00:12:22.460 --> 00:12:25.530
Maybe you recall the example from the first lesson where I wrote

00:12:25.529 --> 00:12:28.970
this dummy program which executed four threads in parallel

00:12:28.970 --> 00:12:32.315
and then we looked at the task manager to see that it actually burned up

00:12:32.315 --> 00:12:36.095
400 percent of CPU power.

00:12:36.095 --> 00:12:41.615
This happens because we do not have a wait function inside a while loop.

00:12:41.615 --> 00:12:44.995
By introducing this very small wait function,

00:12:44.995 --> 00:12:48.620
we ensure that this burning up of the processor does not happen,

00:12:48.620 --> 00:12:52.039
because nowadays computers are so fast,

00:12:52.039 --> 00:12:56.199
they can really race through an infinite while loop so fast.

00:12:56.200 --> 00:12:59.710
It's using up so much processing power.

00:12:59.710 --> 00:13:02.745
You can't imagine how often it is executed.

00:13:02.745 --> 00:13:05.399
It's beyond below the nanosecond scale,

00:13:05.399 --> 00:13:08.284
and this is why we are introducing this waiting function here

00:13:08.284 --> 00:13:12.184
to significantly reduce the load on the processor.

00:13:12.184 --> 00:13:13.324
Just for the fun of it,

00:13:13.325 --> 00:13:17.685
you can remove this line here and simply command it out and observe

00:13:17.684 --> 00:13:24.104
the CPU load of the program here with and without this line included.

00:13:24.105 --> 00:13:26.615
Just to get an impression.

00:13:26.615 --> 00:13:28.629
Then what we do here is we compute

00:13:28.629 --> 00:13:30.980
the time difference to the stopwatch which happens here

00:13:30.980 --> 00:13:38.154
and once the time since the last update is larger than the cycle duration,

00:13:38.154 --> 00:13:40.679
the duration is currently set to one milliseconds.

00:13:40.679 --> 00:13:45.664
So every millisecond, we want to recompute an update of the vehicle position.

00:13:45.664 --> 00:13:50.594
You can simply change this to 10 milliseconds or if you want to do 30 hertz,

00:13:50.595 --> 00:13:55.320
you could go to a 33 milliseconds just like this by adapting this value.

00:13:55.320 --> 00:14:01.335
You can simply change the updating frequency of the vehicle positions.

00:14:01.335 --> 00:14:04.585
What we are doing here, and these lengthy lines of code here.

00:14:04.585 --> 00:14:11.160
This is basically checking whether the vehicle has reached the end of the street.

00:14:11.159 --> 00:14:13.480
We are updating the vehicle position on the street and then

00:14:13.480 --> 00:14:15.965
we are checking if the vehicles which the end of the street.

00:14:15.965 --> 00:14:18.280
So what happens here is we are updating

00:14:18.279 --> 00:14:22.199
the position that has been driven since the last update,

00:14:22.200 --> 00:14:25.520
its constant velocity motion model which is applied here.

00:14:25.519 --> 00:14:30.159
We compute the completion rate of current street in the range from zero to one.

00:14:30.159 --> 00:14:31.419
Zero is just started,

00:14:31.419 --> 00:14:35.054
one 1.0 means it has reached the end of the street.

00:14:35.054 --> 00:14:38.879
We are transferring this to pixel positions based on

00:14:38.879 --> 00:14:41.375
the current driving direction because we want to update

00:14:41.375 --> 00:14:44.804
the proper position on the background image.

00:14:44.804 --> 00:14:46.359
Actually this line here,

00:14:46.360 --> 00:14:48.529
this lengthy block of code here,

00:14:48.529 --> 00:14:52.949
what you can see here XV and YV, this is a line,

00:14:52.950 --> 00:14:56.910
a form of the line equation which takes a starting point X1 and

00:14:56.909 --> 00:15:03.000
Y1 and then I parameter the completion rate which points into a certain direction.

00:15:03.000 --> 00:15:07.019
This is a unit vector here and this points into the direction of

00:15:07.019 --> 00:15:09.179
the new destination which is the intersection we're driving

00:15:09.179 --> 00:15:12.214
towards and by multiplying it with completion rate,

00:15:12.215 --> 00:15:15.790
we get the new position along the line which takes us directly

00:15:15.789 --> 00:15:20.174
towards the destination intersection and then we are updating the position accordingly.

00:15:20.174 --> 00:15:22.904
This here, this block here says,

00:15:22.904 --> 00:15:27.789
once we have completed 90 percent of the street then we are going to significantly

00:15:27.789 --> 00:15:32.804
slow down and we are setting this flag here to true which tells the system,

00:15:32.804 --> 00:15:37.484
hey, here's a vehicle that is about to enter the intersection.

00:15:37.485 --> 00:15:43.019
Once we have completed the total driving path or the total length of the street,

00:15:43.019 --> 00:15:47.379
so a 100 percent of the street has been driven towards now or has been completed

00:15:47.379 --> 00:15:52.634
now and has entered into dissection of flag is true,

00:15:52.634 --> 00:15:55.069
we choose the next street and the destination,

00:15:55.070 --> 00:15:56.855
simply pick it randomly.

00:15:56.855 --> 00:16:00.284
You can look up the function query streets here.

00:16:00.284 --> 00:16:02.794
It's a random pick process here.

00:16:02.794 --> 00:16:06.094
Actually the random pick process happens here.

00:16:06.095 --> 00:16:09.754
This queries the available streets.

00:16:09.754 --> 00:16:11.504
Then in this block of code,

00:16:11.504 --> 00:16:16.490
we select one street from all the available options by random

00:16:16.490 --> 00:16:19.620
and then we set the randomly selected street with

00:16:19.620 --> 00:16:23.164
next street on which the vehicle is going to be on.

00:16:23.164 --> 00:16:27.379
The next thing which happens and this is your vehicle picks destination

00:16:27.379 --> 00:16:31.465
and crosses the intersection on the left side in the diagram.

00:16:31.465 --> 00:16:35.195
Then we set these values to be new destination, new street.

00:16:35.195 --> 00:16:36.610
We readjust the speed,

00:16:36.610 --> 00:16:41.250
we set it to the original value again by multiplying it by 10 and we say,

00:16:41.250 --> 00:16:44.889
okay vehicle has left the intersection and then we reset

00:16:44.889 --> 00:16:49.804
the stop watch which is the end of this code here.

00:16:49.804 --> 00:16:55.194
Now let's move back to the main function to start up the simulation to see how it looks.

00:16:55.195 --> 00:16:57.004
Maybe one last remark,

00:16:57.004 --> 00:17:02.149
in intersection both in CPP and in.H, at this point in time

00:17:02.149 --> 00:17:03.129
not much is happening.

00:17:03.129 --> 00:17:07.119
We will make significant changes to both files in the next doesn't project but

00:17:07.119 --> 00:17:11.289
for now as intersections are simply in-between points,

00:17:11.289 --> 00:17:13.789
between streets which do not do anything.

00:17:13.789 --> 00:17:18.125
We can have as many vehicles as we want driving through an intersection at the same time.

00:17:18.125 --> 00:17:19.595
Currently, that's not much happening.

00:17:19.595 --> 00:17:21.600
So we will exclude those for now.

00:17:21.599 --> 00:17:24.719
Let's move to main.

00:17:24.720 --> 00:17:28.029
In main, you can adjust the number of vehicles very

00:17:28.029 --> 00:17:32.105
easily by changing the four to the six or two.

00:17:32.105 --> 00:17:36.029
There's only one piece of advice I'd like to give to you.

00:17:36.029 --> 00:17:41.764
Let's move up to the function, creates traffic objects.

00:17:41.765 --> 00:17:46.205
As you can see here, we have six intersections now and seven streets.

00:17:46.204 --> 00:17:47.724
Right down at the bottom,

00:17:47.724 --> 00:17:49.490
this four loop here,

00:17:49.490 --> 00:17:56.394
this basically adds a vehicle twos or this sets the current streets for a vehicle,

00:17:56.394 --> 00:18:00.654
also the current destination intersection and this counting variable NV here.

00:18:00.654 --> 00:18:05.180
This of course may not be larger than the number of streets which are available,

00:18:05.180 --> 00:18:08.700
currently seven or the number of intersections available, currently six.

00:18:08.700 --> 00:18:11.960
So by setting the number of vehicles to

00:18:11.960 --> 00:18:15.795
something larger than six will at this point in time cause a crash.

00:18:15.795 --> 00:18:20.095
You could include a small piece of code here which basically

00:18:20.095 --> 00:18:24.490
limits the number of vehicles to the maximally available intersections or streets.

00:18:24.490 --> 00:18:26.640
But for now, let's leave it with the advice.

00:18:26.640 --> 00:18:30.365
If you turn this number here to something larger than six,

00:18:30.365 --> 00:18:33.085
you're going to see a crash of the program.

00:18:33.085 --> 00:18:36.025
Now let's start with two vehicles.

00:18:36.025 --> 00:18:38.259
Let's run the code to see what happen.

00:18:38.259 --> 00:18:43.859
As you can see, as for the slides you have seen before,

00:18:43.859 --> 00:18:47.479
we have a number of vehicles moving through the city grid.

00:18:47.480 --> 00:18:49.720
Currently there are two vehicles but you can easily

00:18:49.720 --> 00:18:52.900
change this number as we have just discussed it.

00:18:52.900 --> 00:18:55.905
So that's the walk-through through the current version of the court.

00:18:55.904 --> 00:19:01.399
Have fun with the tasks in this lesson project and see you soon in the next lesson.

