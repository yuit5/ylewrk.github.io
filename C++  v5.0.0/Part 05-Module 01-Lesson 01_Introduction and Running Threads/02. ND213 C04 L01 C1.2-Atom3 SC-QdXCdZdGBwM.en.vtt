WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.430
So first, we need to open up the console,

00:00:02.430 --> 00:00:06.449
and then enter the top command which starts up an interactive command-line application.

00:00:06.450 --> 00:00:09.210
Let me do this here. Let's enter top, press enter.

00:00:09.210 --> 00:00:12.405
Okay, here we go. Now, to the upper half

00:00:12.404 --> 00:00:15.449
of the output contains statistics on processes and

00:00:15.449 --> 00:00:17.849
resource usage where the lower half or

00:00:17.850 --> 00:00:22.429
the lower two-thirds contains a list of the currently running processes.

00:00:22.429 --> 00:00:25.100
You can use the arrow keys to browse through this list,

00:00:25.100 --> 00:00:29.965
and if you want to quit simply press Q like this.

00:00:29.964 --> 00:00:32.189
Okay. Let's open it up again.

00:00:32.189 --> 00:00:34.479
Okay. At the top here,

00:00:34.479 --> 00:00:38.709
you can see the total number of processes as well as their states,

00:00:38.710 --> 00:00:41.000
which might be either running or sleeping in this case.

00:00:41.000 --> 00:00:43.979
There are other states as well, but for now this is not important to us.

00:00:43.979 --> 00:00:48.649
Also, you can see the total number of threads this scheduler currently needs to manage.

00:00:48.649 --> 00:00:50.085
At this point in time,

00:00:50.085 --> 00:00:53.625
it's 2,024 threads in the system.

00:00:53.625 --> 00:00:56.810
Also here, you have the average load of the system.

00:00:56.810 --> 00:01:01.070
CPU is used up roughly by two percent,

00:01:01.070 --> 00:01:05.599
three percent, it fluctuates a little bit and the rest of the system is idle.

00:01:05.599 --> 00:01:09.939
Also, you have some memory statistics here which are currently not important to us.

00:01:09.939 --> 00:01:11.700
Now, the list of programs below here,

00:01:11.700 --> 00:01:15.159
you can also see details on each of the currently active programs.

00:01:15.159 --> 00:01:18.204
So this includes the program ID on the left-hand side here,

00:01:18.204 --> 00:01:21.454
its name, the memory usage, CPU usage,

00:01:21.454 --> 00:01:28.179
and also the number of currently active threads which is this abbreviation here TH.

00:01:28.180 --> 00:01:32.350
For example Dropbox, the web application uses 16 threads while

00:01:32.349 --> 00:01:38.109
the recording tool which I'm currently using uses up 15 threads and another 12 down here.

00:01:38.109 --> 00:01:39.670
So quite a few number of threads here.

00:01:39.670 --> 00:01:44.365
It seems my recording application is highly parallelized, which is a good thing.

00:01:44.364 --> 00:01:47.524
Let's take a look at a small example program here which I wrote.

00:01:47.525 --> 00:01:51.140
Here in Visual Studio Code there is a small example program.

00:01:51.140 --> 00:01:54.530
You don't need to understand all the things which happened here,

00:01:54.530 --> 00:01:56.750
we will come to this in due course,

00:01:56.750 --> 00:01:59.239
but let's take a quick look at what's happening here.

00:01:59.239 --> 00:02:02.149
So first of all, we are including a header called

00:02:02.150 --> 00:02:05.780
thread which gives us concurrent capabilities in C++,

00:02:05.780 --> 00:02:10.265
we'll get to that, and also we are including a standard vector here.

00:02:10.264 --> 00:02:11.359
So first of all,

00:02:11.360 --> 00:02:16.685
we are creating a vector which is going to take some concurrent threads of execution,

00:02:16.685 --> 00:02:20.860
we're going to store those for using them later Then,

00:02:20.860 --> 00:02:23.630
we are starting up a certain number of threads.

00:02:23.629 --> 00:02:25.849
In this example it's going to be four threads,

00:02:25.849 --> 00:02:31.280
and this for loop here which goes from 0 to 1 below a number of threads.

00:02:31.280 --> 00:02:38.330
We are starting up a thread here in the parentheses by using standard thread.

00:02:38.330 --> 00:02:41.570
Then this construct here with all the brackets and parentheses,

00:02:41.569 --> 00:02:44.650
and the curly brackets, this is called a lambda function.

00:02:44.650 --> 00:02:46.230
We'll also get to that in the future.

00:02:46.229 --> 00:02:49.280
But basically, this part here is what's

00:02:49.280 --> 00:02:52.685
being sent to the thread to be executed in parallel,

00:02:52.685 --> 00:02:53.914
and as you can see here,

00:02:53.914 --> 00:02:57.079
this is an infinite while loop which which never quits.

00:02:57.080 --> 00:02:58.940
Once we fire up this thread,

00:02:58.939 --> 00:03:00.859
and we're going to do so four times,

00:03:00.860 --> 00:03:03.560
we'll have four parallel threads of

00:03:03.560 --> 00:03:08.569
execution each of which is running an infinite while loop never finishing,

00:03:08.569 --> 00:03:12.049
and the idea here is to take a look at the process table here,

00:03:12.050 --> 00:03:16.900
and see if we can find this number of threads in the list of processes.

00:03:16.900 --> 00:03:20.645
At the end, once the for loop is finished because we're leaving the for loop,

00:03:20.645 --> 00:03:24.689
even though those are executing infinite while loops,

00:03:24.689 --> 00:03:27.064
and the reason we're even getting here is that

00:03:27.064 --> 00:03:31.370
those threads are executed in parallel to the main program.

00:03:31.370 --> 00:03:36.125
Let's fire up this program and see what happens in the process list.

00:03:36.125 --> 00:03:40.294
Now, on the left-hand side you can now find the testThreads function here,

00:03:40.294 --> 00:03:41.929
it's running at 400 percent.

00:03:41.930 --> 00:03:45.590
So there might be some room for optimizing our infinite while loop,

00:03:45.590 --> 00:03:49.189
maybe we could sleep for awhile with each cycle because currently,

00:03:49.189 --> 00:03:52.329
400 percent seems a bit too much for actually doing nothing.

00:03:52.330 --> 00:03:55.370
But it's not about demonstrating the CPU load here,

00:03:55.370 --> 00:03:57.784
it's more about demonstrating the number of threads.

00:03:57.784 --> 00:03:59.969
If you look here, that actually,

00:03:59.969 --> 00:04:02.444
two numbers here a 5 and 4,

00:04:02.444 --> 00:04:07.370
the 4 is the number of threads we put into action to execute the infinite while loop,

00:04:07.370 --> 00:04:10.219
and can you guess the number 5 here?

00:04:10.219 --> 00:04:11.539
Why is it 5 and not 4?

00:04:11.539 --> 00:04:13.419
Because we only started four threads.

00:04:13.419 --> 00:04:16.490
Any idea? Well, you might have guessed correctly.

00:04:16.490 --> 00:04:17.840
It's the main thread,

00:04:17.839 --> 00:04:19.819
which also gets counted as a single thread,

00:04:19.819 --> 00:04:23.524
because every program has at least one thread, for example,

00:04:23.524 --> 00:04:28.264
the bash program down here only one or do we find another one somewhere in the list?

00:04:28.264 --> 00:04:33.394
currently not. Well, this one here the top program is also only one thread.

00:04:33.394 --> 00:04:36.229
The rest is the worker threads we put to use here and

00:04:36.230 --> 00:04:39.370
the one missing to complete five is the main program,

00:04:39.370 --> 00:04:41.949
and let's go back to our main, to our small program here.

00:04:41.949 --> 00:04:48.039
Let's stop it, and let's change the number of threads to let's say 10.

00:04:48.040 --> 00:04:50.510
Let's run it again, and as you can see here,

00:04:50.509 --> 00:04:52.569
we have now 10 threads up and running,

00:04:52.569 --> 00:04:54.964
the CPU load is at 1000 percent,

00:04:54.964 --> 00:04:59.849
and the total number of threads is at 11.

