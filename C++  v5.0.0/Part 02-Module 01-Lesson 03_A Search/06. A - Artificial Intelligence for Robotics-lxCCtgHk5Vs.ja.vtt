WEBVTT
Kind: captions
Language: ja

00:00:00.000 --> 00:00:05.000
ではここで講義の主題である
A＊について説明しましょう

00:00:05.000 --> 00:00:10.000
A＊は何年も前にスタンフォード大学の
ニルス・ニルソンによって考案されました

00:00:10.000 --> 00:00:14.450
A＊は探索アルゴリズムの一種で
全ノードを展開するよりも効率的な手法です

00:00:14.450 --> 00:00:19.000
これまで説明してきたので
OPENリストのノードを次々に展開していく

00:00:19.000 --> 00:00:21.280
探索メカニズムについては
理解されていると思います

00:00:21.280 --> 00:00:26.000
A＊もほぼ似たようなものですが
まったく同じというわけではありません

00:00:26.000 --> 00:00:30.000
A＊について説明するために
先ほどと同じグリッドを使用しましょう

00:00:30.000 --> 00:00:33.000
ただし今回は障害物の構成が異なります

00:00:33.000 --> 00:00:36.000
これはA＊が実にうまく実行される方法の1つです

00:00:36.450 --> 00:00:39.000
下に向かってここまで進むしかありません

00:00:39.000 --> 00:00:43.000
しかし この地点ではゴールまでの
最適経路を探索しなければいけません

00:00:43.000 --> 00:00:46.000
プログラムコードで表すとこのようになり
ゴールまでのすべてのセルを確認できます

00:00:46.000 --> 00:00:49.000
スタートがここでゴールがここです

00:00:49.400 --> 00:00:55.750
実行すると先ほど皆さんが作成したような
展開リストになります

00:00:56.150 --> 00:01:00.290
ここから下に向かって
展開していることが分かりますが

00:01:00.290 --> 00:01:06.000
そのあとは障害物のない空間へと展開しています

00:01:06.000 --> 00:01:11.000
この空間で対角線方向に展開し
最終的にはゴールの15番目のノードに到達します

00:01:11.000 --> 00:01:14.000
ゴールに到達するまでに
展開が16回実行されています

00:01:14.000 --> 00:01:18.000
A＊に切り替えて再びコードを実行してみましょう

00:01:18.000 --> 00:01:24.000
このように0から9までのわずか10回の展開で
ゴールに到達します

00:01:24.000 --> 00:01:28.000
4までは下に展開しますが
それ以降はゴールまで真っすぐに展開します

00:01:28.000 --> 00:01:30.220
このエリアには一切踏み込んでいません

00:01:30.500 --> 00:01:36.300
この上部に進むと直進した場合よりも
道のりが遠くなることが分かっているようです

00:01:36.760 --> 00:01:40.200
ここに直線経路があるということは
指定していません

00:01:40.200 --> 00:01:42.360
次にゴールの隣に障害物を設定して

00:01:42.730 --> 00:01:47.000
A＊を再び実行してみましょう
このように7まで展開しますが

00:01:47.000 --> 00:01:50.000
そこからは下から2番目の行へ移動し

00:01:50.000 --> 00:01:53.000
上の方へ展開してから
前回と同様にゴールに到達します

00:01:53.000 --> 00:01:58.380
ゴールに最大限近づくために
必要な最小限の作業量を実行するのがA＊です

00:01:59.250 --> 00:02:01.220
さらに詳しく見てみましょう

00:02:01.500 --> 00:02:08.000
A＊ではヒューリスティック関数を使用します
セットアップが必要な関数です

00:02:08.000 --> 00:02:13.430
値がすべてゼロならすでに実装されている
探索アルゴリズムを使用します

00:02:13.900 --> 00:02:15.960
ヒューリスティック関数のhを呼び出すと

00:02:17.250 --> 00:02:21.050
各セルに値を設定する必要があります

00:02:21.250 --> 00:02:23.250
値を入れてみましょう

00:02:23.250 --> 00:02:29.000
ここの値は1です　障害物が一切ない場合の
ゴールまでのステップ数です

00:02:29.000 --> 00:02:31.380
私が書いている1、2、3、4、5などの数値は

00:02:31.380 --> 00:02:37.000
ゴールまでの実際の距離を
反映するものではありません

00:02:37.000 --> 00:02:39.050
障害物が考慮されていないからです

00:02:39.400 --> 00:02:44.000
ヒューリスティック関数は障害物のない世界では
そのままゴールまでの距離を観測します

00:02:44.630 --> 00:02:50.400
ゴールからどのくらい離れているかは
楽観的な推測をするしかありません

00:02:50.700 --> 00:02:53.840
言い換えるとxy座標で表わされるセルについて

00:02:54.400 --> 00:02:58.000
楽観的な推測をするということです

00:02:58.000 --> 00:03:04.000
つまり推測値は座標xyからゴールまでの
実際の距離以下になるということです

00:03:04.000 --> 00:03:06.000
場当たりてきなようですが

00:03:06.000 --> 00:03:10.000
これで優れたヒューリスティック関数を
簡単に適用できるのです

00:03:10.000 --> 00:03:13.860
エージェントが左、右、上、下に
移動できることが分かっていれば

00:03:13.860 --> 00:03:18.290
障害物がない状況でゴールに到達するまでの
ステップ数を予測するのは非常に簡単で

00:03:18.290 --> 00:03:22.000
その場合はこの表のようになります

00:03:22.000 --> 00:03:24.230
この表は簡単に自動的に生成されます

00:03:24.700 --> 00:03:27.000
しかし実際にはこの推測値は低く見積もられます

00:03:27.000 --> 00:03:30.440
例えばこのような障害物があった場合

00:03:31.100 --> 00:03:33.880
ここからゴールまで9ステップでは足りません

00:03:35.000 --> 00:03:38.000
山なりに移動して13ステップかかります

00:03:38.000 --> 00:03:42.000
ヒューリスティック関数は優れた点があります
厳密である必要がないのです

00:03:42.000 --> 00:03:46.000
厳密であれば計画問題は
とっくに解決していたでしょう

00:03:46.000 --> 00:03:51.000
数値が同じであった場合は
次にどこを探索すべきか知るための関数が必要です

00:03:51.000 --> 00:03:57.000
その関数はゴールからの距離を
実際の距離以下に見積もらないといけません

00:03:57.000 --> 00:04:01.000
Googleの自動運転車では多くの問題において
このような関数を使用しています

00:04:01.000 --> 00:04:04.000
実際にここで紹介した関数を使って

00:04:04.000 --> 00:04:07.000
ソフトウェアでナビゲーションを不要にしています

00:04:07.000 --> 00:04:13.000
目的地までのユークリッド距離ではなく
セルのステップ数が求められます

00:04:13.000 --> 00:04:16.000
ヒューリスティック関数がどのようなものであるか
お分かりいただけたと思います

00:04:16.000 --> 00:04:20.000
すべてが役立つわけではりませんが
多くの有益なヒューリスティック関数が存在し

00:04:20.000 --> 00:04:21.000
すべての値をゼロに設定するものもあります

00:04:21.000 --> 00:04:23.000
このヒューリスティック関数について
考えてみましょう

00:04:23.000 --> 00:04:26.000
コード内でヒューリスティック関数が
使用されています

00:04:26.000 --> 00:04:28.000
手書きの表と同じものです

00:04:28.000 --> 00:04:35.000
探索アルゴリズムに関する重要な修正は
極めてシンプルなものです

00:04:35.000 --> 00:04:41.000
ここで再びOPENリストを使用して状態を追加し

00:04:41.000 --> 00:04:46.000
g値とともにヒューリスティック値＋g値を
記録します

00:04:46.000 --> 00:04:50.000
ここではg値は0でヒューリスティック値は9です

00:04:50.000 --> 00:04:53.000
2つの合計は9でこれをf値と呼びます

00:04:53.000 --> 00:04:57.000
f値はg値の累積と
ヒューリスティック値の合計を表します

00:04:57.000 --> 00:05:00.000
ここにある表ではこのようになります

00:05:00.000 --> 00:05:07.000
ノードを展開する場合はg値の最小値ではなく
f値の最小値である要素を除外します

00:05:07.000 --> 00:05:10.000
これがA＊の実行です　例をお見せしましょう

00:05:10.500 --> 00:05:13.110
OPENリストでここまで進むとします

00:05:15.550 --> 00:05:19.000
ここまですべての状態を展開します

00:05:19.000 --> 00:05:21.000
OPENリストにおける現在の位置はここで

00:05:21.000 --> 00:05:24.000
g値は5になります

00:05:24.600 --> 00:05:30.000
ヒューリスティック値は4であり
合計は前回と同じく9です

00:05:30.300 --> 00:05:32.300
次にこのノードを展開します

00:05:33.000 --> 00:05:38.000
1つ進んでここに移動するとg値は6に増えます

00:05:38.000 --> 00:05:42.570
g値とヒューリスティック値の合計は
6＋3なので依然として9です

00:05:44.000 --> 00:05:47.140
さらに展開すると2つの選択肢が登場します

00:05:47.600 --> 00:05:49.600
この状態とこの状態です

00:05:50.800 --> 00:05:57.000
上に1つ進む場合は［3，2］で
右に1つ進む場合は［4，3］になります

00:05:57.000 --> 00:06:00.000
この場合のg値は両方とも7です

00:06:00.290 --> 00:06:02.990
しかしh値を加えると違いが出ます

00:06:03.860 --> 00:06:07.000
上へ進む場合はh値が4になります

00:06:07.000 --> 00:06:11.000
ゴールから少し離れた位置に
移動することになります

00:06:11.000 --> 00:06:13.000
合計は11です

00:06:14.000 --> 00:06:20.000
一方こちらに進むとh値は2になって7＋2＝9です

00:06:20.550 --> 00:06:24.650
ここで初めてA＊が実質的な違いをもたらします

00:06:25.500 --> 00:06:31.490
このノードよりもこちらのノードの方が
展開の優先度が高くなっています

00:06:33.390 --> 00:06:40.000
g値とh値の合計のf値が
一方で9、他方で11である理由を考えてみましょう

00:06:40.000 --> 00:06:45.000
ヒューリスティックにおいて
これは何を示しているかというと

00:06:45.000 --> 00:06:50.000
実質的にはこちらの方がこちらに比べて
2ステップ分ゴールに近いということです

00:06:50.000 --> 00:06:53.000
このノードはゴールから2ステップの位置にあり

00:06:53.000 --> 00:06:56.480
このノードは少なくとも
4ステップ離れているということになります

00:06:57.000 --> 00:07:03.890
この場合f値が9対11なので
A＊はこのノードを展開します

00:07:03.890 --> 00:07:08.390
このノードを展開してみると
2つの有効な隣接ノードができます

00:07:08.390 --> 00:07:10.430
この上のノードと右のノードです

00:07:11.000 --> 00:07:15.000
1つ目のノードの座標は［3，3］で
2つ目のノードの座標は［4，4］です

00:07:15.000 --> 00:07:18.000
これまでと同様にg値は1つずつ増加します

00:07:18.000 --> 00:07:20.000
どちらも8です

00:07:20.000 --> 00:07:23.400
次にヒューリスティック値をg値に加えます

00:07:23.400 --> 00:07:29.910
ここにある1つ目の方は3で3＋8＝11です

00:07:31.000 --> 00:07:38.000
一方 右の方のノードのヒューリスティック値は
1となります

00:07:38.000 --> 00:07:40.000
ノードを展開した結果がこうです

00:07:40.000 --> 00:07:44.000
これは新しいOPENリストで
ここでも優先度があります

00:07:44.350 --> 00:07:48.000
OPENリストにはこれらの3つの状態があり
右側のノードの方が優先度が高くなります

00:07:48.000 --> 00:07:52.000
f値が他の2つのf値よりも小さいからです

00:07:52.000 --> 00:07:58.000
このf値は9ですがこちらのf値は11です

00:07:58.000 --> 00:08:02.000
ここで再び展開するとゴール状態になります

00:08:02.500 --> 00:08:09.480
ゴール状態が検出され
迷路のこの上の部分は展開されずに終わります

00:08:09.580 --> 00:08:15.000
まるで魔法のようですが
重要なのは追加情報を与えるということです

00:08:15.200 --> 00:08:18.500
ヒューリスティック関数と呼ばれる
追加情報を使用して探索を誘導します

00:08:18.500 --> 00:08:23.700
行き詰まったときはゴール状態に近く見える
ノードを選択することができるので

00:08:23.700 --> 00:08:26.800
結果としてゴールに近づく可能性が高くなります

