WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.000
Now I want to come with you to the absolute meat of this class, which is called A-star.

00:00:05.000 --> 00:00:10.000
A-star was invented by Nels Nelson at Stanford many years ago,

00:00:10.000 --> 00:00:14.000
and is a variant of the search algorithm that's more efficient than expanding every node.

00:00:14.000 --> 00:00:19.000
If you've gotten so far, and you understand the mechanism for searching

00:00:19.000 --> 00:00:24.000
by gradually expanding nodes in the open list, A-star is almost the same thing

00:00:24.000 --> 00:00:26.000
but not quite.

00:00:26.000 --> 00:00:30.000
To illustrate A-star I'm going to use the same grid as before

00:00:30.000 --> 00:00:33.000
but with a different obstacle configuration.

00:00:33.000 --> 00:00:36.000
This is oine way A-star performs really well.

00:00:36.000 --> 00:00:39.000
Obviously we are forced to go down to here,

00:00:39.000 --> 00:00:43.000
but in here we still have to search for the optimal path for the goal.

00:00:43.000 --> 00:00:46.000
Here is the same in problem code; you can see all the ones over here.

00:00:46.000 --> 00:00:49.000
Start set is over here, goal set is over here.

00:00:49.000 --> 00:00:56.000
If I run this code and give you my expand list, the ones you programmed before,

00:00:56.000 --> 00:01:01.000
you'll find that the expansion goes down from here,

00:01:01.000 --> 00:01:06.000
but then it expands into the open space.

00:01:06.000 --> 00:01:11.000
Diagonally it expands into the open space and until it finally hits the goal node 15.

00:01:11.000 --> 00:01:14.000
This took 16 expansions to get to this point.

00:01:14.000 --> 00:01:18.000
Let me now switch on A-star and run the code again.

00:01:18.000 --> 00:01:24.000
What we now find it only takes 10 expansions to get to this point, zero to nine over here.

00:01:24.000 --> 00:01:28.000
So it expands down to four, but then it expands straight toward the goal

00:01:28.000 --> 00:01:33.000
never touching this area over here, somehow magically knowing

00:01:33.000 --> 00:01:37.000
that up here the path to the goal will be longer than going straight.

00:01:37.000 --> 00:01:38.000
Now I didn't cheat.

00:01:38.000 --> 00:01:40.000
I didn't tell it that there's a straight path over here.

00:01:40.000 --> 00:01:44.000
So let me put an obstacle right here next to the goal and run A-star again.

00:01:44.000 --> 00:01:47.000
What you'll find it does expand up to seven over here

00:01:47.000 --> 00:01:50.000
but then moves to the second line over here,

00:01:50.000 --> 00:01:53.000
expands up here, and then hits the goal again.

00:01:53.000 --> 00:01:56.000
So it kind of does the minimum amount of work necessary

00:01:56.000 --> 00:01:57.000
to make maximum progress to the goal.

00:01:57.000 --> 00:02:01.000
That's A-star, and now we look into A-star in more detail.

00:02:01.000 --> 00:02:08.000
A-star uses a so called heuristic function, which is a function that has to be set up.

00:02:08.000 --> 00:02:14.000
If its all zeros then A-star resorts back to the search algorithm already implemented.

00:02:14.000 --> 00:02:21.000
If we call the heuristic function h, then for each cell it results into a value.

00:02:21.000 --> 00:02:23.000
So let me give you some values.

00:02:23.000 --> 00:02:29.000
Here is one: Its number of steps it takes to the goal if there was no obstacle.

00:02:29.000 --> 00:02:34.000
Clearly the number I'm putting in right now , 1, 2, 3, 4, 5, and so on,

00:02:34.000 --> 00:02:37.000
are not reflective of the actual distance to the goal

00:02:37.000 --> 00:02:39.000
because they don't consider the obstacles.

00:02:39.000 --> 00:02:42.000
In a world without obstacles the heuristic function that I'm giving you

00:02:42.000 --> 00:02:44.000
would actually measure the distance to the goal.

00:02:44.000 --> 00:02:51.000
So the heuristic function has to be an optimistic guess how far we are from the goal.

00:02:51.000 --> 00:02:58.000
So put differently, for any cell x y the heuristic function has to be an optimistic guess,

00:02:58.000 --> 00:03:04.000
which means a smaller equal to the actual goal distance from the coordinate x and y.

00:03:04.000 --> 00:03:06.000
Now that sounds a little bit ad hoc,

00:03:06.000 --> 00:03:09.000
but very often you can give good heuristic functions really easily

00:03:09.000 --> 00:03:10.000
like in this case over here.

00:03:10.000 --> 00:03:13.000
If we just know that the agent can move left, right, up, or down,

00:03:13.000 --> 00:03:17.000
it's really easy to say what is the number of steps it would take the agent

00:03:17.000 --> 00:03:22.000
with no obstacles to get to the goal location, and that's this table over here.

00:03:22.000 --> 00:03:25.000
That is easily generated automatically.

00:03:25.000 --> 00:03:27.000
Now in reality this is an underestimate.

00:03:27.000 --> 00:03:33.000
If obstacles, for example, look like this then from here it takes you more than 9 steps

00:03:33.000 --> 00:03:35.000
to get to the goal.

00:03:35.000 --> 00:03:38.000
It takes you 13 steps to over the hump over here.

00:03:38.000 --> 00:03:41.000
Therein lies the beauty of the heuristic function.

00:03:41.000 --> 00:03:42.000
It doesn't have to be accurate.

00:03:42.000 --> 00:03:46.000
If it was accurate you probably already solved the planning problem.

00:03:46.000 --> 00:03:49.000
There has to be a function that helps you understand

00:03:49.000 --> 00:03:51.000
where to search next in the case of ties,

00:03:51.000 --> 00:03:57.000
and it has to be just so that it underestimates or at best equals the true distance from the goal.

00:03:57.000 --> 00:04:01.000
Many, many problems have functions like these in our self-driving car.

00:04:01.000 --> 00:04:04.000
We use a function just like this; in fact the function I was just showing you,

00:04:04.000 --> 00:04:07.000
we are using in our software for free-form navigation.

00:04:07.000 --> 00:04:13.000
It boils down much to the number of which cell steps but for the Euclidean distance to a target location.

00:04:13.000 --> 00:04:16.000
I hope you understand how heuristic function might look like.

00:04:16.000 --> 00:04:20.000
It has many, many value heuristic function including setting everything to zero,

00:04:20.000 --> 00:04:21.000
which would not really help me.

00:04:21.000 --> 00:04:23.000
So let's work with this one heuristic function.

00:04:23.000 --> 00:04:26.000
Here is the heuristic function in the code.

00:04:26.000 --> 00:04:28.000
You can see the same heuristic function.

00:04:28.000 --> 00:04:35.000
The key modification now for our search algorithm is really, really simple.

00:04:35.000 --> 00:04:41.000
We again have an open list, and we add our state, we write down the g-value,

00:04:41.000 --> 00:04:46.000
but we also write down the g-value plus the heuristic value.

00:04:46.000 --> 00:04:50.000
G-value here is zero; heuristic value is 9.

00:04:50.000 --> 00:04:53.000
So the sum of the two is 9, and I call this the f-value.

00:04:53.000 --> 00:04:57.000
This is the cumulative g-value plus the heuristic value

00:04:57.000 --> 00:05:00.000
as looked up in the table over here.

00:05:00.000 --> 00:05:07.000
If I now expand I remove the element with the lowest f-value and not the lowest g-value.

00:05:07.000 --> 00:05:08.000
That's all there is to A-star.

00:05:08.000 --> 00:05:10.000
Let me give you an example.

00:05:10.000 --> 00:05:16.000
Say we went to the open list all the way down here.

00:05:16.000 --> 00:05:19.000
That is we expanded all these states over here,

00:05:19.000 --> 00:05:21.000
and this is the one present here on the open list.

00:05:21.000 --> 00:05:24.000
Our g-value will be 5.

00:05:24.000 --> 00:05:30.000
Our heuristic will be 4, and the sum is 9 as before.

00:05:30.000 --> 00:05:33.000
Let's now expand this node.

00:05:33.000 --> 00:05:38.000
We get to this one over here, the g-value increases to 6.

00:05:38.000 --> 00:05:44.000
G plus heuristic is still 9.

00:05:44.000 --> 00:05:48.000
Now let's expand it more, and there's now two options finally:

00:05:48.000 --> 00:05:51.000
This state over here and this state over here.

00:05:51.000 --> 00:05:57.000
The one up here is called 3 2, the one on the right is called 4 3.

00:05:57.000 --> 00:06:00.000
The g-value over here in both cases is 7,

00:06:00.000 --> 00:06:04.000
but when we add the h-value we get a difference.

00:06:04.000 --> 00:06:07.000
Up here we find the h-value to be 4.

00:06:07.000 --> 00:06:11.000
We kind of moved a little bit away from the goal according to the heuristic.

00:06:11.000 --> 00:06:14.000
That gives us a total of 11.

00:06:14.000 --> 00:06:20.000
Whereas for the feed over here we find the h-value to be 2.

00:06:20.000 --> 00:06:24.000
Here is the first time that A-star makes an actual difference.

00:06:24.000 --> 00:06:33.000
It has a preference to expand this node over here over the node over here.

00:06:33.000 --> 00:06:40.000
To see why the f-value, the sum of g and h, over here is 9 but over here is 11.

00:06:40.000 --> 00:06:45.000
What this reflects is that, according to the heuristic,

00:06:45.000 --> 00:06:50.000
this guy is actually 2 steps closer to the goal than this guy over here.

00:06:50.000 --> 00:06:53.000
This guy, according to the heuristic, may be 2 steps away from the goal,

00:06:53.000 --> 00:06:56.000
and the guy over here is at least 4 steps away.

00:06:56.000 --> 00:07:03.000
A-star now will expand this node over here because its f-value is 9 versus 11.

00:07:03.000 --> 00:07:06.000
So let's do this.

00:07:06.000 --> 00:07:09.000
In expanding this node we find there is two valid neighbors:

00:07:09.000 --> 00:07:11.000
the guy up here and the guy on the right.

00:07:11.000 --> 00:07:13.000
The first guy's coordinate are 3 3.

00:07:13.000 --> 00:07:15.000
The second guy is 4 4.

00:07:15.000 --> 00:07:18.000
As before we increment the g-value by one.

00:07:18.000 --> 00:07:20.000
It was eight in both cases.

00:07:20.000 --> 00:07:31.000
Now we add the heuristic to the g-value, which for the first one over here is 3;

00:07:31.000 --> 00:07:38.000
Whereas for the one on the right we get one as the heuristic.

00:07:38.000 --> 00:07:40.000
That's the result of expanding the node over here.

00:07:40.000 --> 00:07:44.000
Here is our new open list, and again we have a preference.

00:07:44.000 --> 00:07:48.000
On the open list are these three states, and we prefer the one on the right

00:07:48.000 --> 00:07:52.000
because its f-value is smaller than the other two f-values.

00:07:52.000 --> 00:07:58.000
The one over here is 9; the ones over here have an f-value of 11.

00:07:58.000 --> 00:08:02.000
So once again we expand, and in the expansion will be the goal state,

00:08:02.000 --> 00:08:09.000
and then we find the goal set and we're done without ever expanding anything in the maze up here.

00:08:09.000 --> 00:08:15.000
That feels like magic, but the key thing here is by providing additional information,

00:08:15.000 --> 00:08:18.000
the so called heuristic function, we can guide the search.

00:08:18.000 --> 00:08:24.000
When we have an impasse we can pick a node that looks closer to the goal state.

00:08:24.000 --> 09:59:59.000
As a result we will likely make more progress towards the goal.

