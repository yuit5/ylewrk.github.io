WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.500
So you have two basic possibilities when it comes to starting threads.

00:00:03.500 --> 00:00:07.650
You can either use standard thread or you can use standard async.

00:00:07.650 --> 00:00:10.455
Now the question is, which one should you use?

00:00:10.455 --> 00:00:14.189
Now, as a general rule of thumb using async as in many cases,

00:00:14.189 --> 00:00:16.169
the easiest solution which involves

00:00:16.170 --> 00:00:20.910
less boilerplate code and basically you can achieve the same results as standard thread.

00:00:20.910 --> 00:00:23.129
Now, with async, you do not have to worry

00:00:23.129 --> 00:00:25.364
about calling join at the end of the parent thread,

00:00:25.364 --> 00:00:29.264
and also there is no promise you need to carry around and manage.

00:00:29.265 --> 00:00:33.119
There's is one future per task which can be used as a barrier,

00:00:33.119 --> 00:00:34.963
as a means for data exchange,

00:00:34.963 --> 00:00:37.994
and also for parsing exceptions.

00:00:37.994 --> 00:00:41.789
Now, there are some situations where using standard thread keeps you

00:00:41.789 --> 00:00:47.365
more fine-grain control and you might want to consider using threads in such situations.

00:00:47.365 --> 00:00:53.250
Now, as the original designer of C++ Bjarne Stroustrup states on isoccp.org,

00:00:53.250 --> 00:00:57.170
"Simple is the most important aspect of the async future design."

00:00:57.170 --> 00:01:00.010
Futures can also be used with threads in general,

00:01:00.009 --> 00:01:04.609
but don't even think of using async to launch tasks that do input-output,

00:01:04.609 --> 00:01:07.370
manipulate mutexes or in other ways,

00:01:07.370 --> 00:01:09.350
interact with other threads.

00:01:09.349 --> 00:01:14.509
The idea behind async state is to provide a simple way to handle the simplest while

00:01:14.510 --> 00:01:17.570
common case and leave the most complex examples to

00:01:17.569 --> 00:01:21.069
the fully general mechanism which is using standard thread.

00:01:21.069 --> 00:01:22.844
So with that summary,

00:01:22.844 --> 00:01:25.789
see you in the next section where we take a look at one of the worst enemies of

00:01:25.790 --> 00:01:30.450
the concurrent programmer which is data races. See you there.

