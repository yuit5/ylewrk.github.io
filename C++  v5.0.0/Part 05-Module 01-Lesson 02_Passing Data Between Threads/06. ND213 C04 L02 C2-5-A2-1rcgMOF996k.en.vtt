WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.240
Now, let's take a look at this new version of the code.

00:00:03.240 --> 00:00:04.379
So on the left-hand side,

00:00:04.379 --> 00:00:07.949
you can see the diagram which includes the main function as we've seen it

00:00:07.950 --> 00:00:11.820
before and everything which is new to our lesson two project,

00:00:11.820 --> 00:00:13.470
has been added with a blue background.

00:00:13.470 --> 00:00:15.405
So the only thing new in the main function,

00:00:15.404 --> 00:00:18.419
is a block called Simulate Intersections.

00:00:18.420 --> 00:00:22.790
On the right-hand side and we are in TrafficSimulator-L2.cpp right now,

00:00:22.789 --> 00:00:26.399
in the main function you can find this block of code here.

00:00:26.399 --> 00:00:28.993
So identical to simulate vehicles,

00:00:28.993 --> 00:00:33.435
we are now calling up the simulate function on all instances

00:00:33.435 --> 00:00:37.950
of intersections which have been created by createTrafficObjects.

00:00:37.950 --> 00:00:39.210
In this case, it's not New York City,

00:00:39.210 --> 00:00:41.674
it's Paris, as you will soon see.

00:00:41.674 --> 00:00:43.539
So we're calling up simulate.

00:00:43.539 --> 00:00:46.939
This green arrow here on the left-hand side,

00:00:46.939 --> 00:00:49.939
starts up a thread within intersection.

00:00:49.939 --> 00:00:54.289
This thread function here is called process vehicle queue.

00:00:54.289 --> 00:00:58.039
We're going to look at it very shortly but the main idea of process vehicle queue,

00:00:58.039 --> 00:01:00.589
is to continuously check whether there are

00:01:00.590 --> 00:01:04.204
any vehicles queuing to enter the intersection,

00:01:04.204 --> 00:01:05.870
because if there is, let's say,

00:01:05.870 --> 00:01:09.500
five vehicles at the same time driving towards an intersection,

00:01:09.500 --> 00:01:12.769
we can only allow a single vehicle at one point in time to

00:01:12.769 --> 00:01:16.685
enter the intersection and the rest of them are stored in a waiting queue.

00:01:16.685 --> 00:01:19.984
This waiting queue has to be processed continuously so that

00:01:19.984 --> 00:01:23.209
when one vehicle exits the intersection,

00:01:23.209 --> 00:01:27.889
the next one in the queue can be allowed to enter until the entire queue is empty.

00:01:27.890 --> 00:01:30.665
But in order for vehicles to be processed in a queue,

00:01:30.665 --> 00:01:33.260
first we have to add them to the queue,

00:01:33.260 --> 00:01:34.880
and that's where we're going to look first.

00:01:34.879 --> 00:01:38.780
So in the next block in main simulate vehicles, this one here,

00:01:38.780 --> 00:01:40.474
this thread we already know,

00:01:40.474 --> 00:01:45.754
it goes to the vehicle drive function and that's where we're going to start.

00:01:45.754 --> 00:01:48.859
So let's move to the implementation of vehicle.

00:01:48.859 --> 00:01:51.504
In the vehicle drive function,

00:01:51.504 --> 00:01:54.094
here we go, we have two new blocks.

00:01:54.094 --> 00:01:57.394
The first one is called 'Request Entry of Vehicle into Target Intersection',

00:01:57.394 --> 00:02:01.009
and the second one is called 'wait until entry has been granted by intersection.'

00:02:01.010 --> 00:02:05.855
So let's find these blocks of code in the implementation down here below, and here we go.

00:02:05.855 --> 00:02:08.900
That's actually the first indication that we are advancing

00:02:08.900 --> 00:02:12.020
towards an intersection, the completion rate.

00:02:12.020 --> 00:02:14.088
We have talked about the completion rate before,

00:02:14.088 --> 00:02:18.620
when you start on a street driving towards a destination and you are starting afresh,

00:02:18.620 --> 00:02:20.775
completion is going to be 0.0.

00:02:20.775 --> 00:02:23.680
Once you're at the intersection, it's going to be 1.00,

00:02:23.680 --> 00:02:26.838
but as soon as you are approaching the intersection,

00:02:26.838 --> 00:02:30.789
this is meaning 90 percent of the street have been driven,

00:02:30.789 --> 00:02:33.449
then we want to announce to the intersection that we are approaching,

00:02:33.449 --> 00:02:38.164
and that's actually where your first task is for this version of the less than project.

00:02:38.164 --> 00:02:42.889
Now task L2.1 means startup a task using standard async,

00:02:42.889 --> 00:02:47.439
which takes a reference to the method intersection add vehicle to queue,

00:02:47.439 --> 00:02:50.585
the object underscore current destination and

00:02:50.585 --> 00:02:53.945
a Share pointer to this using the get_shared_ this function,

00:02:53.944 --> 00:02:58.489
and then wait for the data to be available before proceeding to slow down.

00:02:58.490 --> 00:03:00.680
That's exactly what's happening here in

00:03:00.680 --> 00:03:04.055
request entry of vehicle into target intersection.

00:03:04.055 --> 00:03:07.219
We are starting up a thread and the thread calls

00:03:07.219 --> 00:03:10.775
the intersection 'add vehicle to queue' as a thread function,

00:03:10.775 --> 00:03:13.629
and if we follow the green line here,

00:03:13.629 --> 00:03:17.069
that's exactly where we're going to end up,

00:03:17.069 --> 00:03:19.579
at intersection add vehicle to queue.

00:03:19.580 --> 00:03:23.060
Let's go to the implementation of intersection for

00:03:23.060 --> 00:03:29.819
this lesson project and add vehicle to queue is this one here.

00:03:29.819 --> 00:03:32.375
Actually directly here is your next task.

00:03:32.375 --> 00:03:35.750
So after printing out that a new vehicle has been added,

00:03:35.750 --> 00:03:40.405
we're going to add the new vehicle to the waiting line by creating a promise,

00:03:40.405 --> 00:03:42.504
by creating a corresponding future,

00:03:42.504 --> 00:03:48.365
and then adding both to a object called _waitingvehicles.

00:03:48.365 --> 00:03:51.020
Then we have to wait until the vehicle has been granted entry and

00:03:51.020 --> 00:03:53.880
that's exactly what's happening in this block here.

00:03:53.879 --> 00:03:57.079
We're adding the vehicle of to the waiting queue and then we

00:03:57.080 --> 00:04:00.440
are waiting until the vehicle has been granted entry.

00:04:00.439 --> 00:04:05.120
We're going to look at this _waitingvehicles implementation in a few seconds,

00:04:05.120 --> 00:04:09.230
but now let's first follow this line here back to its origin.

00:04:09.229 --> 00:04:12.349
So basically that's the signal we are waiting for here,

00:04:12.349 --> 00:04:14.435
or which we are supposed to wait for here.

00:04:14.435 --> 00:04:16.250
When this signal comes,

00:04:16.250 --> 00:04:20.240
then we may drive into the intersection to finally leave it at the end.

00:04:20.240 --> 00:04:23.360
Now, let's follow this line to its origin, to its source.

00:04:23.360 --> 00:04:27.379
Actually, it leads to this method called Process Vehicle Queue,

00:04:27.379 --> 00:04:29.165
which we talked about at the beginning,

00:04:29.165 --> 00:04:31.759
which has the basic idea of continuously

00:04:31.759 --> 00:04:34.520
checking for vehicles queuing to enter the intersection.

00:04:34.519 --> 00:04:39.694
Once the vehicle which has been waiting for the longest time has been granted entry,

00:04:39.694 --> 00:04:45.454
this vehicle needs a signal which wakes it up and then starts at driving

00:04:45.454 --> 00:04:47.779
further towards the intersection until

00:04:47.779 --> 00:04:51.109
100 percent of the street its currently is on has been completed.

00:04:51.110 --> 00:04:55.129
So as soon as entry has been permitted to the vehicle,

00:04:55.129 --> 00:04:59.329
we are then moving back to add vehicle queue.

00:04:59.329 --> 00:05:02.629
We are then launching this channel of communication here,

00:05:02.629 --> 00:05:05.584
which leads us back to vehicle drive,

00:05:05.584 --> 00:05:08.419
where we have been waiting for the signal to arrive.

00:05:08.420 --> 00:05:10.040
So in-between those two calls,

00:05:10.040 --> 00:05:11.944
the thread has been put to sleep.

00:05:11.944 --> 00:05:13.985
As soon as we get the signal here,

00:05:13.985 --> 00:05:17.014
we are granted access to the intersection,

00:05:17.014 --> 00:05:19.279
and then as soon as we are free to go,

00:05:19.279 --> 00:05:22.684
we are picking a new destination and then we are crossing the intersection,

00:05:22.685 --> 00:05:25.339
and we are then closing the loop and this is

00:05:25.339 --> 00:05:28.729
something we have discussed before in the last lesson project.

00:05:28.730 --> 00:05:30.530
So that's the basic mechanism.

00:05:30.529 --> 00:05:35.914
But for now, let's move back to this to this queue here, this vehicle queue.

00:05:35.915 --> 00:05:37.700
In order to understand how this works,

00:05:37.699 --> 00:05:43.134
let's first look at the implementation of this new class called Waiting Vehicles.

00:05:43.134 --> 00:05:47.625
For this, we need to open up the intersection.h file; the header file.

00:05:47.625 --> 00:05:49.269
At the top of this file,

00:05:49.269 --> 00:05:50.870
we have a new class defined here,

00:05:50.870 --> 00:05:52.399
it's called waiting vehicles,

00:05:52.399 --> 00:05:54.349
and it has one getter,

00:05:54.350 --> 00:05:57.590
it's getSize, and then we have two typical behavior methods.

00:05:57.589 --> 00:05:59.179
The first one is called pushBack.

00:05:59.180 --> 00:06:02.840
It takes the shared pointer to a vehicle objects and it also

00:06:02.839 --> 00:06:06.649
takes a promise as an r value reference.

00:06:06.649 --> 00:06:11.014
So we are seeing the first glimpse of move semantics here.

00:06:11.014 --> 00:06:14.959
So this promise is basically the one end of

00:06:14.959 --> 00:06:19.189
the communication channel that a vehicle has when it enters an intersection.

00:06:19.189 --> 00:06:20.509
Now, here's the basic idea.

00:06:20.509 --> 00:06:24.724
Imagine you have a vehicle and it just arrived at the intersection.

00:06:24.725 --> 00:06:27.260
It wants to get notified as soon as it's

00:06:27.259 --> 00:06:30.149
the turn of this vehicle to enter the intersection.

00:06:30.149 --> 00:06:33.454
Maybe there are five vehicles in front of it and has to wait for some time.

00:06:33.454 --> 00:06:39.089
By sending this promise as an r value reference to the intersection,

00:06:39.089 --> 00:06:40.569
it basically says, "Okay,

00:06:40.569 --> 00:06:43.519
notify me once you're ready until then I'm going to sleep."

00:06:43.519 --> 00:06:47.689
As soon as we get this message back through this promise here,

00:06:47.689 --> 00:06:50.240
then the vehicle can wake up and drive towards the intersection.

00:06:50.240 --> 00:06:51.290
That's the basic idea.

00:06:51.290 --> 00:06:53.720
This is the mechanism which implements it.

00:06:53.720 --> 00:06:57.035
The second function here is called permitEntryToFirstInQueue.

00:06:57.035 --> 00:07:01.670
I would say now let's take a look at the implementation of those two function here.

00:07:01.670 --> 00:07:05.335
So let's go to intersection.cpp.

00:07:05.334 --> 00:07:07.370
Move up to the top where we have

00:07:07.370 --> 00:07:10.115
the implementation of all the waiting vehicles functions.

00:07:10.115 --> 00:07:15.230
Push_back does nothing more than simply take the shared pointer to the vehicle,

00:07:15.230 --> 00:07:21.125
share the r value reference to the promise.

00:07:21.125 --> 00:07:25.220
We are simply pushing back the vehicle shared pointer into

00:07:25.220 --> 00:07:30.575
our vector and we are also moving the promise into our promises vector.

00:07:30.574 --> 00:07:35.254
Here you can see the full move semantics we are not using.

00:07:35.254 --> 00:07:37.894
We are taking this r value reference and are

00:07:37.894 --> 00:07:41.479
redirecting some pointers internally to not make a copy of it,

00:07:41.480 --> 00:07:45.870
but instead to move the original into the vector.

00:07:45.870 --> 00:07:50.990
In permitEntryToFirstInQqueue, we have your third task here which basically

00:07:50.990 --> 00:07:55.879
says that first you should get the entries from the front of promises and vehicles.

00:07:55.879 --> 00:08:00.754
That means, gets the elements at the front of those standard vectors

00:08:00.754 --> 00:08:03.259
and then fulfill the promise and send a signal back

00:08:03.259 --> 00:08:05.750
that permission to enter has been granted.

00:08:05.750 --> 00:08:09.899
Finally, remove the front elements from queues. So that's the mechanism.

00:08:09.899 --> 00:08:12.229
We have let's say five vehicles in the queue,

00:08:12.230 --> 00:08:14.765
we take the first one, take the promise,

00:08:14.764 --> 00:08:18.860
send back the signal to the receiving end of the promise, which is the future,

00:08:18.860 --> 00:08:21.910
which is in the vehicle instance,

00:08:21.910 --> 00:08:24.890
and waiting for wake up so to speak.

00:08:24.889 --> 00:08:26.719
Once it gets the wake up signal,

00:08:26.720 --> 00:08:30.800
it then proceeds towards the intersection and that's what's happening here.

00:08:30.800 --> 00:08:32.779
Check for vehicles on the left-hand side,

00:08:32.779 --> 00:08:35.629
check for vehicles in the queue, check for blockage.

00:08:35.629 --> 00:08:37.850
Then block the intersection for the vehicles,

00:08:37.850 --> 00:08:41.435
permit the first vehicle in the queue to enter.

00:08:41.434 --> 00:08:45.094
Then we follow this communication path here as we did before.

00:08:45.095 --> 00:08:47.360
As soon as the vehicle has been cleared,

00:08:47.360 --> 00:08:51.560
we are removing it from the queue and then are proceeding to

00:08:51.559 --> 00:08:53.134
the next vehicles in the queue until

00:08:53.134 --> 00:08:56.105
all the vehicles waiting in the queue have been woken up,

00:08:56.105 --> 00:08:57.425
have been granted entry,

00:08:57.424 --> 00:08:59.569
and they have transgressed through

00:08:59.570 --> 00:09:02.770
the intersection until the intersection is clear once again.

00:09:02.769 --> 00:09:04.840
So before you start implementing,

00:09:04.840 --> 00:09:07.850
let's take a look at how the aversion is supposed to look like.

00:09:07.850 --> 00:09:10.340
Let's run the code as before.

00:09:10.340 --> 00:09:12.200
As you can see here, we have

00:09:12.200 --> 00:09:15.830
six vehicles progressing towards the intersection in the middle,

00:09:15.830 --> 00:09:20.119
and then each vehicle in turn is allowed to enter the intersection,

00:09:20.119 --> 00:09:23.149
and it's exactly the same order in which the vehicles arrived.

00:09:23.149 --> 00:09:25.375
So now the red one should be last.

00:09:25.375 --> 00:09:30.509
Let's wait and see. Yeah, here we go.

00:09:30.509 --> 00:09:32.730
Then this vehicle should be allowed to enter,

00:09:32.730 --> 00:09:35.940
then this vehicle, then this one, and then this one.

00:09:35.940 --> 00:09:38.670
So the message queue is exactly.

00:09:38.669 --> 00:09:42.394
Yeah, the program is working its way through the message queue

00:09:42.394 --> 00:09:46.220
and allowing access to each vehicle turn by turn.

00:09:46.220 --> 00:09:48.620
This is exactly how the program should work after

00:09:48.620 --> 00:09:52.039
you have finished with all your three tasks.

