{
  "id": 2640,
  "project_id": 593,
  "upload_types": [
    "repo",
    "zip"
  ],
  "file_filter_regex": "\\A(?!(((.*/)?(__MACOSX|\\.git|node_modules|bower_components|jspm_packages|\\.idea|build|.ipynb_checkpoints|\\.Trash-0|logs)(\\Z|/))))((.*\\.(h|H|hh|hxx|h\\+\\+|c|C|cc|cpp|cxx|c\\+\\+)\\Z)|((.*/)?(README|Readme|readme|Makefile)\\Z))",
  "nomination_eligible": false,
  "stand_out": "",
  "hide_criteria": false,
  "created_at": "2019-06-20T16:42:31.985Z",
  "updated_at": "2020-10-16T05:59:55.387Z",
  "hashtag": "",
  "max_upload_size_mb": 500,
  "estimated_sla": null,
  "project_assistant_enabled": false,
  "available_for_cert_project": false,
  "language": "en-us",
  "ndkeys": [
    "nd213",
    "nd213-ent",
    "nd213-cn",
    "nd213-connect"
  ],
  "coursekeys": [],
  "is_career": false,
  "sections": [
    {
      "id": 5608,
      "name": "FP.1 Create a TrafficLight class",
      "created_at": "2019-06-20T16:59:50.173Z",
      "updated_at": "2019-06-20T17:09:26.314Z",
      "deleted_at": null,
      "position": 0,
      "rubric_id": 2640,
      "rubric_items": [
        {
          "id": 16086,
          "section_id": 5608,
          "passed_description": "A `TrafficLight` class is is defined which is a child class of `TrafficObject`.\n\n",
          "exceeded_description": "",
          "created_at": "2019-06-20T17:01:37.755Z",
          "updated_at": "2019-06-27T00:50:47.738Z",
          "deleted_at": null,
          "optional": false,
          "position": 0,
          "criteria": "The `TrafficLight` class is defined",
          "exceedable": false
        },
        {
          "id": 16087,
          "section_id": 5608,
          "passed_description": "The class shall have the public methods `void waitForGreen()` and `void simulate()` as well as `TrafficLightPhase getCurrentPhase()`, where `TrafficLightPhase` is an enum that can be either `red` or `green`.\r\n\r\nAlso, there should be a private method `void cycleThroughPhases()` and a private member `_currentPhase` which can take `red` or `green` as its value.",
          "exceeded_description": "",
          "created_at": "2019-06-20T17:08:21.402Z",
          "updated_at": "2019-06-20T22:18:52.011Z",
          "deleted_at": null,
          "optional": false,
          "position": 1,
          "criteria": "The `TrafficLight` class methods are completed",
          "exceedable": false
        }
      ]
    },
    {
      "id": 5609,
      "name": "FP.2: Implement a cycleThroughPhases method",
      "created_at": "2019-06-20T17:00:14.911Z",
      "updated_at": "2019-06-20T17:00:53.585Z",
      "deleted_at": null,
      "position": 1,
      "rubric_id": 2640,
      "rubric_items": [
        {
          "id": 16088,
          "section_id": 5609,
          "passed_description": "Implement the function with an infinite loop that measures the time between two loop cycles and toggles the current phase of the traffic light between red and green. \r\n\r\nThe cycle duration should be a random value between 4 and 6 seconds, and the while-loop should use `std::this_thread::sleep_for` to wait 1ms between two cycles.",
          "exceeded_description": "",
          "created_at": "2019-06-20T17:11:49.935Z",
          "updated_at": "2019-06-20T22:18:52.015Z",
          "deleted_at": null,
          "optional": false,
          "position": 0,
          "criteria": "The `cycleThroughPhases()` method is implemented.",
          "exceedable": false
        },
        {
          "id": 16089,
          "section_id": 5609,
          "passed_description": "The private `cycleThroughPhases()` method should be started in a thread when the public method `simulate` is called. To do this, a thread queue should be used in the base class.",
          "exceeded_description": "",
          "created_at": "2019-06-20T17:15:51.276Z",
          "updated_at": "2019-06-20T22:18:52.019Z",
          "deleted_at": null,
          "optional": false,
          "position": 1,
          "criteria": "The `cycleThroughPhases()` method is started correctly.",
          "exceedable": false
        }
      ]
    },
    {
      "id": 5610,
      "name": "FP.3 Define class MessageQueue",
      "created_at": "2019-06-20T17:00:53.741Z",
      "updated_at": "2019-06-20T17:47:21.613Z",
      "deleted_at": null,
      "position": 2,
      "rubric_id": 2640,
      "rubric_items": [
        {
          "id": 16090,
          "section_id": 5610,
          "passed_description": "A `MessageQueue` class is defined in the header of class `TrafficLight` which has the public methods `send` and `receive`.",
          "exceeded_description": "",
          "created_at": "2019-06-20T17:21:22.462Z",
          "updated_at": "2019-06-20T22:18:52.024Z",
          "deleted_at": null,
          "optional": false,
          "position": 0,
          "criteria": "A `MessageQueue` class is defined",
          "exceedable": false
        },
        {
          "id": 16091,
          "section_id": 5610,
          "passed_description": "`send` should take an `rvalue` reference of type `TrafficLightPhase` whereas `receive` should return this type.\r\n\r\nAlso, the `MessageQueue` class should define a `std::dequeue` called `_queue`, which stores objects of type `TrafficLightPhase`.\r\n\r\nAlso, there should be a `std::condition_variable` as well as an `std::mutex` as private members.",
          "exceeded_description": "",
          "created_at": "2019-06-20T17:25:20.421Z",
          "updated_at": "2019-06-20T22:18:52.027Z",
          "deleted_at": null,
          "optional": false,
          "position": 1,
          "criteria": "The `MessageQueue` class methods and members are declared correctly",
          "exceedable": false
        }
      ]
    },
    {
      "id": 5611,
      "name": "FP.4 Implement the method `send`",
      "created_at": "2019-06-20T17:45:22.983Z",
      "updated_at": "2019-06-27T00:54:13.491Z",
      "deleted_at": null,
      "position": 3,
      "rubric_id": 2640,
      "rubric_items": [
        {
          "id": 16092,
          "section_id": 5611,
          "passed_description": "The method `send` should use the mechanisms `std::lock_guard<std::mutex>` as well as `_condition.notify_one()` to add a new message to the queue and afterwards send a notification.â€¨\r\n\r\n\r\nIn the class `TrafficLight`, a private member of type `MessageQueue` should be created and used within the infinite loop to push each new `TrafficLightPhase` into it by calling `send` in conjunction with move semantics.",
          "exceeded_description": "",
          "created_at": "2019-06-20T17:47:25.622Z",
          "updated_at": "2019-06-20T22:18:52.032Z",
          "deleted_at": null,
          "optional": false,
          "position": 0,
          "criteria": "The method `send` is correctly implemented",
          "exceedable": false
        }
      ]
    },
    {
      "id": 5613,
      "name": "FP.5 Implement the methods `receive` and `waitForGreen`",
      "created_at": "2019-06-20T18:27:20.532Z",
      "updated_at": "2019-06-27T00:56:47.608Z",
      "deleted_at": null,
      "position": 4,
      "rubric_id": 2640,
      "rubric_items": [
        {
          "id": 16096,
          "section_id": 5613,
          "passed_description": "The method receive should use `std::unique_lock<std::mutex>` and\n`_condition.wait()` to wait for and receive new messages and pull them from the queue using move semantics. The received object should then be returned by the `receive` function.",
          "exceeded_description": "",
          "created_at": "2019-06-20T18:27:44.245Z",
          "updated_at": "2019-06-27T00:53:11.658Z",
          "deleted_at": null,
          "optional": false,
          "position": 0,
          "criteria": "The method `receive` is correctly implemented",
          "exceedable": false
        },
        {
          "id": 16136,
          "section_id": 5613,
          "passed_description": "The method `waitForGreen` is completed, in which an infinite while loop runs and repeatedly calls the `receive` function on the message queue. Once it receives `TrafficLightPhase::green`, the method returns.",
          "exceeded_description": null,
          "created_at": "2019-06-27T00:53:11.857Z",
          "updated_at": "2019-06-27T00:53:28.112Z",
          "deleted_at": null,
          "optional": false,
          "position": 1,
          "criteria": "The method `waitForGreen` is correctly implemented",
          "exceedable": false
        }
      ]
    },
    {
      "id": 5612,
      "name": "FP.6 Implement message exchange",
      "created_at": "2019-06-20T18:22:44.988Z",
      "updated_at": "2019-06-27T00:53:11.662Z",
      "deleted_at": null,
      "position": 5,
      "rubric_id": 2640,
      "rubric_items": [
        {
          "id": 16095,
          "section_id": 5612,
          "passed_description": " In class Intersection, a private member `_trafficLight` of type `TrafficLight` should exist. \r\n\r\nThe method `Intersection::simulate()`, should start the simulation of\r\n`_trafficLight`.\r\n\r\nThe method `Intersection::addVehicleToQueue`, should use the methods `TrafficLight::getCurrentPhase` and `TrafficLight::waitForGreen` to block\r\nthe execution until the traffic light turns green.",
          "exceeded_description": "",
          "created_at": "2019-06-20T18:23:07.139Z",
          "updated_at": "2019-06-20T22:18:52.047Z",
          "deleted_at": null,
          "optional": false,
          "position": 0,
          "criteria": "The message exchange is correctly implemented",
          "exceedable": false
        }
      ]
    }
  ],
  "project": {
    "id": 593,
    "name": "Program a Concurrent Traffic Simulation",
    "nanodegree_key": "nd213",
    "is_cert_project": false,
    "audit_project_id": null,
    "hashtag": null,
    "audit_rubric_id": 2899,
    "entitlement_required": false,
    "is_career": false,
    "recruitment_family_id": 9,
    "created_at": "2019-03-25T23:41:32.064Z",
    "updated_at": "2021-04-06T20:40:59.196Z",
    "price": "5.5",
    "ungradeable_price": "3.0",
    "audit_price": "0.0"
  }
}