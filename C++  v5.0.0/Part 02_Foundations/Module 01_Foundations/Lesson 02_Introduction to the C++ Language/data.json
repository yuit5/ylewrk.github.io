{
  "data": {
    "lesson": {
      "id": 791688,
      "key": "d9694c45-2f09-4196-8882-5b254d8b4305",
      "title": "Introduction to the C++ Language",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "In this lesson, you will build on your previous programming experience to learn the basics of the C++ language.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/d9694c45-2f09-4196-8882-5b254d8b4305/791688/1615005428239/Introduction+to+the+C%2B%2B+Language+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/d9694c45-2f09-4196-8882-5b254d8b4305/791688/1615005425364/Introduction+to+the+C%2B%2B+Language+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 827479,
          "key": "7ff1730f-6330-47eb-97cb-53fae7135a55",
          "title": "Intro",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7ff1730f-6330-47eb-97cb-53fae7135a55",
            "completed_at": "2020-05-13T09:18:22.546Z",
            "last_viewed_at": "2020-05-13T09:18:22.343Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 827481,
              "key": "14ee51eb-fe69-4c9c-826e-e9f851f003a1",
              "title": "C++ND C1 L01 Course Intro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "AMXGJ68Tng4",
                "china_cdn_id": "AMXGJ68Tng4.mp4"
              }
            },
            {
              "id": 900494,
              "key": "72db2fa0-8d22-46e5-bb10-df1bda4d9194",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Lesson Outline",
              "instructor_notes": ""
            },
            {
              "id": 900497,
              "key": "1e6781c2-4926-46b0-b143-ce7b9dd85055",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/August/5d4b4e28_l2-intro/l2-intro.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/1e6781c2-4926-46b0-b143-ce7b9dd85055",
              "caption": "",
              "alt": "",
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 797451,
          "key": "99be4034-a2c8-4313-8666-ea56330e702c",
          "title": "CODE: Write and Run Your First C++ Program",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "99be4034-a2c8-4313-8666-ea56330e702c",
            "completed_at": "2020-05-13T11:41:55.515Z",
            "last_viewed_at": "2020-05-13T11:41:55.065Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 806040,
              "key": "fef56c2b-ad56-44bc-ba4f-b16f9551b4cc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Write and Run Your First C++ Program",
              "instructor_notes": ""
            },
            {
              "id": 806041,
              "key": "58de1bda-259c-491f-b060-110d1030df46",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/January/5c2fbe77_iso-c-logo/iso-c-logo.svg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/58de1bda-259c-491f-b060-110d1030df46",
              "caption": "",
              "alt": "",
              "width": 153,
              "height": 172,
              "instructor_notes": null
            },
            {
              "id": 797454,
              "key": "24f0aa4c-20fe-430b-bad3-b159a4afdba7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now that you have a sense of _what_ you will be building in this lesson, you can learn about the tools that you will use. To get started, it helps to know a little bit about the C++ programming language. C++ is a _compiled_ language; there is a separate program - the compiler - that converts your code to an executable program that the computer can run. This means that running a new C++ program is normally a two step process:\n1. Compile your code with a compiler.\n2. Run the executable file that the compiler outputs.\n\n## C++ Main()\n\n In C++, every program contains a `main` function which is executed automatically when the program is run. Every part of a C++ program is run directly or indirectly from `main`, and the most basic program that will compile in C++ is just a `main` function with nothing else.\n\n`main()` should return an integer  (an `int` in C++), which indicates if the program exited successfully. This is specified in code by writing the return type, followed by the `main` function name, followed by empty arguments:\n```\nint main()\n```\nThe body of the `main()`, which comes after the `main` function name and arguments, is enclosed in curly brackets: `{` and `}`. In this exercise, you will write the smallest possible C++ program, which is a `main` function with empty body. If you have trouble, have a look at the `solution.cpp` file in the workspace below.\n\nRemember that you can compile and run your program with the following:\n1. To compile, use the following command: `g++ main.cpp`\n2. To run, use: `./a.out`\n\n## To Complete This Exercise:\n> - Write a main function in the `main.cpp` file below, and then compile and run the program. The program will not have any output, but it should compile and run without errors.\n",
              "instructor_notes": ""
            },
            {
              "id": 806038,
              "key": "37d999ab-24e2-4237-80a4-8459ee304d16",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r780803c797451xGENERICq4g33dtc",
              "pool_id": "webterminal",
              "view_id": "generic-eef5m",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "export CXX=g++-7\nexport CXXFLAGS=-std=c++17\ng++() {\n    /usr/bin/g++-7 -std=c++17 \"$1\"\n}\nexport -f g++",
                    "openFiles": [
                      "/home/workspace/main.cpp"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 845285,
          "key": "b4f8e850-c122-41d2-8a63-03be8042c0d6",
          "title": "Compiled Languages vs Scripted Languages",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b4f8e850-c122-41d2-8a63-03be8042c0d6",
            "completed_at": "2020-05-13T10:05:45.306Z",
            "last_viewed_at": "2020-05-13T10:05:45.122Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 845288,
              "key": "aa972521-386b-40c0-a160-0dfcc6afacb4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Compiled Languages vs Scripted Languages",
              "instructor_notes": ""
            },
            {
              "id": 845290,
              "key": "cfc91720-71a5-4ef9-baf5-beed7e4e6f9e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In the previous exercise, you compiled your C++ program before running it. If this is the first time you've worked with a compiled language, you might be wondering why one might use a compiled language. What are the advantages and disadvantages?\n\nIn the next couple of videos, Bjarne compares compiled and scripted languages and discusses some of the advantages and disadvantages of each.",
              "instructor_notes": ""
            },
            {
              "id": 845286,
              "key": "83ffcf5c-048f-403d-9521-64318fe8a299",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Advantages and Disadvantages of Compiled Languages",
              "instructor_notes": ""
            },
            {
              "id": 845287,
              "key": "7bcb77ba-efad-434c-806c-02f66fb5f3a2",
              "title": "ND213 C01 Your Friend The Compiler What Are The Adv And Disadv Of A Compiled Language Like C",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "lLdYFFIyc60",
                "china_cdn_id": "lLdYFFIyc60.mp4"
              }
            },
            {
              "id": 845291,
              "key": "2bae3f71-ee38-4217-a694-f541fc4bd77d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Advantages of a Dynamically Scripted Language",
              "instructor_notes": ""
            },
            {
              "id": 845292,
              "key": "00120f43-d1eb-4118-9538-d87f74438b3b",
              "title": "ND213 C01 When Not To Use C++ What Are The Advantages Of A Dynamically Scripted Language-",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "DedCGNJAZQY",
                "china_cdn_id": "DedCGNJAZQY.mp4"
              }
            }
          ]
        },
        {
          "id": 797552,
          "key": "9f247947-816d-4653-a367-d05205945f78",
          "title": "C++ Output and Language Basics",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9f247947-816d-4653-a367-d05205945f78",
            "completed_at": "2020-05-13T10:05:56.948Z",
            "last_viewed_at": "2020-05-13T10:05:56.806Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 827606,
              "key": "5d53149c-39e7-436b-ba5c-5b9ab7c693fb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# C++ Output and Language Basics",
              "instructor_notes": ""
            },
            {
              "id": 827611,
              "key": "e5bbc0b9-f686-4816-b0d7-2145d8705369",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/February/5c64761d_iso-c-logo/iso-c-logo.svg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/e5bbc0b9-f686-4816-b0d7-2145d8705369",
              "caption": "",
              "alt": "",
              "width": 200,
              "height": 200,
              "instructor_notes": null
            },
            {
              "id": 827497,
              "key": "84e6a0e0-9281-465a-8e16-15eb3c269990",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r780803c809478xJUPYTERw1unvo08",
              "pool_id": "jupyter",
              "view_id": "jupyter-eujkt",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowGrade": false,
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/C%2B%2B%20Output%20and%20Language%20Basics.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 797457,
          "key": "1faf5741-e5f0-492b-a9eb-6081d66180dc",
          "title": "CODE: Send Output to the Console",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1faf5741-e5f0-492b-a9eb-6081d66180dc",
            "completed_at": "2020-05-13T10:06:06.464Z",
            "last_viewed_at": "2020-05-13T10:06:06.285Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 806044,
              "key": "cbd16211-0a5a-4cd2-be5e-c5cecf2f4206",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Send Output to the Console",
              "instructor_notes": ""
            },
            {
              "id": 806045,
              "key": "daa479d4-3bd3-4fde-ac62-f83fb9d7608d",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/January/5c2fc0e7_hello-screenshot/hello-screenshot.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/daa479d4-3bd3-4fde-ac62-f83fb9d7608d",
              "caption": "",
              "alt": "",
              "width": 334,
              "height": 134,
              "instructor_notes": null
            },
            {
              "id": 797459,
              "key": "1e43145d-1f12-4061-b340-c47045c04b0b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Previously, you wrote the most basic program that will compile in C++: a simple `main()`. In this exercise, you will modify that program to print output to the terminal. Don't forget that you can compile and run your program with the following two steps from the command line:\n1. `g++ main.cpp`\n2. `./a.out`\n\n## To Complete This Exercise:\n> - Add code to the main.cpp file below to print \"Hello!\" using `cout`.",
              "instructor_notes": ""
            },
            {
              "id": 806203,
              "key": "ea4b675c-4c19-44bd-8512-5fb50134cd44",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r780803c797457xGENERICx1448v4d",
              "pool_id": "webterminal",
              "view_id": "generic-b1c2d",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "export CXX=g++-7\nexport CXXFLAGS=-std=c++17\ng++() {\n    /usr/bin/g++-7 -std=c++17 \"$1\"\n}\nexport -f g++",
                    "openFiles": [
                      "/home/workspace/main.cpp"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 797550,
          "key": "fedceaad-20d3-4a12-ac38-05047bf9e107",
          "title": "How to Store Data",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "fedceaad-20d3-4a12-ac38-05047bf9e107",
            "completed_at": "2020-05-13T10:06:18.302Z",
            "last_viewed_at": "2020-05-13T10:06:18.157Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 827616,
              "key": "09a6bf45-34a2-4402-94f7-6f52e3a24403",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# How to Store Data",
              "instructor_notes": ""
            },
            {
              "id": 827617,
              "key": "0b1d33f2-4f4b-4dc0-8e2d-e8505077b0f2",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/February/5c6c8f15_storing-data/storing-data.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0b1d33f2-4f4b-4dc0-8e2d-e8505077b0f2",
              "caption": "",
              "alt": "",
              "width": 200,
              "height": 200,
              "instructor_notes": null
            },
            {
              "id": 827625,
              "key": "b7745222-e7ec-4f94-89e8-a461503614fe",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In the next few notebooks, you will learn how to store data in your program, including basic variables with primitive types and vector containers.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 845241,
          "key": "9bee2e19-6826-4524-aef9-e611086f092e",
          "title": "Bjarne Introduces C++ Types",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9bee2e19-6826-4524-aef9-e611086f092e",
            "completed_at": "2020-05-13T10:06:28.498Z",
            "last_viewed_at": "2020-05-13T10:06:27.810Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 845242,
              "key": "ad7423d7-3d46-4c99-99ab-324d54693905",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Bjarne Introduces C++ Types\n\nC++ uses variables, just as in nearly every other programming language. Unlike some other languages, however, in C++ each variable has a fixed type. When a new variable is \"declared\", or introduced in a program, the program author must (usually) specify the variable type in the declaration.\n\nIn this next video, Bjarne discusses types for C++.",
              "instructor_notes": ""
            },
            {
              "id": 845243,
              "key": "6347d3c2-6008-47a5-8f60-bf770f39e5b2",
              "title": "ND213 C01 C++ Types What Kind Of Language Is C++-",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "2tuTBl584ow",
                "china_cdn_id": "2tuTBl584ow.mp4"
              }
            }
          ]
        },
        {
          "id": 830443,
          "key": "51d59a88-40e6-4793-a95e-4bfaaeb65ec5",
          "title": "Primitive Variable Types",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "51d59a88-40e6-4793-a95e-4bfaaeb65ec5",
            "completed_at": "2020-05-13T10:05:25.276Z",
            "last_viewed_at": "2020-05-13T10:06:31.508Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 830470,
              "key": "cc6469f6-679c-48a9-abd1-b0b6b2237da1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Primitive Variable Types",
              "instructor_notes": ""
            },
            {
              "id": 830471,
              "key": "5cb7cc9d-7dcc-4353-a472-7f0e455c9943",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/February/5c6c8f15_storing-data/storing-data.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5cb7cc9d-7dcc-4353-a472-7f0e455c9943",
              "caption": "",
              "alt": "",
              "width": 200,
              "height": 200,
              "instructor_notes": null
            },
            {
              "id": 830472,
              "key": "300a8b29-c737-4385-88da-c2b62eb4aa32",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In the notebook below, you will learn about some of the fundamental types in C++.",
              "instructor_notes": ""
            },
            {
              "id": 830452,
              "key": "eb449b76-9026-4e3c-bfd9-645c3a046f89",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r780803c809478xJUPYTERw1unvo08",
              "pool_id": "jupyter",
              "view_id": "jupyter-vz9rw",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowGrade": false,
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/Primitive%20Variable%20Types.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 845249,
          "key": "faf3915a-1609-42f3-bf05-35724133a6c4",
          "title": "What is a Vector?",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "faf3915a-1609-42f3-bf05-35724133a6c4",
            "completed_at": "2020-05-13T10:06:41.841Z",
            "last_viewed_at": "2020-05-13T10:06:41.649Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 845251,
              "key": "ec823d7b-2d7b-43d5-a77f-b83a8097d23e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# What is a Vector?",
              "instructor_notes": ""
            },
            {
              "id": 845252,
              "key": "b8c5bc6e-e1f9-47d9-84be-440a4748fb61",
              "title": "ND213 C01 Vectors Are The Basic Type Vectors",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "AfwagT0JJO0",
                "china_cdn_id": "AfwagT0JJO0.mp4"
              }
            }
          ]
        },
        {
          "id": 830462,
          "key": "bd559903-3608-4fd2-8004-44bb3687d149",
          "title": "C++ Vectors",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bd559903-3608-4fd2-8004-44bb3687d149",
            "completed_at": "2020-05-13T10:04:03.110Z",
            "last_viewed_at": "2020-05-13T10:04:02.936Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 830474,
              "key": "f980e5ad-f329-4f09-9cb0-9408983f80fb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# C++ Vectors",
              "instructor_notes": ""
            },
            {
              "id": 830475,
              "key": "9111f558-c5ff-4a1a-b205-3df96d2bcdd7",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/February/5c6c8f15_storing-data/storing-data.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/9111f558-c5ff-4a1a-b205-3df96d2bcdd7",
              "caption": "",
              "alt": "",
              "width": 200,
              "height": 200,
              "instructor_notes": null
            },
            {
              "id": 830476,
              "key": "56a1de3f-33a6-4a63-a0fe-cd34e511af92",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In the previous concept, you learned about some of the primitive types that C++ offers, including `string`s and `int`s, and you learned how to store these types in your program. In this concept, you will learn about one of the most common data structures in C++: the `vector`.\n\nIn the notebook below, you will learn how to declare and store a vector containing primitive types, and you will also get some practice with 2D vectors, which you will be using in A\\* search. ",
              "instructor_notes": ""
            },
            {
              "id": 830465,
              "key": "8ab440e4-e729-445b-85b3-d938ea16abed",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r780803c809478xJUPYTERw1unvo08",
              "pool_id": "jupyter",
              "view_id": "jupyter-zqxh2",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowGrade": false,
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/C++%20Vectors.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 845189,
          "key": "585b9f40-cb17-43d4-8952-bba55fc68ed1",
          "title": "C++ Comments",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "585b9f40-cb17-43d4-8952-bba55fc68ed1",
            "completed_at": "2020-05-13T10:07:35.808Z",
            "last_viewed_at": "2020-05-13T10:07:35.665Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 845192,
              "key": "a3670c3d-544f-4f01-b148-363ee7e9e5dd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# C++ Comments",
              "instructor_notes": ""
            },
            {
              "id": 845190,
              "key": "3f672bb3-92fa-4a68-b928-36a99d62ea26",
              "title": "ND213 C01 Comments How To Use Comments",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "KU2GjMbxnXo",
                "china_cdn_id": "KU2GjMbxnXo.mp4"
              }
            },
            {
              "id": 845193,
              "key": "d43999aa-a54c-4faf-a202-1da70d0c3ce2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You may have noticed comments in some of the code up until this point. C++ provides two kinds of comments:\n\n```cpp\n// You can use two forward slashes for single line comments.\n\n/*\nFor longer comments, you can enclose the text with an opening\nslash-star and closing star-slash.\n*/ \n\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 830466,
          "key": "62814340-fa35-4c26-a3dd-050a10786cc3",
          "title": "Using Auto",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "62814340-fa35-4c26-a3dd-050a10786cc3",
            "completed_at": "2020-05-13T10:07:42.625Z",
            "last_viewed_at": "2020-05-13T10:07:42.417Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 830478,
              "key": "faebfaca-e7e6-4272-8769-673be2f6f09e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Using Auto",
              "instructor_notes": ""
            },
            {
              "id": 830479,
              "key": "43a8a4fe-9806-4c73-bb8d-ac7ff7220902",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/February/5c6c8f15_storing-data/storing-data.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/43a8a4fe-9806-4c73-bb8d-ac7ff7220902",
              "caption": "",
              "alt": "",
              "width": 200,
              "height": 200,
              "instructor_notes": null
            },
            {
              "id": 830486,
              "key": "f4f54306-f4a4-4c36-a86c-d822bd517303",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You have now seen how to store basic types and vectors containing those types. As you practiced declaring variables, in each case you indicated the type of the variable. It is possible for C++ to do automatic type inference, using the `auto` keyword.\n\nHave a look at the notebook below to see how this works.",
              "instructor_notes": ""
            },
            {
              "id": 830467,
              "key": "b4720a98-2d53-42e8-a188-c1e1dffbd0d0",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r780803c809478xJUPYTERw1unvo08",
              "pool_id": "jupyter",
              "view_id": "jupyter-ahbdd",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowGrade": false,
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/Using%20Auto.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 830487,
              "key": "465d5894-40db-4a7f-846e-51ce8313b72a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## On to an Exercise\n\nNow that you have seen some exposure to variables and containers, test your knowledge in the next exercise! Before you go, be sure to have a careful look at the 2D vector example back in *Storing Vectors*, as you'll need this for the exercise.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 797460,
          "key": "e5dd49c6-4644-414d-b23a-471f7bfb3b4e",
          "title": "CODE: Store a Grid in Your Program",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e5dd49c6-4644-414d-b23a-471f7bfb3b4e",
            "completed_at": "2020-05-13T09:18:41.547Z",
            "last_viewed_at": "2020-05-13T10:08:07.610Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 806456,
              "key": "16a62eb1-7c60-4514-8ddd-6bc10bb696b6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Store a Grid in Your Program",
              "instructor_notes": ""
            },
            {
              "id": 806458,
              "key": "f5b4aa70-749a-4c90-bca8-c3f8b352edf5",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/January/5c33fc6e_a-search-algorithm-1/a-search-algorithm-1.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f5b4aa70-749a-4c90-bca8-c3f8b352edf5",
              "caption": "",
              "alt": "",
              "width": 341,
              "height": 181,
              "instructor_notes": null
            },
            {
              "id": 797462,
              "key": "c0191d8a-9dca-41df-a99f-ad2d5db7e066",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In order to write the A* search algorithm, you will need a grid or \"board\" to search through. We'll be working with this board throughout the remaining exercises, and we'll start by storing a hard-coded board in the main function. In later exercises, you will write code to read the board from a file.\n\n## To Complete This Exercise:\n>1. In the `main` function, declare a variable `board` as a vector of vectors of ints: `vector<vector<int>>`.  \n2. Assign this data to the board variable:\n```\n{{0, 1, 0, 0, 0, 0},\n {0, 1, 0, 0, 0, 0},\n {0, 1, 0, 0, 0, 0},\n {0, 1, 0, 0, 0, 0},\n {0, 0, 0, 0, 1, 0}}\n```\n\n**Note:** you will need to include the `vector` library, just as `iostream` is included. You will also need to use the namespace `std::vector` if you want to write `vector` rather than `std::vector` in your code.\n\nThis exercise will be ungraded, but if you get stuck, you can find the solution in `solution.cpp`. Finally, if you feel a little crowded in the editor below and need more space to work, you can click the \"Expand\" button in the lower left corner.",
              "instructor_notes": ""
            },
            {
              "id": 806232,
              "key": "128f3c0c-eb3a-4b4c-ba1f-dbb2968da858",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r780803c797460xGENERICgl56gj4t",
              "pool_id": "webterminal",
              "view_id": "generic-pofib",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "export CXX=g++-7\nexport CXXFLAGS=-std=c++17\ng++() {\n    /usr/bin/g++-7 -std=c++17 \"$1\"\n}\nexport -f g++",
                    "openFiles": [
                      "/home/workspace/main.cpp"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 797548,
          "key": "c4a4a2ad-be96-4787-bd65-7f144a2a0298",
          "title": "Getting Ready for Printing",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c4a4a2ad-be96-4787-bd65-7f144a2a0298",
            "completed_at": "2020-05-13T10:10:13.069Z",
            "last_viewed_at": "2020-05-13T10:10:12.906Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 827632,
              "key": "3ba90361-5905-42e9-a0d4-8930dda46359",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Getting Ready for Printing\n",
              "instructor_notes": ""
            },
            {
              "id": 827633,
              "key": "6336e629-c688-42c9-87a1-d180c6c4f73f",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/February/5c6c90b7_printer/printer.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/6336e629-c688-42c9-87a1-d180c6c4f73f",
              "caption": "",
              "alt": "",
              "width": 300,
              "height": 300,
              "instructor_notes": null
            },
            {
              "id": 827639,
              "key": "ee039d93-5b2f-4812-8109-053a42a0b014",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Excellent work! In the next part of the mini-project, you will write a function to print out the board that you have stored. Before you can do that, you will need to learn more about several important parts of the C++ language. \n\nIn the next exercises, you will learn how to access elements in the vectors you stored previously.  Additionally, you will learn to write loops in C++. Finally, you will learn how to write C++ functions so you can begin expanding your project.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 830507,
          "key": "f30d884c-886d-4d09-b97a-4f96479c5329",
          "title": "Working with Vectors",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f30d884c-886d-4d09-b97a-4f96479c5329",
            "completed_at": "2020-05-13T10:10:17.344Z",
            "last_viewed_at": "2020-05-13T10:58:31.890Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 830513,
              "key": "3532383e-e7e9-496f-9e07-51d005fbdce1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Working with Vectors",
              "instructor_notes": ""
            },
            {
              "id": 830514,
              "key": "f4bd7205-40b4-4a0d-b6e2-b1b344f3db70",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/February/5c6c90b7_printer/printer.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f4bd7205-40b4-4a0d-b6e2-b1b344f3db70",
              "caption": "",
              "alt": "",
              "width": 300,
              "height": 300,
              "instructor_notes": null
            },
            {
              "id": 830517,
              "key": "9ca61f48-7b3e-40ad-8c8b-5c52c62e8ab6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You declared and initialized vectors in a previous notebook, but in order for the vector to be useful, you will need to be able to retrieve the vector elements. You will learn about vector access in this notebook, along with some other useful vector features.",
              "instructor_notes": ""
            },
            {
              "id": 830515,
              "key": "7dc5182b-da5f-4a6d-8c33-17e9f4432fab",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r780803c809478xJUPYTERw1unvo08",
              "pool_id": "jupyter",
              "view_id": "jupyter-ahctf",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowGrade": false,
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/Working%20with%20Vectors.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 830508,
          "key": "063d20de-c75d-48ad-8553-7184d67817a1",
          "title": "For Loops",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "063d20de-c75d-48ad-8553-7184d67817a1",
            "completed_at": "2020-05-13T10:10:48.068Z",
            "last_viewed_at": "2020-05-13T11:01:21.202Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 830519,
              "key": "d784ac19-c066-4790-92a4-beec42f93daf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# For Loops",
              "instructor_notes": ""
            },
            {
              "id": 830520,
              "key": "cecf8cce-b976-482c-a21b-5c21095850f7",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/February/5c6c90b7_printer/printer.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/cecf8cce-b976-482c-a21b-5c21095850f7",
              "caption": "",
              "alt": "",
              "width": 300,
              "height": 300,
              "instructor_notes": null
            },
            {
              "id": 830547,
              "key": "34301c39-c724-456c-9832-8609c784ed99",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Just as in other languages you've worked with, C++ has both `for` loops and `while` loops. You will learn about `for` loops in the notebook below, and you will see `while` loops later in the course.",
              "instructor_notes": ""
            },
            {
              "id": 830525,
              "key": "10eebc93-5dfa-48c9-862b-5e247699bc76",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r780803c809478xJUPYTERw1unvo08",
              "pool_id": "jupyter",
              "view_id": "jupyter-ont1e",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowGrade": false,
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/For%20Loops.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 830510,
          "key": "43293c7a-e049-4f5c-96a4-692dffbca8a9",
          "title": "Functions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "43293c7a-e049-4f5c-96a4-692dffbca8a9",
            "completed_at": "2020-05-13T11:02:53.145Z",
            "last_viewed_at": "2020-05-13T11:02:52.862Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 830597,
              "key": "72edf59a-1d9b-4557-90d2-64b0076dea9b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Functions",
              "instructor_notes": ""
            },
            {
              "id": 830599,
              "key": "d01b698c-6e42-4469-aed0-6f89d8fed508",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/February/5c6c90b7_printer/printer.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/d01b698c-6e42-4469-aed0-6f89d8fed508",
              "caption": "",
              "alt": "",
              "width": 300,
              "height": 300,
              "instructor_notes": null
            },
            {
              "id": 830605,
              "key": "818ab2d9-d8e7-4586-914e-786e5baf9c6a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The last thing you will need to learn in order to complete the next exercise is how to write a function. Fortunately, you have seen a function before when you wrote `main()`!\n\nWhen a function is declared and defined in a single C++ file, the basic syntax is as follows:\n\n```\nreturn_type FunctionName(parameter_list) {\n  // Body of function here.\n}\n```\n\nSee the following notebook for examples:",
              "instructor_notes": ""
            },
            {
              "id": 830602,
              "key": "6714dcd5-80bc-42ff-8607-a3a066d27591",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r780803c809478xJUPYTERw1unvo08",
              "pool_id": "jupyter",
              "view_id": "jupyter-l5ejt",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowGrade": false,
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/Functions.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 830892,
              "key": "846e8829-9d58-45a8-a63e-b6732d88df2d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## On to the Exercise\n\nExcellent work! You have learned quite a lot in the last few concepts, including:\n\n- Accessing elements of a vector and getting the vector's size.\n- How `for` loops work in C++, using iterators and range-based loops.\n- Increment (and decrement) operators.\n- How to write your own functions.\n\nIn the next exercise, you will write two `for` loops to print the contents of a 2D vector so you will be able to print the grid in your project!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 797544,
          "key": "078a78ae-0f09-4d45-a4c5-d6e026a9b6d1",
          "title": "CODE: Print the Board",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "078a78ae-0f09-4d45-a4c5-d6e026a9b6d1",
            "completed_at": "2020-05-13T10:03:03.239Z",
            "last_viewed_at": "2020-05-13T11:18:59.528Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 797546,
              "key": "55222b3f-d340-4fa0-998b-8b665dd8468a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Print the Board\n\nNow that you have a board stored in your program, you'll need a way to print it out so you can display the results of your project. In this exercise, you will add a `PrintBoard` function to print the board one row at a time. When you are done, the printed output should look like:\n```\n010000\n010000\n010000\n010000\n000010\n```\n\n##  To Complete This Exercise:\n>- Write a `void PrintBoard` function. The function should accept the board as an argument. The function should print each row of the board with a newline `\"\\n\"`. \n- When you have written your `PrintBoard` function, call it from within `main()` to print the board.\n",
              "instructor_notes": ""
            },
            {
              "id": 806241,
              "key": "2729e20f-4f57-42d9-a7b3-6523adcdfc9b",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r780803c797544xGENERICeibhhs4o",
              "pool_id": "webterminal",
              "view_id": "generic-x4cnz",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "export CXX=g++-7\nexport CXXFLAGS=-std=c++17\ng++() {\n    /usr/bin/g++-7 -std=c++17 \"$1\"\n}\nexport -f g++",
                    "openFiles": [
                      "/home/workspace/main.cpp"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 830895,
          "key": "33a1041e-e4e8-4f46-9f2d-3ed600cbead9",
          "title": "If Statements and While Loops",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "33a1041e-e4e8-4f46-9f2d-3ed600cbead9",
            "completed_at": "2020-05-13T11:23:19.155Z",
            "last_viewed_at": "2020-05-13T11:23:18.937Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 830896,
              "key": "2ead225a-5498-4d72-86ec-cbee1d64ad7c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# If Statements and While Loops",
              "instructor_notes": ""
            },
            {
              "id": 830925,
              "key": "cea8e49d-9911-4ab2-a55c-9325df337842",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/January/5c300bf7_read-file/read-file.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/cea8e49d-9911-4ab2-a55c-9325df337842",
              "caption": "",
              "alt": "",
              "width": 176,
              "height": 388,
              "instructor_notes": null
            },
            {
              "id": 830898,
              "key": "d10e2a92-1637-44ed-b202-8315b501af76",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now that you are able to print the board in your program, you will make the program more flexible by reading the board from a file. This will allow you to run your program with different board files to see the results.\n\nBefore you can read the contents of a file into your program, you'll need to learn the syntax for just a couple more parts of the C++ language: `if` statements and `while` loops.",
              "instructor_notes": ""
            },
            {
              "id": 830897,
              "key": "321f08a6-2485-4349-9859-1337d825f0c7",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r780803c809478xJUPYTERw1unvo08",
              "pool_id": "jupyter",
              "view_id": "jupyter-tvxnr",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowGrade": false,
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/If%20Statements%20and%20While%20Loops.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 797563,
          "key": "b5592d1f-68db-411d-b335-5f1f92ef506d",
          "title": "Reading from a File",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b5592d1f-68db-411d-b335-5f1f92ef506d",
            "completed_at": "2020-05-13T11:28:20.484Z",
            "last_viewed_at": "2020-05-13T11:42:09.926Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 830901,
              "key": "92004723-6abb-41f3-a8df-46b737cd7d67",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Reading from a File",
              "instructor_notes": ""
            },
            {
              "id": 830924,
              "key": "35380740-c0e6-4da2-b7e6-bba9d5815f9c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/January/5c300bf7_read-file/read-file.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/35380740-c0e6-4da2-b7e6-bba9d5815f9c",
              "caption": "",
              "alt": "",
              "width": 176,
              "height": 388,
              "instructor_notes": null
            },
            {
              "id": 830903,
              "key": "c9368607-ada8-4588-bacd-2875311977d5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Great! Now that you have some practice with `if` and `while` statements, you are ready to read data from a file into your C++ program.  In the following notebook and the next exercise, you are going to write code to read a file, line by line. Have a look below for step-by-step instructions on how to do this. ",
              "instructor_notes": ""
            },
            {
              "id": 827507,
              "key": "526cc805-5f8c-4205-ada2-f93d136cb36c",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r780803c809478xJUPYTERw1unvo08",
              "pool_id": "jupyter",
              "view_id": "jupyter-00qix",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowGrade": false,
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/Reading%20from%20a%20File.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 797560,
          "key": "fad9d80f-4574-482f-96c4-646e16d6b77e",
          "title": "CODE: Read the Board from a File",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "fad9d80f-4574-482f-96c4-646e16d6b77e",
            "completed_at": "2020-05-13T11:30:48.124Z",
            "last_viewed_at": "2020-05-13T11:42:51.974Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 806258,
              "key": "1a49ca32-dbf0-4315-acaf-07cb19da8c9f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Reading the Board from a File",
              "instructor_notes": ""
            },
            {
              "id": 806259,
              "key": "f60af13d-6c28-4eac-85fa-daad652193e1",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/January/5c300bf7_read-file/read-file.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f60af13d-6c28-4eac-85fa-daad652193e1",
              "caption": "",
              "alt": "",
              "width": 176,
              "height": 194,
              "instructor_notes": null
            },
            {
              "id": 797561,
              "key": "f8c3461c-1ed4-401c-b899-ee2ee53328b0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Until now, the board has been declared and initialized in the `main()` function. As discussed in the previous notebook, you will need a function to read the board in from another file in order to make the program a little more flexible and user-friendly. \n\nThe first step in this process will be to write a `ReadBoardFile` function that reads in the file and prints each line to `cout`. The output should look like the `1.board` file, which can be opened in the editor below:\n```\n0,1,0,0,0,0,\n0,1,0,0,0,0,\n0,1,0,0,0,0,\n0,1,0,0,0,0,\n0,0,0,0,1,0,\n``` \n\n## To Complete This Exercise:\n\n> 1. Write a function `void ReadBoardFile` which reads lines from a file. Write each line to `cout`, followed by a newline character `\"\\n\"`. The function should accept a string argument, which represents the path to the file. For now, since `ReadBoardFile` does not need to return anything, you can use a `void` return type. \n2. Call `ReadBoardFile` from main using the argument `\"1.board\"`.\n\n\n**Note:** you will need to include the `fstream` class, and you may want to have `using std::ifstream` to use the `ifstream` object without having to write `std::` in the rest of your code.",
              "instructor_notes": ""
            },
            {
              "id": 806257,
              "key": "9e341db4-bae5-41b0-92dc-e9134129694d",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r780803c797560xGENERICio3yr928",
              "pool_id": "webterminal",
              "view_id": "generic-zxd6u",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "export CXX=g++-7\nexport CXXFLAGS=-std=c++17\ng++() {\n    /usr/bin/g++-7 -std=c++17 \"$1\"\n}\nexport -f g++",
                    "openFiles": [
                      "/home/workspace/main.cpp"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 797585,
          "key": "94c81cdc-1f30-4119-b60a-913eec717757",
          "title": "Processing Strings",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "94c81cdc-1f30-4119-b60a-913eec717757",
            "completed_at": "2020-05-13T11:49:58.399Z",
            "last_viewed_at": "2020-05-13T11:49:58.236Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 830905,
              "key": "be2855ea-7c6e-4aa4-beff-dac3631e92fc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Processing Strings",
              "instructor_notes": ""
            },
            {
              "id": 830906,
              "key": "625a92dd-7792-4175-8558-a0612d2915d8",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/February/5c6daf4d_string/string.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/625a92dd-7792-4175-8558-a0612d2915d8",
              "caption": "",
              "alt": "",
              "width": 694,
              "height": 189,
              "instructor_notes": null
            },
            {
              "id": 830907,
              "key": "6359acb9-ae7f-4aa6-a351-d7a258b7bb62",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now that the board is being read into your program line by line, you will want to process each line and store the data, rather than just streaming it to `cout`. There are many ways to do this in C++, but we will focus on `istringstream` from the `<sstream>` header file.",
              "instructor_notes": ""
            },
            {
              "id": 827513,
              "key": "23d0ca10-abc6-453c-a1c6-28c60c70198e",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r780803c809478xJUPYTERw1unvo08",
              "pool_id": "jupyter",
              "view_id": "jupyter-i72cp",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowGrade": false,
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/Processing%20Strings.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 830912,
          "key": "bcdfef9d-b02a-4bf8-bfa9-e12e3c17826b",
          "title": "Adding Data to a Vector",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bcdfef9d-b02a-4bf8-bfa9-e12e3c17826b",
            "completed_at": "2020-05-13T11:54:55.584Z",
            "last_viewed_at": "2020-05-13T11:54:55.154Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 830913,
              "key": "f6665928-f50b-48e3-8653-61f016e1ff02",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Adding Data to a Vector",
              "instructor_notes": ""
            },
            {
              "id": 830914,
              "key": "69c57f47-2695-4af0-a46f-0a0940569695",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In the previous exercises, you have declared and initialized vectors, and you have also accessed vector elements. In order to make full use of vectors in your code though, you will need to be able to add additional elements to them. Have a look at the following notebook for examples of how to do this.",
              "instructor_notes": ""
            },
            {
              "id": 830915,
              "key": "0a5ef04b-d52c-425e-9650-4de30c7baf36",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r780803c809478xJUPYTERw1unvo08",
              "pool_id": "jupyter",
              "view_id": "jupyter-jbsks",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowGrade": false,
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/Adding%20Data%20to%20a%20Vector.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 830916,
              "key": "1ef26b09-da0f-417c-90c0-1672d5d1e4c9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## On to an Exercise\n\nIn this notebook and the last, you learned about two useful tools:\n\n- String streams, and\n- `vector` `push_back`.\n\nThe string streaming objects in C++ are very powerful, and there are are many more ways that an `istringstream` can be used. We encourage you to have a look at all of the available functions in [the C++ reference](http://www.cplusplus.com/reference/sstream/istringstream/). However, at this point you are ready for the next exercise. In the next exercise, you will parse string lines from the board and store the `int`s in a vector using an `istringstream` object and the `push_back` method. Have a careful look a the previous examples again, and copy paste any code you think you might need before clicking the `Next` button below.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 797569,
          "key": "b4b01764-8219-4f05-baf2-c5b4ae07324d",
          "title": "CODE: Parse Lines from the File",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b4b01764-8219-4f05-baf2-c5b4ae07324d",
            "completed_at": "2020-05-13T11:59:02.567Z",
            "last_viewed_at": "2020-05-13T11:59:01.845Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 810838,
              "key": "e2e0929e-3a0f-479e-8a87-e96a53462b5b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Parse Lines from the File",
              "instructor_notes": ""
            },
            {
              "id": 810839,
              "key": "17f5085e-bca6-43d6-8537-a2edd5380a3e",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/January/5c395713_string/string.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/17f5085e-bca6-43d6-8537-a2edd5380a3e",
              "caption": "",
              "alt": "",
              "width": 694,
              "height": 189,
              "instructor_notes": null
            },
            {
              "id": 797570,
              "key": "f48ed155-d819-4c97-9247-d28fd69f196c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now that you are able to read a board line by line from a file, you will want to parse these lines and store them in a `vector<int>`. In this exercise, you will focus on a helper function to do this string parsing. \n\nWe have included a test in the `main` to ensure that the function is working correctly. If everything works, you should see:\n```\n----------------------------------------------------------\nTestParseLine: passed\n----------------------------------------------------------\n```\n\n## To Complete This Exercise:\n> Write a `vector<int> ParseLine` function which accepts a string as an argument. Use `std::istringstream` to parse the line by comma `char`s, and store the `int`s in a `vector<int>`. `ParseLine` should return the vector after parsing. \n\n**Note:** you will need to `#include <sstream>` to use `istringstream`. Additionally, you may want to add `using std::istringstream;` to your program. Finally, remember that each line of the board will look something like: `1,0,0,0,0,`, so you may want to stream an `int` and a `char` with each pass through a `while` loop.\n",
              "instructor_notes": ""
            },
            {
              "id": 806260,
              "key": "80f3f8c6-4234-435e-8a99-90200c3ca6be",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r780803c797569xGENERICpz4qlxpg",
              "pool_id": "webterminal",
              "view_id": "generic-j6u81",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "export CXX=g++-7\nexport CXXFLAGS=-std=c++17\ng++() {\n    /usr/bin/g++-7 -std=c++17 \"$1\"\n}\nexport -f g++",
                    "openFiles": [
                      "/home/workspace/main.cpp"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 809365,
          "key": "9c78c29a-26ee-4f44-9054-1e92497b6957",
          "title": "CODE: Use the ParseLine Function",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9c78c29a-26ee-4f44-9054-1e92497b6957",
            "completed_at": "2020-05-13T13:13:13.238Z",
            "last_viewed_at": "2020-05-13T13:13:12.601Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 809366,
              "key": "7ec4b5a3-e252-4d6f-a0b2-39da9ee45615",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Use the ParseLine Function\n\nGreat! With the `ParseLine` function complete, you can now use it in the `ReadBoardFile` to process each line of the incoming file. In this exercise, you will do just that: follow the TODOs in the code below, updating both `ReadBoardFile` and the `main` function to finish the processing of an external board file.\n\n## To Complete This Exercise:\n> 1. Update `ReadBoardFile` to use `ParseLine` and return the board as a `vector<vector<int>>`. You can read the TODO comments in the code for step by step instructions.\n2. Update the main function to pass the results of `ReadBoardFile` to the `PrintBoard` function.\n",
              "instructor_notes": ""
            },
            {
              "id": 809368,
              "key": "b0ef337f-952b-4048-9d8c-a7ace31e5752",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r780803c809365xGENERICjmpw7d4d",
              "pool_id": "webterminal",
              "view_id": "generic-y3zwm",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "export CXX=g++-7\nexport CXXFLAGS=-std=c++17\ng++() {\n    /usr/bin/g++-7 -std=c++17 \"$1\"\n}\nexport -f g++",
                    "openFiles": [
                      "/home/workspace/main.cpp"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 797557,
          "key": "b8935e5b-1e79-4463-a5d5-e225cdf4e872",
          "title": "Formatting the Printed Board",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b8935e5b-1e79-4463-a5d5-e225cdf4e872",
            "completed_at": "2020-05-13T13:18:04.575Z",
            "last_viewed_at": "2020-05-13T13:18:04.388Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 830917,
              "key": "222f5ce2-ec23-4f93-9118-d5cc27c75e7f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Formatting the Printed Board",
              "instructor_notes": ""
            },
            {
              "id": 830918,
              "key": "50fb56a0-e75c-4e51-bcc9-38fa57e2c2c1",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/February/5c6dc4d8_printed-board/printed-board.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/50fb56a0-e75c-4e51-bcc9-38fa57e2c2c1",
              "caption": "",
              "alt": "",
              "width": 245,
              "height": 146,
              "instructor_notes": null
            },
            {
              "id": 830919,
              "key": "cc7005ef-a8b2-411d-8555-f472c66340fc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In the previous exercises, you stored and printed the board as a `vector<vector<int>>`, where only two states were used for each cell: `0` and `1`. This is a great way to get started, but as the program becomes more complicated, there will be more than two possible states for each cell. Additionally, it would be nice to print the board in a way that clearly indicates open areas and obstacles, just as the board is printed above.\n\nTo do this clearly in your code, you will learn about and use something called an `enum`. An `enum`, short for enumerator, is a way to define a type in C++ with values that are restricted to a fixed range. For an explanation and examples, see the notebook below.\n\n ",
              "instructor_notes": ""
            },
            {
              "id": 827511,
              "key": "ebb31bf4-13dd-417c-9cdf-a7bdf93a7e17",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r780803c809478xJUPYTERw1unvo08",
              "pool_id": "jupyter",
              "view_id": "jupyter-61c8g",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowGrade": false,
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/Formatting%20the%20Printed%20Board.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 797558,
              "key": "23cf4d2b-050b-460b-ae01-4213d368e1ec",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## On to an Exercise\nIn the next exercise, you will start the process of storing the board using a custom `enum` type. To get started with this process, you will write some code to convert the custom type values to strings for printing.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 797554,
          "key": "48079022-230f-48fa-b2a9-08cb27ebb30b",
          "title": "CODE: Formatting the Printed Board",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "48079022-230f-48fa-b2a9-08cb27ebb30b",
            "completed_at": "2020-05-13T13:22:26.333Z",
            "last_viewed_at": "2020-05-13T13:22:26.148Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 797555,
              "key": "4c2ebace-fa17-4b67-a778-09258cbe48f0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Formatting the Printed Board\n\n```\n0   ⛰️   0   0   0   0\n0   ⛰️   0   0   0   0\n0   ⛰️   0   0   0   0\n0   ⛰️   0   0   0   0\n0   0    0   0  ⛰️   0\n```\n\nThe board will eventually have more than two cell states as the program becomes more complicated, and it would be nice to add formatting to the printed output of the board to ensure readability as the number of board states increases.\n\nTo accommodate more board states and facilitate print formatting, we have provided the `State` enum with enumerator values `kEmpty` and `kObstacle`. In this exercise, you will write a `CellString` function which converts each `State` to an appropriate string. In the next exercise, we will update the program to use the `enum` values and `CellString` function.\n\n## To Complete This Exercise:\n>1. Write a function `CellString` which accepts a`State` as input and returns the following string:\n  - `\"⛰️    \"` if the input equals a `kObstacle`\n  - `\"0    \"` otherwise. \n\n",
              "instructor_notes": ""
            },
            {
              "id": 806251,
              "key": "2f3672ec-3c27-4d1c-8ad8-9bd9cb714b68",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r780803c797554xGENERICvfd4xj0u",
              "pool_id": "webterminal",
              "view_id": "generic-01705",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "export CXX=g++-7\nexport CXXFLAGS=-std=c++17\ng++() {\n    /usr/bin/g++-7 -std=c++17 \"$1\"\n}\nexport -f g++",
                    "openFiles": [
                      "/home/workspace/main.cpp"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 810836,
          "key": "d6a98cb4-5611-46fd-bb1d-db186659d3f0",
          "title": "CODE: Store the Board using the State Enum",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d6a98cb4-5611-46fd-bb1d-db186659d3f0",
            "completed_at": "2020-05-13T13:27:54.833Z",
            "last_viewed_at": "2020-05-13T13:27:54.347Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 810837,
              "key": "0246137e-21fe-406d-a701-534db6b2f9a7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Store the Board Using the State Enum\n\n```\n0   ⛰️   0   0   0   0\n0   ⛰️   0   0   0   0\n0   ⛰️   0   0   0   0\n0   ⛰️   0   0   0   0\n0   0    0   0  ⛰️   0\n```\n\nFantastic work! Now that you have a way to print the `State` `enum` values, you will be able to modify your program to use `State` values in the board exclusively. To do this, you will need to modify the return types and variable types in several places of the code. Don't worry, as we have clearly marked these with a `TODO` in each part of the code.\n\nAfter this exercise, you will have completed the first part of this lesson, and you will begin coding the main A* search algorithm!\n\n## To Complete this Exercise:\n> Follow the `TODO` comments in the `main` file below, and update the program to store a board of `State` variables. When you are done, the board should print as in the image above. Note that you will need to call `CellString` on each object in the board before printing: `CellString(board[i][j])`.",
              "instructor_notes": ""
            },
            {
              "id": 811299,
              "key": "77967fa2-547d-4f86-8695-4094d515dac7",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r780803c810836xGENERIC0nc8bh84",
              "pool_id": "webterminal",
              "view_id": "generic-pmckw",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "export CXX=g++-7\nexport CXXFLAGS=-std=c++17\ng++() {\n    /usr/bin/g++-7 -std=c++17 \"$1\"\n}\nexport -f g++",
                    "openFiles": [
                      "/home/workspace/main.cpp"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 797581,
          "key": "96d4a76b-cdd0-4f5f-80aa-653de61e6b48",
          "title": "Great Work!",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "96d4a76b-cdd0-4f5f-80aa-653de61e6b48",
            "completed_at": "2020-05-13T13:32:49.786Z",
            "last_viewed_at": "2020-05-13T13:32:49.534Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 797583,
              "key": "653fc010-2280-4637-b208-7761ed258cc0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Great Work!",
              "instructor_notes": ""
            },
            {
              "id": 827483,
              "key": "a34d9026-8209-4575-bdc8-2971b8493444",
              "title": "C++ND C1 L02 Outro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "8pdt3E4wsCU",
                "china_cdn_id": "8pdt3E4wsCU.mp4"
              }
            },
            {
              "id": 929930,
              "key": "d8e7ff67-c9e1-4578-85d5-7b84f8006b62",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Summary\n\nGreat work! You now have a C++ program which reads board data, stores the board in your program, and prints the board with nice formatting. You are ready to begin writing the A* search function. \n\nHere is the outline summarizing what you have learned in this lesson:",
              "instructor_notes": ""
            },
            {
              "id": 929931,
              "key": "1a923548-eecc-4b64-bcbd-f08bf3e49e53",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/September/5d72d578_l2-outro/l2-outro.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/1a923548-eecc-4b64-bcbd-f08bf3e49e53",
              "caption": "",
              "alt": "",
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 797584,
              "key": "05248e8d-493d-4bdb-b870-bd3d5e33225b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Review\n\nAt this point, your program should look like the program below. You have built this short program from scratch, so now is great time to review the code to ensure you recall how each part of it works. ",
              "instructor_notes": ""
            },
            {
              "id": 797582,
              "key": "17c3a9a2-c3e8-4839-82f9-5d5471c4e6b6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "```cpp\n#include <fstream>\n#include <iostream>\n#include <sstream>\n#include <string>\n#include <vector>\nusing std::cout;\nusing std::ifstream;\nusing std::istringstream;\nusing std::string;\nusing std::vector;\n\nenum class State {kEmpty, kObstacle};\n\nvector<State> ParseLine(string line) {\n    istringstream sline(line);\n    int n;\n    char c;\n    vector<State> row;\n    while (sline >> n >> c && c == ',') {\n      if (n == 0) {\n        row.push_back(State::kEmpty);\n      } else {\n        row.push_back(State::kObstacle);\n      }\n    }\n    return row;\n}\n\nvector<vector<State>> ReadBoardFile(string path) {\n  ifstream myfile (path);\n  vector<vector<State>> board{};\n  if (myfile) {\n    string line;\n    while (getline(myfile, line)) {\n      vector<State> row = ParseLine(line);\n      board.push_back(row);\n    }\n  }\n  return board;\n}\n\nstring CellString(State cell) {\n  switch(cell) {\n    case State::kObstacle: return \"⛰️   \";\n    default: return \"0   \"; \n  }\n}\n\nvoid PrintBoard(const vector<vector<State>> board) {\n  for (int i = 0; i < board.size(); i++) {\n    for (int j = 0; j < board[i].size(); j++) {\n      cout << CellString(board[i][j]);\n    }\n    cout << \"\\n\";\n  }\n}\n\nint main() {\n  auto board = ReadBoardFile(\"1.board\");\n  PrintBoard(board);\n}\n```",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}