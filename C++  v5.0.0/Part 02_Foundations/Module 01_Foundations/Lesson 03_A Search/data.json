{
  "data": {
    "lesson": {
      "id": 812768,
      "key": "07d8efee-f95c-4eb0-806b-0e01d4d728c8",
      "title": "A* Search",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "In this lesson, you will learn about the A* search algorithm. Over a sequence of exercises, you will use your A* search implementation to plan a path through the obstacles in the ASCII board.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/07d8efee-f95c-4eb0-806b-0e01d4d728c8/812768/1581974620574/A*+Search+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/07d8efee-f95c-4eb0-806b-0e01d4d728c8/812768/1581974614672/A*+Search+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 827484,
          "key": "5c5d0c68-04ee-4c40-8342-82ff6a371b0b",
          "title": "Intro",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5c5d0c68-04ee-4c40-8342-82ff6a371b0b",
            "completed_at": "2020-05-13T09:08:32.941Z",
            "last_viewed_at": "2020-05-13T09:08:32.029Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 827486,
              "key": "da0a3a8f-5c31-4de9-82b1-c14ba06cd3fa",
              "title": "C++ND C1 L03 Intro V3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "XlEVpwKHkMY",
                "china_cdn_id": "XlEVpwKHkMY.mp4"
              }
            },
            {
              "id": 929932,
              "key": "9f103832-015f-4142-81c0-cdc812f17698",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Lesson Outline",
              "instructor_notes": ""
            },
            {
              "id": 929933,
              "key": "c1aeb114-854e-4a3b-ba54-3c4829c4dcd1",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/September/5d72d85c_l3-intro/l3-intro.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/c1aeb114-854e-4a3b-ba54-3c4829c4dcd1",
              "caption": "",
              "alt": "",
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 929934,
              "key": "c5f359a2-7596-4da4-8cc8-d6eb3d305084",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Lesson Goal",
              "instructor_notes": ""
            },
            {
              "id": 929935,
              "key": "de14feec-5fc6-41e8-ba20-ad1cc2e5dbe2",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/September/5d72d89a_l3-intro-1/l3-intro-1.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/de14feec-5fc6-41e8-ba20-ad1cc2e5dbe2",
              "caption": "",
              "alt": "",
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 812756,
          "key": "7987d506-c2fb-4902-9b15-b0f3dfd9b96c",
          "title": "Motion Planning",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7987d506-c2fb-4902-9b15-b0f3dfd9b96c",
            "completed_at": "2020-05-13T09:08:41.258Z",
            "last_viewed_at": "2020-05-13T16:12:15.324Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 812759,
              "key": "df33d826-57ff-44bf-89ea-7723f8a1c870",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Motion Planning\n\nThe next videos and quizzes are taught by Sebastian Thrun (Udacity's former CEO) and they come from one of Udacity's first courses. The production style is a little different from what you will see in the rest of the course, but the content is very good. In these videos, Sebastian will discuss motion planning in robotics and provide the conceptual foundation for the project that you will build.",
              "instructor_notes": ""
            },
            {
              "id": 812757,
              "key": "4542f0f7-f160-4c8c-89c5-19de69a79d07",
              "title": "Motion Planning - Artificial Intelligence for Robotics",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "KHAu5A_flcQ",
                "china_cdn_id": "KHAu5A_flcQ.mp4"
              }
            }
          ]
        },
        {
          "id": 20071,
          "key": "487431520923",
          "title": "Maze",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "487431520923",
            "completed_at": "2020-05-13T16:46:57.531Z",
            "last_viewed_at": "2020-05-13T21:38:41.953Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 130565,
              "key": "48743152",
              "title": "Maze",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "48743152",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": {
                "video": {
                  "youtube_id": "ge_-o0RfrgM",
                  "china_cdn_id": "ge_-o0RfrgM.mp4"
                },
                "text": null
              },
              "question": {
                "title": "Maze",
                "alt_text": "There is a grid with three rows and four columns. Three cells are blocked out: Row 1, Column 2; Row 2, Column 2; and Row 3, Column 4. A robot sits in Row 1, Column 1. The goal is in Row 1, Column 4. The robot can move up, down, left, and right. How many moves does it take to get from the start to the goal? Write your answer in Box 1.",
                "background_image": "//lh3.ggpht.com/oIc9N82QuxfU1436INdexTPn19HMP1ddY9R_NifdgizO__RNZTkhJkMK9ufmWWkXv4fXfHVviD10ZhS0fSfz=s0#w=1920&h=1080",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/48743152",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "48700499",
                "widgets": [
                  {
                    "group": null,
                    "initial_value": "0",
                    "label": "Box 1",
                    "marker": "1",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": 1,
                    "placement": {
                      "height": 0.0824074074074074,
                      "width": 0.11979166666666669,
                      "x": 0.6300347010294597,
                      "y": 0.7496913556699399
                    }
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "yVh0lVlerWs",
                  "china_cdn_id": "yVh0lVlerWs.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 41335,
          "key": "487332530923",
          "title": "Maze 2",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "487332530923",
            "completed_at": "2020-05-13T09:08:43.284Z",
            "last_viewed_at": "2020-05-13T21:38:48.978Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 90793,
              "key": "48733253",
              "title": "Maze 2",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "48733253",
                "completed_at": "2020-05-13T21:40:20.524Z",
                "last_viewed_at": "2020-05-13T21:40:20.524Z",
                "unstructured": "{\"1\":\"11\"}"
              },
              "instruction": {
                "video": {
                  "youtube_id": "YwAyqkznxa0",
                  "china_cdn_id": "YwAyqkznxa0.mp4"
                },
                "text": null
              },
              "question": {
                "title": "Maze 2",
                "alt_text": "There is a grid with five rows and six columns. Seven cells in the grid are blocked off: Row 1, Column 3; Row 2, Column 3; Row 4, Column 3; Row 4, Column 4; Row 3, Column 5; Row 4, Column 5; Row 5, Column 5. A robot is in the top left at Row 1, Column 1, and the goal is in the bottom right at Row 5, Column 6. The robot can move up, down, left, and right. What is the minimum number of moves to get from the start to the goal? Write your answer in Box 1.",
                "background_image": "//lh4.ggpht.com/mLdWqqQ7X8ho7xgvxWa5naM9Bqxa31RbJPUEVHi7CtVTlPBEjXiJINzdV_Orub4evjltT4hnBrGDZae7Kgw=s0#w=1920&h=1080",
                "non_google_background_image": "https://s3.cn-north-1.amazonaws.com.cn/u-img/48733253",
                "semantic_type": "ImageFormQuestion",
                "evaluation_id": "48738127",
                "widgets": [
                  {
                    "group": null,
                    "initial_value": "0",
                    "label": "Box 1",
                    "marker": "1",
                    "model": "NumericInputWidget",
                    "is_text_area": null,
                    "tabindex": 1,
                    "placement": {
                      "height": 0.09312638580931264,
                      "width": 0.1371571072319202,
                      "x": 0.6087320760598504,
                      "y": 0.6588483924611973
                    }
                  }
                ]
              },
              "answer": {
                "text": null,
                "video": {
                  "youtube_id": "aBUxPyEDOWw",
                  "china_cdn_id": "aBUxPyEDOWw.mp4"
                }
              }
            }
          ]
        },
        {
          "id": 812832,
          "key": "3b1814c0-2d7b-4969-b61f-ddeec29eb936",
          "title": "Coding the Shortest Path Algorithm",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3b1814c0-2d7b-4969-b61f-ddeec29eb936",
            "completed_at": "2020-05-13T21:40:36.018Z",
            "last_viewed_at": "2020-05-13T21:40:35.895Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 812854,
              "key": "3b918b04-c931-4984-a087-2ce2f2cd3871",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Coding the Shortest Path Algorithm\n\nIn the previous videos, Sebastian talked about the motion planning problem, and you worked through a couple of exercises using a grid-based version of this problem. In this next video, Sebastian will describe how a general path search works in a grid.",
              "instructor_notes": ""
            },
            {
              "id": 812838,
              "key": "5b5fc323-93ee-4416-b456-843bc7282eaf",
              "title": "Grid",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "pqJTVPls-k0",
                "china_cdn_id": "pqJTVPls-k0.mp4"
              }
            }
          ]
        },
        {
          "id": 811320,
          "key": "c766eb1f-b0d5-442d-89a7-4f39c28a3df6",
          "title": "A* Search",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c766eb1f-b0d5-442d-89a7-4f39c28a3df6",
            "completed_at": "2020-05-13T21:44:04.693Z",
            "last_viewed_at": "2020-05-14T07:36:37.898Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 812681,
              "key": "2eed811b-32aa-49e3-981e-b4a88024ae50",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# A* Search",
              "instructor_notes": ""
            },
            {
              "id": 812682,
              "key": "42d925ac-aaca-4791-b6ff-20d570b6898b",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/January/5c3e2cc5_a-search-algorithm-1/a-search-algorithm-1.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/42d925ac-aaca-4791-b6ff-20d570b6898b",
              "caption": "",
              "alt": "",
              "width": 441,
              "height": 181,
              "instructor_notes": null
            },
            {
              "id": 811334,
              "key": "d031b794-b9e0-46f1-9e9c-c878e0653592",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## A\\* Overview\n\nIn the previous lesson, Sebastian described how a general path search worked between two cells on a board, and you wrote C++ code to implement the board. In the next video, Sebastian will describe an improved way of searching, using an algorithm called A\\* search. This is the algorithm you will use for the implementation of your project.\n\nAfter the video, there is an additional pseudocode outline of the A\\* algorithm that you will be following as you work through each exercise. Don't worry about remembering it all now, as the exercises will guide you through each step!",
              "instructor_notes": ""
            },
            {
              "id": 811327,
              "key": "35ac4982-25a6-4c6e-9e7a-17be78a5431c",
              "title": "A* - Artificial Intelligence for Robotics",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "lxCCtgHk5Vs",
                "china_cdn_id": "lxCCtgHk5Vs.mp4"
              }
            },
            {
              "id": 812684,
              "key": "4c361b77-b641-4a91-8314-e627463c86bd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Summary and A\\* Pseudocode\n\nThis algorithm described by Sebastian is very similar to other search algorithms you may have seen before, such as [breadth-first search](https://en.wikipedia.org/wiki/Breadth-first_search), except for the additional step of computing a heuristic and using that heuristic (in addition to the cost) to find the next node.\n\nThe following is psuedocode for the algorithm described in the video above. Although the pseudocode shows the complete algorithm in a single function, we will split parts of the algorithm into separate functions in this lesson so you can implement them step-by-step in a sequence of exercises:\n\n>**Search**( *grid*, *initial_point*, *goal_point* ) :\n>\n>1. Initialize an empty list of open nodes.\n> \n>2.  Initialize a starting node with the following:\n  - x and y values given by *initial_point*.\n  - g = 0, where g is the cost for each move.\n  - h given by the heuristic function (a function of the current coordinates and the goal).\n>  \n>3. Add the new node to the list of open nodes.\n>\n>4. **while** the list of open nodes is nonempty:\n>    \n  1. Sort the open list by f-value\n  2. Pop the optimal cell (called the *current* cell).\n  3. Mark the cell's coordinates in the grid as part of the path.\n  4. **if** the *current* cell is the goal cell:\n    - return the *grid*.\n>    \n>  5. **else**, expand the search to the *current* node's neighbors. This includes the following steps:\n    - Check each neighbor cell in the *grid* to ensure that the cell is empty: it hasn't been closed and is not an obstacle.\n    - If the cell is empty, compute the cost (g value) and the heuristic, and add to the list of open nodes.\n    - Mark the cell as closed.\n>  \n>5. If you exit the while loop because the list of open nodes is empty, you have run out of new nodes to explore and haven't found a path.",
              "instructor_notes": ""
            },
            {
              "id": 907958,
              "key": "7a5db091-0e1a-47a1-8f0d-1c1cca7e4c05",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Summary\n\nThe A\\* algorithm finds a path from the start node to the end node by checking for open neighbors of the current node, computing a heuristic for each of the neighbors, and adding those neighbors to the list of open nodes to explore next. The next node to explore is the one with the lowest total cost + heuristic (g + h). This process is repeated until the end is found, as long as there are still open nodes to explore. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 907949,
          "key": "45b5f52d-04d4-4c9b-bb84-988f488f0f48",
          "title": "Lesson Code Structure",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "45b5f52d-04d4-4c9b-bb84-988f488f0f48",
            "completed_at": "2020-05-14T13:40:54.092Z",
            "last_viewed_at": "2020-05-14T13:40:52.945Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 907950,
              "key": "e2f76a77-0f91-476c-92f0-8b7858d5921b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Lesson Code Structure",
              "instructor_notes": ""
            },
            {
              "id": 907951,
              "key": "e89a6516-ff63-4d0a-a6c8-c82ca2457c19",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The next video provides an overview of the code that you will be implementing throughout the rest of the lesson. Be sure you have carefully reviewed the pseudocode from the previous concept so you'll have a better understanding of each of the functions described in the video.",
              "instructor_notes": ""
            },
            {
              "id": 907952,
              "key": "8cc7043c-010d-4c3c-b3ab-b7e3dd5ebf7b",
              "title": "Ascii A Star First Take",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ItIdjPEhHdg",
                "china_cdn_id": "ItIdjPEhHdg.mp4"
              }
            },
            {
              "id": 907953,
              "key": "56302fba-5bb9-4185-b1ed-ce996c6bcbca",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/August/5d4a19a8_a-star-code-structure/a-star-code-structure.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/56302fba-5bb9-4185-b1ed-ce996c6bcbca",
              "caption": "",
              "alt": "",
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 907954,
              "key": "457d8426-7e50-4d4a-80b1-404b46b8ed28",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Quiz\n\nBelow are the steps from the `while` loop in the A\\* pseudocode you saw previously:\n\n>**while** the list of open nodes is nonempty:\n> 1. Sort the open list by f-value\n2. Pop the optimal cell (called the *current* cell).\n3. Mark the cell's coordinates in the grid as part of the path.\n4. **if** the *current* cell is the goal cell:\n  - return the *grid*.  \n5. **else**, expand the search to the *current* node's neighbors. This includes the following steps:\n  - Check each neighbor cell in the *grid* to ensure that the cell is empty: it hasn't been closed and is not an obstacle.\n   - If the cell is empty, compute the cost (g value) and the heuristic, and add to the list of open nodes.\n   - Mark the cell as closed.\n\nIn the quiz below, match the steps to the appropriate function from the A\\* code structure diagram.",
              "instructor_notes": ""
            },
            {
              "id": 907955,
              "key": "0fe366da-7e0e-4cb6-9373-ee00a5cbbffd",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0fe366da-7e0e-4cb6-9373-ee00a5cbbffd",
                "completed_at": "2020-05-14T13:50:09.603Z",
                "last_viewed_at": "2020-05-14T13:51:13.833Z",
                "unstructured": "{\"answer_ids\":[\"a1565197254573\",\"a1565197282774\",\"a1565197298734\"],\"is_correct\":true}"
              },
              "question": {
                "complex_prompt": {
                  "text": "Match the steps in the `while` loop of the pseudocode above to the functions in the code structure diagram where the code would be implemented."
                },
                "concepts_label": "Functions",
                "answers_label": "Steps",
                "concepts": [
                  {
                    "text": "`CellSort()`",
                    "correct_answer": {
                      "id": "a1565197254573",
                      "text": "1"
                    }
                  },
                  {
                    "text": "`ExpandNeighbors()`",
                    "correct_answer": {
                      "id": "a1565197282774",
                      "text": "5"
                    }
                  },
                  {
                    "text": "`Search()`",
                    "correct_answer": {
                      "id": "a1565197298734",
                      "text": "4"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1565197282774",
                    "text": "5"
                  },
                  {
                    "id": "a1565197254573",
                    "text": "1"
                  },
                  {
                    "id": "a1565197298734",
                    "text": "4"
                  }
                ]
              }
            },
            {
              "id": 907957,
              "key": "2ec3f3ea-7f75-46c7-a3d1-09e0756c3ba5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Summary\n\nThe code for the A\\* search algorithm has been broken down into the following functions:\n\n- `CellSort()` -  sorts the open list according to the sum of h + g\n- `ExpandNeighbors()` - loops through the current node's neighbors and calls appropriate functions to add neighbors to the open list\n- `CheckValidCell()` - ensures that the potential neighbor coordinates are on the grid and that the cell is open\n- `Heuristic()` - computes the distance to the goal\n- `AddToOpen()` - adds the node to the open list and marks the grid cell as closed\n\nYou will be implementing these functions along with a few other small helper functions throughout the rest of this lesson to  complete the ASCII A\\* search program.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 801298,
          "key": "9c920dfe-0dcc-4933-819a-bfdeb30245ae",
          "title": "CODE: Starting A* Search",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9c920dfe-0dcc-4933-819a-bfdeb30245ae",
            "completed_at": "2020-05-13T09:08:47.678Z",
            "last_viewed_at": "2020-05-14T13:52:28.979Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 907959,
              "key": "34fe9433-0657-464f-bb8f-2497bbda18e3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Starting A* Search\n\nTo get started with writing the A\\* search algorithm, you will first add a `Search` function stub that accepts and returns the appropriate variable types.",
              "instructor_notes": ""
            },
            {
              "id": 907960,
              "key": "64c010ee-7543-439a-800a-7f9dda778877",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/August/5d4b0e25_start-a-star-search/start-a-star-search.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/64c010ee-7543-439a-800a-7f9dda778877",
              "caption": "Starting with the `Search()` function",
              "alt": "A* code structure diagram with Search() function highlighted",
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 801300,
              "key": "451b596a-5171-4d64-8e2e-71cf2dfebd02",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## To Complete This Exercise:\n> 1. Write a `std::vector<vector<State>> Search` function stub which takes a board grid and two length 2 int arrays as arguments. The int arrays will represent the start and goal coordinates for the search. The function should print \"\"No path found!\" and return an empty `std::vector<vector<State>>`. The function will later return the board with a path from the start to the goal.\n2. In `main()`, call `Search` with a start of `{0, 0}` and a goal of `{4, 5}`. Store the results in the variable `solution`.\n3. Pass `solution` to `PrintBoard`.",
              "instructor_notes": ""
            },
            {
              "id": 806261,
              "key": "dbf505a4-a3e7-4db7-a360-8e3cd50bddd8",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r780803c801298xGENERIC5mm6sosn",
              "pool_id": "webterminal",
              "view_id": "generic-0ybf5",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "export CXX=g++-7\nexport CXXFLAGS=-std=c++17\ng++() {\n    /usr/bin/g++-7 -std=c++17 \"$1\"\n}\nexport -f g++",
                    "openFiles": [
                      "/home/workspace/main.cpp"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 805822,
          "key": "e75a2c3d-2c18-459e-ae75-0ba6a6b38cd0",
          "title": "CODE: Writing the A* Heuristic",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e75a2c3d-2c18-459e-ae75-0ba6a6b38cd0",
            "completed_at": "2020-05-14T14:05:27.414Z",
            "last_viewed_at": "2020-05-14T14:05:26.093Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 832257,
              "key": "f4fdfd42-e232-4b77-a484-05ecf41b3c55",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Writing the A* Heuristic",
              "instructor_notes": ""
            },
            {
              "id": 832256,
              "key": "09c03089-25b9-4079-b6da-b39fec79d089",
              "title": "L2 Writing The A- Heuristic",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "yJR9fPRDKfU",
                "china_cdn_id": "yJR9fPRDKfU.mp4"
              }
            },
            {
              "id": 907961,
              "key": "de41ff30-b681-43be-9761-1f51a90f1e87",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/August/5d4b0f3e_heuristic/heuristic.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/de41ff30-b681-43be-9761-1f51a90f1e87",
              "caption": "Writing the `Heuristic()` function",
              "alt": "A* code structure diagram with Heuristic() function highlighted",
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 805828,
              "key": "43a0e1c6-c6b0-4b51-a339-529213b3adfc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In this quiz, you will write a `Heuristic` function that will be used to guide the A* search. In general, any [admissible function](https://en.wikipedia.org/wiki/Admissible_heuristic) can be used for the heuristic, but for this project, you will write one that takes a pair of 2D coordinates on the grid and returns the [Manhattan Distance](https://en.wikipedia.org/wiki/Taxicab_geometry) from one coordinate to the other.\n\n\n## To Complete This Exercise:\n> 1. Write an `int Heuristic` function which takes four `int`s as arguments. The `int`s represent two pairs of 2D coordinates: <span class=\"mathquill\">(x_1, y_1, x_2, y_2)</span>. The function should return an `int` which is the Manhattan Distance from one coordinate to the other: <span class=\"mathquill\">|x_2- x_1| + |y_2 - y_1|</span>.",
              "instructor_notes": ""
            },
            {
              "id": 806262,
              "key": "9309ad0a-d0f0-4ce5-aadf-8816fe771b6e",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r780803c805822xGENERICx5f5u2y6",
              "pool_id": "webterminal",
              "view_id": "generic-8xw9s",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "export CXX=g++-7\nexport CXXFLAGS=-std=c++17\ng++() {\n    /usr/bin/g++-7 -std=c++17 \"$1\"\n}\nexport -f g++",
                    "openFiles": [
                      "/home/workspace/main.cpp"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 812695,
          "key": "e845f4a4-7d7c-4931-891a-24a7f3791e2a",
          "title": "Pass by Reference in C++",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e845f4a4-7d7c-4931-891a-24a7f3791e2a",
            "completed_at": "2020-05-14T14:12:48.343Z",
            "last_viewed_at": "2020-05-14T14:12:48.188Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 830921,
              "key": "0b0c4195-01b1-467b-949c-9ac8939c3a43",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Pass by Reference",
              "instructor_notes": ""
            },
            {
              "id": 830922,
              "key": "8c315a89-9060-4338-b7f8-6c5fa5369711",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In the previous exercises, you've written functions that accept and return various kinds of objects. However, in all of the functions you've written so far, the objects returned by the function are different from the objects provided to the function. In other words, when the function is called on some data, a copy of that data is made, and the function operates on a copy of the data instead of the original data. This is referred to as pass by value, since only a copy of the values of an object are passed to the function, and not the actual objects itself.\n\nTo see how to use a function to operate directly on a given object, have a look at the notebook below.",
              "instructor_notes": ""
            },
            {
              "id": 827519,
              "key": "1952f53f-38e2-4e1c-8b5c-c64b92192cb4",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r780803c809478xJUPYTERw1unvo08",
              "pool_id": "jupyter",
              "view_id": "jupyter-na7qs",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowGrade": false,
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/Pass%20by%20Reference.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            },
            {
              "id": 812697,
              "key": "6b4b38ed-2a7a-4a90-8ed1-a5d5e9c7277a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## On to the Exercises!\n\nIn the next exercises you will write some functions that require passing variables by reference. This will allow helper functions in the A\\* search program to modify the state of the board without having to copy the entire board, for instance.\n\nNote that if you've encountered references before in C++, you are aware that they can be used in many other scenarios, aside from just passing variables to functions. In the next lessons, you will learn about references more generally, along with closely related _pointers_. However, you now know enough to finish the mini-project for the first half of the course!\n\nSince you are well prepared with all you need at this point, this will be the last notebook in this half of the course. Good luck!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 805874,
          "key": "70d95615-3cbe-40d1-a543-cd076423594c",
          "title": "CODE: Adding Nodes to the Open Vector",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "70d95615-3cbe-40d1-a543-cd076423594c",
            "completed_at": "2020-05-14T14:21:07.490Z",
            "last_viewed_at": "2020-05-14T14:21:05.722Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 907962,
              "key": "eb3841ed-615c-411d-97f3-aa435b3f1a6c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Adding Nodes to the Open Vector",
              "instructor_notes": ""
            },
            {
              "id": 907963,
              "key": "7a93e6d0-cb0b-4007-83cf-eade3a61898d",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/August/5d4b1057_addtoopen/addtoopen.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/7a93e6d0-cb0b-4007-83cf-eade3a61898d",
              "caption": "Writing the `AddToOpen()` function",
              "alt": "A* code structure diagram with AddToOpen function highlighted",
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 805875,
              "key": "4112abd9-ef67-459b-80ee-c6fdf795d755",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "As you've seen from Sebastian's explanation of A\\* search, the search algorithm keeps a list of potential board cells to search through. In this implementation of A\\*, we will refer to a board cell along with it's `g` and `h` values as a *node*. In other words, each node will consist of the following values which are needed for the A\\* algorithm:\n- an **x** coordinate,\n- a **y** coordinate,\n- the **g** value (or _cost_) that has accumulated up to that cell,\n- the **h** value for the cell, given by the heuristic function.\n\nIn the code, nodes will be implemented with the type `vector<int>`, and should have the form `{x, y, g, h}` for `int`s x, y, g, and h. Also, the open list will be implemented as a C++ vector (of type `vector<vector<int>>`). The goal in this exercise is for you to write a helper function for your A* Search which will add nodes to the open vector and mark them as visited in the grid.\n\n## To Complete This Exercise:\n> 1. Write a `void AddToOpen` function which accepts the following arguments:\n  - Four `int`s, one for each of the `x`, `y`, `g`, and `h` values.\n  - References to one `vector<vector<int>>` for the vector of open nodes.\n  - Reference to one `vector<vector<State>>` for the grid.\n2. The `AddToOpen` function should do two things:\n  - Create a `vector<int>` node with the form `{x, y, g, h}` and push the node to the back of the open vector.\n  - Set the grid value for the `x` and `y` coordinates to the enum value `kClosed`. We have added `kClosed` to the set of enum values.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 806263,
              "key": "32f55c54-681a-48c5-9cb0-73c16ac5fed8",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r780803c805874xGENERICdesqyinr",
              "pool_id": "webterminal",
              "view_id": "generic-0ed4f",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "export CXX=g++-7\nexport CXXFLAGS=-std=c++17\ng++() {\n    /usr/bin/g++-7 -std=c++17 \"$1\"\n}\nexport -f g++",
                    "openFiles": [
                      "/home/workspace/main.cpp"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 805877,
          "key": "9630c9c0-2b75-49ec-8aae-f1f07d4eaaf4",
          "title": "CODE: Initialize the Open Vector",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9630c9c0-2b75-49ec-8aae-f1f07d4eaaf4",
            "completed_at": "2020-05-14T14:53:25.850Z",
            "last_viewed_at": "2020-05-14T14:53:24.868Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 907964,
              "key": "45b0d078-8418-4771-b431-ac7723052c83",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Initialize the Open Vector",
              "instructor_notes": ""
            },
            {
              "id": 907965,
              "key": "3a84953e-4177-4c7a-9fe5-f1b48816b1fe",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/August/5d4b0e25_start-a-star-search/start-a-star-search.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/3a84953e-4177-4c7a-9fe5-f1b48816b1fe",
              "caption": "Filling out the `Search()` function",
              "alt": "A* code structure diagram with Search function highlighted",
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 805878,
              "key": "a740e769-fbaa-4b6d-9cd1-129cbb419593",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Fantastic work so far! In the last few coding exercises, you've been writing helper functions that will be used in the A\\* search. While there are a few more helper functions that still need to be written, in this exercise, you will begin implementing the body of the `Search` function. In particular, you will take the arguments that are passed to the search function, get the x, y, g, and h values for the first node, and then add the first node to the open vector.\n\nWe have provided the empty vector of open nodes,  `open`, in the `Search` function for you to use.\n\n## To Complete This Exercise:\n> 1. Initialize variables with the starting node values as follows:\n - `x` and `y` are given by the `init` variable values,\n - Set the initial cost `g` = 0, \n - `h` is given by `Heuristic` function. \n2. Add first node to open vector using the `AddToOpen` function by passing the node values: `x`, `y`, `g`, and `h`, along with the `open` and `grid` vectors.",
              "instructor_notes": ""
            },
            {
              "id": 806264,
              "key": "0ca78fbb-28bc-4b6a-9b70-ebd834c3dde9",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r780803c805877xGENERIC7b73tvr4",
              "pool_id": "webterminal",
              "view_id": "generic-j1g19",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "export CXX=g++-7\nexport CXXFLAGS=-std=c++17\ng++() {\n    /usr/bin/g++-7 -std=c++17 \"$1\"\n}\nexport -f g++",
                    "openFiles": [
                      "/home/workspace/main.cpp"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 805899,
          "key": "4d4c8634-3d58-4144-b1c3-dda9da7c5c71",
          "title": "CODE: Create a Comparison Function",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4d4c8634-3d58-4144-b1c3-dda9da7c5c71",
            "completed_at": "2020-05-14T15:08:01.767Z",
            "last_viewed_at": "2020-05-14T15:08:01.377Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 832254,
              "key": "59b0aa93-9c19-4401-ad93-a9fdc3217c98",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Create a Comparison Function",
              "instructor_notes": ""
            },
            {
              "id": 832255,
              "key": "00508ade-7c27-427f-bdb6-5ffd7e9c7a94",
              "title": "L2 Create A Comparison Function",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "FS-2cGo-w-k",
                "china_cdn_id": "FS-2cGo-w-k.mp4"
              }
            },
            {
              "id": 805904,
              "key": "9643bdb3-ce78-44f1-bc5c-9560f6496916",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Before you can use the vector of open nodes to expand the A* search, you will first need to be able to sort the vector. Since the vector contains nodes `{x, y, g, h}`, and there is no standard library function to sort these types of vectors, you will begin by writing a function which compares two nodes to determine their order.\n\nThis function is a helper function for the `CellSort()` function you will write later, so it is not shown on the code structure diagram.\n\n## To Complete This Exercise:\n> Write a function `bool Compare` that accepts two nodes of type `vector<int>` as arguments. It should return a boolean `true` if the f-value of the first argument is greater than the f-value of the second, and it should return `false` otherwise. Recall that the f-value is the sum of the cost and heuristic: `f = g + h`.",
              "instructor_notes": ""
            },
            {
              "id": 806265,
              "key": "f33d55af-fa9d-4111-9ad0-e9704991e2b3",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r780803c805899xGENERIC2n8hdsv3",
              "pool_id": "webterminal",
              "view_id": "generic-ppntj",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "export CXX=g++-7\nexport CXXFLAGS=-std=c++17\ng++() {\n    /usr/bin/g++-7 -std=c++17 \"$1\"\n}\nexport -f g++",
                    "openFiles": [
                      "/home/workspace/main.cpp"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 805927,
          "key": "ed40bd36-4a4b-44de-ba50-21367f15cb0b",
          "title": "CODE: Write a While Loop for the A* Algorithm",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ed40bd36-4a4b-44de-ba50-21367f15cb0b",
            "completed_at": "2020-05-14T15:19:40.267Z",
            "last_viewed_at": "2020-05-14T18:03:51.282Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 907966,
              "key": "a15af770-1aab-4243-85fb-61bcd8a8afcc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Write a While Loop for the A* Algorithm",
              "instructor_notes": ""
            },
            {
              "id": 907967,
              "key": "0c3285c5-7bb6-4c92-ba3d-2150cdcb3423",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/August/5d4b13f5_while-loop/while-loop.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0c3285c5-7bb6-4c92-ba3d-2150cdcb3423",
              "caption": "Writing the `while` loop for the search",
              "alt": "A* code diagram with while loop and CellSort function highlighted",
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 805928,
              "key": "fa4fd391-4c1f-4b52-a032-6b2b86e52ee7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Great work so far! Now on to some of the core functionality of the A\\* search algorithm. A\\* search works by sorting the open list using the f-value, and using the node with the lowest f-value as the next node in the search. This process continues until the goal node has been found or the open list runs out of nodes to use for searching.\n\nIn this exercise, you will implement the primary `while` loop in the algorithm which carries out the process described above:\n\n## To Complete This Exercise:\nComplete all of the TODOs in the pseudocode below. These are also marked directly in the exercise code.\n```\n  // TODO: while open vector is non empty {\n    // TODO: Sort the open list using `CellSort`, and get the current node.\n\n    // TODO: Get the x and y values from the current node,\n    // and set grid[x][y] to kPath.\n\n    // TODO: Check if you've reached the goal. If so, return grid.\n\n    \n    // If we're not done, expand search to current node's neighbors. This step will be completed in a later quiz.\n    // ExpandNeighbors\n  \n  //} // TODO: End while loop\n```\n\n**Note:** We've included a header and a function to sort the open vector:\n-  `#include <algorithm>`\n- `std::sort`\n- `CellSort`\n\nThe `CellSort` function uses the `Compare` function you wrote previously to determine the sorting order. The `CellSort` function contains two operators that you haven't seen before: `*` and `->`. These operators have to do with C++ pointers, which you will learn about in the next lesson. Don't worry about them for now!",
              "instructor_notes": ""
            },
            {
              "id": 805932,
              "key": "e1e800c5-5b60-4bc8-a19e-fd230ba7323a",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r780803c805927xGENERICg8fywf9e",
              "pool_id": "webterminal",
              "view_id": "generic-xe8ji",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "export CXX=g++-7\nexport CXXFLAGS=-std=c++17\ng++() {\n    /usr/bin/g++-7 -std=c++17 \"$1\"\n}\nexport -f g++",
                    "openFiles": [
                      "/home/workspace/main.cpp"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 805945,
          "key": "5bb9ed88-bbb9-446c-8ac4-468c40739d6f",
          "title": "CODE: Check for Valid Neighbors",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5bb9ed88-bbb9-446c-8ac4-468c40739d6f",
            "completed_at": "2020-05-14T18:03:39.836Z",
            "last_viewed_at": "2020-05-14T18:29:22.796Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 832253,
              "key": "159379f8-5a6f-413d-a9ab-e9435e56e3a2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Check for Valid Neighbors",
              "instructor_notes": ""
            },
            {
              "id": 832252,
              "key": "d3312fdb-0191-4d6a-b935-2e88366c0d91",
              "title": "L2 Check For Valid Neighbors",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "fDHCPqVy-FY",
                "china_cdn_id": "fDHCPqVy-FY.mp4"
              }
            },
            {
              "id": 907968,
              "key": "8c323137-36ee-4e58-ae8b-6524c1d652c4",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/August/5d4b1539_check-valid/check-valid.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8c323137-36ee-4e58-ae8b-6524c1d652c4",
              "caption": "Completing the `CheckValidCell()` function",
              "alt": "A* code structure diagram with CheckValidCell function highlighted",
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 805952,
              "key": "92dc0675-23c9-4b27-8c52-5103f71ea210",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Nice work, you are almost done with your program! The last part of the A\\* algorithm to be implemented is the part that adds neighboring nodes to the open vector. In order to expand your A\\* search from the current node to neighboring nodes, you first will need to check that neighboring grid cells are not closed, and that they are not an obstacle. In this exercise, you will write a function `CheckValidCell` that does exactly this.\n\n## To Complete This Exercise:\n\n>Write a function `bool CheckValidCell` that accepts two `ints` for the x and y coordinates and a reference to the `grid`. The function should do two things:\n1. Check that the (x, y) coordinate pair is on the grid.\n2. Check that the grid at (x, y) is `kEmpty` (this is the default case if the grid cell is not `kClosed` or a `kObstacle`).\nIf both of these conditions are true, then `CheckValidCell` should return `true`. Otherwise, it should return `false`.",
              "instructor_notes": ""
            },
            {
              "id": 805946,
              "key": "80a4bf51-37da-429e-a995-350fcd0cb8a1",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r780803c805945xGENERIC0vb68bq3",
              "pool_id": "webterminal",
              "view_id": "generic-ubxzl",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "export CXX=g++-7\nexport CXXFLAGS=-std=c++17\ng++() {\n    /usr/bin/g++-7 -std=c++17 \"$1\"\n}\nexport -f g++",
                    "openFiles": [
                      "/home/workspace/main.cpp"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 812859,
          "key": "dae07a64-ad31-46c8-8bff-47a17fc6afc0",
          "title": "Constants",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "dae07a64-ad31-46c8-8bff-47a17fc6afc0",
            "completed_at": "2020-05-14T19:07:15.577Z",
            "last_viewed_at": "2020-05-14T19:07:15.030Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 845296,
              "key": "fe09263b-3140-4c45-a053-158bf46e2883",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Constants\n\nIn [*A Tour of C++*](http://www.stroustrup.com/Tour.html), Bjarne Stroustrup writes:\n> C++ supports two notions of immutability:\n> * `const`: meaning roughly \" I promise not to change this value.\"...The compiler enforces the promise made by `const`....\n> * `constexpr`: meaning roughly \"to be evaluated at compile time.\" This is used primarily to specify constants...",
              "instructor_notes": ""
            },
            {
              "id": 845293,
              "key": "ff8d7819-4391-4500-a577-268a21213438",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r780803c809478xJUPYTERw1unvo08",
              "pool_id": "jupyter",
              "view_id": "jupyter-cvk5e",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowGrade": false,
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/Constants.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 805958,
          "key": "e7f50564-7509-4752-9478-dbca92f99efc",
          "title": "CODE: Expand the A* Search to Neighbors",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e7f50564-7509-4752-9478-dbca92f99efc",
            "completed_at": "2020-05-14T19:12:01.115Z",
            "last_viewed_at": "2020-05-14T19:12:00.977Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 907969,
              "key": "7734b6a1-53bd-41c1-ac13-0996bc447583",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Expand the A* Search to Neighbors",
              "instructor_notes": ""
            },
            {
              "id": 907970,
              "key": "6e8efc4b-5220-40a2-b1f9-4a285b8e0174",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/August/5d4b1653_expand-neighbors/expand-neighbors.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/6e8efc4b-5220-40a2-b1f9-4a285b8e0174",
              "caption": "Writing the `ExpandNeighbors()` function",
              "alt": "A* code structure diagram with ExpandNeighbors function highlighted",
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            },
            {
              "id": 805959,
              "key": "ffa75109-cccf-4498-a35d-2cadb8f3aa03",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You have now reached the final step of the A\\* algorithm! You are ready to expand your A\\* search to neighboring nodes and add valid neighbors to the open vector. In this exercise, you will write an `ExpandNeighbors` function that takes care of this functionality for you.\n\n## To Complete This Exercise:\n\n> Write a `void ExpandNeighbors` function that accepts references to the following:\n  -  The current node, \n  - the open vector,\n  - the grid, and \n  - an int array for the goal coordinates.\n>\n> The `ExpandNeighbors` function should implement the functionality given in the pseudocode below:",
              "instructor_notes": ""
            },
            {
              "id": 805960,
              "key": "5f77653b-1d97-4812-ad68-00c1f01195d3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "```\n// TODO: ExpandNeighbors {\n\n  // TODO: Get current node's data.\n\n  // TODO: Loop through current node's potential neighbors.\n\n    // TODO: Check that the potential neighbor's x2 and y2 values are on the grid and not closed.\n\n      // TODO: Increment g value, compute h value, and add neighbor to open list.\n\n// } TODO: End function\n```",
              "instructor_notes": ""
            },
            {
              "id": 805961,
              "key": "a22d9280-fecd-45ac-97dc-67ad21eef8aa",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "**Note:** we have provided directional deltas in the form of a 2D [array](https://www.programiz.com/cpp-programming/arrays). An array is a C++ container much like a vector, although without the ability to change size after initialization. Arrays can be accessed and iterated over just as vectors.\n\nIn the exercise, you can iterate over these `delta` values to check the neighbors in each direction:\n```\n// directional deltas\nconst int delta[4][2]{{-1, 0}, {0, -1}, {1, 0}, {0, 1}};\n```\n",
              "instructor_notes": ""
            },
            {
              "id": 805962,
              "key": "d0095c49-c4ff-49fa-b034-77482ec44a82",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r780803c805958xGENERICykhksdga",
              "pool_id": "webterminal",
              "view_id": "generic-mwtp9",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "export CXX=g++-7\nexport CXXFLAGS=-std=c++17\ng++() {\n    /usr/bin/g++-7 -std=c++17 \"$1\"\n}\nexport -f g++",
                    "openFiles": [
                      "/home/workspace/main.cpp"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 845204,
          "key": "cde8641f-ba67-4d0f-aba3-a28b86ab85ff",
          "title": "Arrays",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "cde8641f-ba67-4d0f-aba3-a28b86ab85ff",
            "completed_at": "2020-05-14T19:34:00.703Z",
            "last_viewed_at": "2020-05-14T19:34:00.302Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 845207,
              "key": "a69f095c-ed92-47a0-b9fe-b0bf2ca9b1c1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Arrays\n\nIn the previous exercise, we included an array of directional deltas for convenience:\n```\n// directional deltas\nconst int delta[4][2]{{-1, 0}, {0, -1}, {1, 0}, {0, 1}};\n```\nArrays are a lower level data structure than vectors, and can be slightly more efficient, in terms of memory and element access. However, this efficiency comes with a price. Unlike vectors, which can be extended with more elements, arrays have a fixed length.  Additionally, arrays may require careful memory management, depending how they are used.\n\nThe example in the project code is a good use case for an array, as it was not intended to be changed during the execution of the program. However, a vector would have worked there as well. \n\nLet's hear what Bjarne has to say about arrays in C++:",
              "instructor_notes": ""
            },
            {
              "id": 845208,
              "key": "27957f2e-7ca3-47a5-b427-3fe2dff72965",
              "title": "ND213 C01 Prefer Vectors Over Arrays What Is An Array-",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "lJVN7QMDoj0",
                "china_cdn_id": "lJVN7QMDoj0.mp4"
              }
            }
          ]
        },
        {
          "id": 805980,
          "key": "d9b5cc94-99d4-449b-9759-379d99fa17a7",
          "title": "CODE: Adding a Start and End to the Board",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d9b5cc94-99d4-449b-9759-379d99fa17a7",
            "completed_at": "2020-05-14T19:35:45.223Z",
            "last_viewed_at": "2020-05-14T19:35:45.058Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 806022,
              "key": "7db80bfe-9872-4659-abb8-81311fa4055d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Adding a Start and End to the Board",
              "instructor_notes": ""
            },
            {
              "id": 806024,
              "key": "c52f35e2-e8de-4057-9c05-3ff267bbb1e6",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/January/5c2fb8bd_racing-flags/racing-flags.svg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/c52f35e2-e8de-4057-9c05-3ff267bbb1e6",
              "caption": "",
              "alt": "",
              "width": 179,
              "height": 116,
              "instructor_notes": null
            },
            {
              "id": 805981,
              "key": "7b48908f-ec12-4dc3-9590-2846d798b623",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Excellent work! Your project is essentially complete, and the A* search algorithm is fully functional. To wrap things up, there is one modification that can be made to the project to make the printout slightly clearer. At this point, your program should print the following:",
              "instructor_notes": ""
            },
            {
              "id": 805982,
              "key": "a6174bb9-f3eb-4c54-8818-c8ad73e14b3c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "```\n🚗   ⛰️   0    0    0    0\n🚗   ⛰️   0    0    0    0\n🚗   ⛰️   0    0    0    0\n🚗   ⛰️   0    🚗   🚗   🚗\n🚗   🚗   🚗   🚗   ⛰️   🚗\n```",
              "instructor_notes": ""
            },
            {
              "id": 805983,
              "key": "65c92466-34c0-4342-93b8-f320325b1f82",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "This is fantastic, but it isn't clear where the beginning and end of the path are. In this exercise, you will add a `🚦` for the beginning of the path, and a `🏁` for the end. \n\n## To Complete This Exercise:\n1. Add a kStart and kFinish to the `State` enum.\n2. Set the grid cell to kStart for the initial coordinates and kFinish for the goal coordinates. This will happen in the `Search` function.\n3. In `CellString`, add cases to return `\"🚦   \"` for kStart and `\"🏁   \"` for kFinish.",
              "instructor_notes": ""
            },
            {
              "id": 806032,
              "key": "b3e150b8-c90a-48bd-ad3c-c676044e8184",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r780803c805980xGENERIC1u34mi5k",
              "pool_id": "webterminal",
              "view_id": "generic-kfcvs",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "userCode": "export CXX=g++-7\nexport CXXFLAGS=-std=c++17\ng++() {\n    /usr/bin/g++-7 -std=c++17 \"$1\"\n}\nexport -f g++\n",
                    "openFiles": [
                      "/home/workspace/main.cpp"
                    ],
                    "showFiles": true,
                    "allowClose": true,
                    "showEditor": true,
                    "allowSubmit": false,
                    "terminalTitle": "BASH",
                    "openTerminalOnStartup": true
                  },
                  "kind": "generic"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 827488,
          "key": "2cca54b1-857a-4d1c-96b2-12ea469bcc31",
          "title": "Congratulations!!",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2cca54b1-857a-4d1c-96b2-12ea469bcc31",
            "completed_at": "2020-05-14T19:44:01.869Z",
            "last_viewed_at": "2020-05-14T19:44:01.547Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 827489,
              "key": "c45a9811-f220-4b67-ba25-8d2103a934e2",
              "title": "C++ND C1 L03 Outro",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Ory-Mt7E7Lo",
                "china_cdn_id": "Ory-Mt7E7Lo.mp4"
              }
            },
            {
              "id": 929936,
              "key": "1a21bdb7-83be-40f6-86c7-242923917287",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Summary\n\nGreat work! Here's a summary of what you've covered in this lesson:",
              "instructor_notes": ""
            },
            {
              "id": 929937,
              "key": "f4eee3f7-f14f-4651-a277-c353e7f90669",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/September/5d72d9ff_l3-outro/l3-outro.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f4eee3f7-f14f-4651-a277-c353e7f90669",
              "caption": "",
              "alt": "",
              "width": 1920,
              "height": 1080,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 845254,
          "key": "26d6820b-71fa-40d7-b03a-dc207dd176b5",
          "title": "How to Become More Proficient at C++",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "26d6820b-71fa-40d7-b03a-dc207dd176b5",
            "completed_at": "2020-05-14T19:49:04.479Z",
            "last_viewed_at": "2020-05-14T19:49:04.253Z",
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 845256,
              "key": "d178180a-976b-4b80-be97-dd12bd0c1741",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# How to Become More Proficient at C++",
              "instructor_notes": ""
            },
            {
              "id": 845255,
              "key": "154c5a36-0eda-41b0-8ce0-06b3bd25a485",
              "title": "ND213 C01 How To Learn C++ How To Become A Proficient C++ Programmer",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "t7Mx7o1C7NE",
                "china_cdn_id": "t7Mx7o1C7NE.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    },
    {
      "name": "non_google_background_image",
      "reason": "(2016/8/18) Not sure, ask i18n team for alternative"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "starter_files",
      "reason": "prefer master_archive_id"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}